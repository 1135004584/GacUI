#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Query"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum NameOption"
L"\r\n" L"{"
L"\r\n" L"\tSpecified,"
L"\r\n" L"\tAny,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ChildOption"
L"\r\n" L"{"
L"\r\n" L"\tDirect,"
L"\r\n" L"\tIndirect,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PrimaryQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tChildOption\t\tchildOption;"
L"\r\n" L"\tNameOption\t\tattributeNameOption;"
L"\r\n" L"\ttoken\t\t\tattributeName;"
L"\r\n" L"\tNameOption\t\ttypeNameOption;"
L"\r\n" L"\ttoken\t\t\ttypeName;"
L"\r\n" L"\ttoken\t\t\treferenceName;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CascadeQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tparent;"
L"\r\n" L"\tQuery\t\t\tchild;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tExclusiveOr,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tSubstract,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tfirst;"
L"\r\n" L"\tQuery\t\t\tsecond;"
L"\r\n" L"\tBinaryOperator\top;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INDIRECT = \"////\";"
L"\r\n" L"token DIRECT = \"//\";"
L"\r\n" L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n" L"token WILDCARD = \"/*\";"
L"\r\n" L"token OPEN = \"/(\";"
L"\r\n" L"token CLOSE = \"/)\";"
L"\r\n" L"token XOR = \"/^\";"
L"\r\n" L"token INTERSECT = \"/*\";"
L"\r\n" L"token UNION = \"/+\";"
L"\r\n" L"token SUBSTRACT = \"-\";"
L"\r\n" L"token ATTRIBUTE = \"@\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryFragment"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n" L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n" L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n" L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimary"
L"\r\n" L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n" L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n" L"\t= \"(\" !QueryRoot \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query Query0"
L"\r\n" L"\t= !QPrimary"
L"\r\n" L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n" L""
L"\r\n" L"rule Query Query1"
L"\r\n" L"\t= !Query0"
L"\r\n" L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n" L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"\t"
L"\r\n" L"rule Query Query2"
L"\r\n" L"\t= !Query1"
L"\r\n" L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n" L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query QueryRoot"
L"\r\n" L"\t= !Query2"
L"\r\n" L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 5804; // 27819 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 684;
const vint parserBufferRows = 6;
const char* parserBuffer[] = {
"\x00\x00\x81\x81\x84\x02\x81\x80\x07\x82\x00\x87\x80\x83\x21\x33\x3B\x31\x30\x64\x65\x11\x35\x35\x32\x39\x3D\x7F\x18\x99\x98\x8A\x85\x84\x8C\x28\x39\x69\x6D\x21\x36\x83\x8D\x8B\x8A\x8D\x19\x85\x08\x80\x0A\x90\x81\x92\x8B\x28\x99\x88\x0B\x93\x98\x83\x29\x32\x74\x2F\xA7\x91\x9B\x03\x94\x8E\x81\x1C\x8C\x8E\x90\x82\x8C\x8A\x8B\x96\x05\xC8\xA3\x28\x39\x34\x34\x33\x98\x1B\xBE\x81\x82\xAF\x81\x8A\x9C\x03\x2B\xD8\x80\x90\x33\x95\x32\x36\x3A\x50\xFF\x7F\x86\x81\x87\x8D\x91\x91\x79\x3A\x8D\x0B\x9B\xB0\x81\x30\x3A\x74\x20\xA2\x35\x34\x3D\x32\x27\x30\x6D\x65\x21\xA3\xB9\x85\xB0\x90\x91\x24\xC6\xB9\x33\x0B\x94\xC2\xB6\xB8\x72\xF4\xB6\xB8\xB5\x37\x24\x38\x3A\x69\x6F\x2E\x3B\xB2\xA8\x82\xB2\xC0\x69\x82\xFD\x88\x8B\xC8\x03\xA5\xA6\x64\x0E\xD0\xD2\xC4\xC8\x86\x8F\xBF\x68\xEA\xAC\xA1\x82\x3D\x32\x33\x8A\x5E\xE3\x0B\xD9\xB5\xD5\x8E\xBF\xB3\x81\xA6\xB5\x85\x8B\xDC\x39\x3C\x38\xB3\xFA\x90\xBC\xB0\x07\xD0\xDD\xCC\x26\x8E\x2B\x8A\xE0\x86\xDC\xE1\xBB\x79\xA2\xD1\xD3\xC0\xAB\xDE\x81\xDD\x37\xB9\x82\xC8\xA2\x80\xA6\x33\x34\x72\x73\x20\xB5\xE4\x99\x81\xEC\x9D\x02\x2B\xA9\xE0\x8F\x30\x39\xB0\xEB\x01\xD8\xF8\x97\xA9\xA9\x83\x39\x32\x63\x12\xCF\xB0\xA1\x0B\x97\x17\x95\xFD\x6B\x42\x83\x4A\x61\x61\x53\x80\x81\x05\xB1\x47\x80\x42\x09\x8A\x8B\x82\x40\x0D\xA8\x40\x7C\x40\xBB\x49\x1E\x10\x11\x49\x12\x15\x13\x10\x54\x04\x48\x42\x87\x00\x2F\x02\x8B\x7F\x08\xB1\x4A\x55\x41\x27\x98\x8A\x84\x87\xEB\x45\x4D\x8A\x88\x01\x25\x88\x48\x88\x02\x60\x8E\x11\x10\x4D\x05\x15\x07\x4A\x3B\x80\x4B\x15\x18\x2D\x3A\x11\x11\x0B\x5A\x1F\x1D\x17\x8F\x41\x83\x9A\x14\x0C\x2D\x39\x0D\x16\x0A\x2D\x90\x84\x78\x42\xBB\x57\x19\x10\x13\x44\x03\x11\x12\x14\x44\x11\x91\x43\x8B\x2A\x03\x02\x8E\x46\x34\x83\x41\x43\x13\x50\x05\x1E\x12\x97\x00\x6F\x88\x09\x99\x00\x61\x5C\x75\x40\x48\x43\x1C\x13\x13\x53\x05\x1C\x98\x00\x2F\xA9\x03\x9D\x9C\x50\x62\x98\x42\xA0\x00\x18\x1F\x12\x14\x7B\xAF\x8E\x17\x89\x52\xB1\x49\x03\x4A\x8F\x80\x46\x84\x15\x45\x12\x19\x9C\x8B\xEA\x41\x4F\x0A\x0A\x07\x23\x99\x4B\x4A\x48\x55\x1E\x11\x12\x4F\x2B\x99\xA4\x40\x2F\x2B\x03\x84\x00\x61\x51\xA5\x42\xAB\x53\x15\x12\x13\x14\x54\x12\x11\x10\x87\x31\x88\x49\xAC\x00\x2D\x2E\xAD\xA0\x4A\xBE\x81\x4E\xA9\x10\x54\x35\xA9\x12\x10\x55\x14\xAB\xAE\x40\xBB\x80\x1A\x02\xA7\x18\x7F\x9C\x4B\x54\x4F\x37\x9E\x13\xB2\x01\x7B\xAA\x0D\x67\xBF\x9A\x44\xA2\x40\x84\x84\x1F\x10\x15\xD8\x80\x4B\xAE\x0B\xC4\x61\x55\xBB\xB4\x08\x48\x53\x14\x14\xB7\x85\x1F\xB5\x40\x84\xAF\x03\x1F\x0A\x6D\x45\x41\x58\x89\x05\x52\x0B\x4A\xBF\x2E\x57\x68\x59\x10\x88\x69\x13\x5D\x5D\x64\x1C\x0B\x4A\xC2\x01\xE8\x66\x44\xC1\x71\x46\xCA\x60\x19\x2E\x12\x1F\x1B\x1B\x74\x13\x14\x1F\x48\x74\x17\x0B\x4A\xC7\x00\x40\x10\x08\x09\x3C\x11\x12\xC3\xC3\x05\xC7\xC5\x18\x19\x3E\x00\xCD\xBD\x40\x26\xCE\xC9\x1C\xC4\x89\x48\xC8\x07\x4A\x37\xCD\xC7\x70\xCD\x12\xC8\xCE\x0A\xC6\x1C\xD6\x0B\x4A\xD0\x21\xE0\x05\xCB\xC9\x33\xE9\xC3\xC5\xCB\xFF\xB0\xC8\xD0\xCF\x2A\xE4\x14\x07\x4A\x53\xFA\xC8\x64\xD4\x13\xEE\x02\x0C\x1D\x2B\x5C\xD0\x43\xD1\x32\xD8\xD8\xC2\x0F\x3A\x20\x02\x08\x10\x67\xE0\x0B\x14\x08\x37\xB9\x80\x09\xD9\x6F\x51\xCA\xC8\x74\x65\x20\x0D\x16\xD9\x3A\x22\x00\x09\x08\x31\xC7\x76\x12\x1C\x61\x27\x19\x5F\x57\x20\x37\x19\x18\x1D\x68\x20\x0B\x1C\x08\x71\xF5\xC1\x72\x74\x92\x60\x0D\x0E\xD9\x53\x00\x73\x19\x1A\xDF\x6B\xCA\xDD\x1F\x10\x2B\x4D\xE6\xD5\x68\x7F\xD1\xE3\xE0\x74\x2E\xC2\x42\xCB\x7D\xD8\x62\xEA\xE0\x5E\x74\x1E\x09\x0C\xA9\x2B\x41\xEF\xD7\xA9\xE1\xE0\xE0\xEB\x5F\x64\xD0\x08\x0A\xBB\xEC\xD8\x8D\x11\x6F\xE0\x0E\x71\x70\x85\xC7\xE9\xE3\xE2\xC3\xF4\xD0\xE6\x1B\x92\xD4\xE6\xE4\xE6\x69\x1A\xE0\x09\x1F\x20\x29\x00\x08\x1F\xBD\xE2\x0A\x0A\xDE\x86\xC8\xEA\xE2\xF0\xBF\x4F\xEF\x63\x74\xCD\xE2\x01\x12\x1B\x79\x1B\xE5\xF5\xF5\x22\xEB\xD2\x0A\x0B\x7A\xED\xD0\xF1\xD9\xAD\x6F\x6D\x6A\x1B\xB2\x74\xD6\xDC\xE3\x73\x20\x08\xD2\x4E\x9F\x65\x21\x00\xB5\x76\x23\xD5\x64\x76\x74\x01\x28\x74\xD2\x06\x8D\x74\xAD\x73\x75\x20\x0F\x80\x6E\xDF\x37\x74\x74\xDD\x7C\x74\x77\xF2\x61\x79\xF2\x0C\x35\x78\xEF\x48\x79\x7C\xCA\x63\x7D\xE4\x13\x72\x05\xCA\x78\x38\x7A\xD2\x74\x7A\xF5\x58\x7C\x76\xED\x5C\x7E\x78\xDF\x7B\x81\x74\x22\x8C\x78\x12\xA7\x79\x7D\xD3\x6B\x7D\x0A\x6D\x76\x6C\xF8\x7E\x76\x6D\xF4\x6E\x34\x6C\x78\x74\x79",
"\xBB\x4D\x26\x7F\x32\x7A\x24\x02\x80\x2A\x81\xB0\x4A\x68\x61\x55\x65\x21\x14\x84\x89\x68\xB9\x59\x6C\x06\x5E\x65\x21\x16\x92\x87\x6B\x27\xAB\x62\x77\x67\x7A\x6F\xDA\x19\x80\x6E\x2F\xBA\x7F\x6E\x22\x19\x6E\xC8\x7C\x6B\x80\x0A\xAD\x75\x83\xC7\x6C\x72\x19\x8C\x3B\x79\xF2\x66\x87\x72\x99\x64\x0F\xE6\x4B\x80\x01\x26\xBB\x66\x8B\x52\x74\x6A\xD3\x4E\x86\x8A\x9F\x73\x01\x8B\x02\x3B\x88\x15\xE2\x6F\x8B\xB2\x61\x8A\x6D\x3F\x93\x7E\x1C\x85\x95\x88\x91\x69\x8A\x6F\x6C\x92\x64\x03\x84\x7D\x7B\x38\x8D\x75\x67\xE2\x63\x35\x0D\xCE\x77\x85\x3C\x9B\x71\x80\x02\x23\x81\x1B\xA3\x7D\x74\x3E\xBE\x8A\x75\x6E\x9F\x2A\x0B\x33\x0F\x80\x81\x11\x84\x8A\x9B\x94\x0E\x05\xBD\x74\x8C\xF0\x4F\x3C\x83\x9D\x91\x84\x08\xF4\x84\x86\x3B\x8F\x7E\x94\x39\x8B\x85\xF6\x5B\x70\x8E\x61\xBF\x93\x86\xA2\x85\x7F\x0D\xEA\x76\x7A\xEB\x6E\x78\x7E\x22\x7D\x95\xFD\x43\x89\x7E\x0E\x86\x8D\x7F\xFF\x62\x32\x2B\x83\x9F\x8E\x4A\x81\x90\x21\x53\x8F\x68\x20\xAF\x73\x19\x95\x2D\x9C\x76\xEA\x86\x9E\xEE\x19\x93\x82\x56\x9F\x2A\x64\xC1\x8B\x73\x27\xF3\x64\x99\x68\xB6\x80\x7D\x9B\x6D\x02\x02\x5C\x83\x60\x40\xA0\x88\x6D\x90\x9D\x97\x3E\x8A\x37\x8C\xBC\x58\x90\x97\xB1\x94\x0C\x3E\xB0\x8A\x9F\x39\x90\x9C\x7C\x24\x97\x8C\x0A\xFA\x83\x7A\x54\x81\x22\x95\x9A\x91\xA1\xCE\x05\x23\xA4\x88\xB6\x9E\x75\x16\x78\x61\x11\x6E\x04\x0D\x1E\x45\x26\xA5\x24\x66\xA4\xEE\x3A\x90\x04\x20\x1E\xA0\x20\x20\xB5\x9F\x4C\xE3\x90\x75\x02\x91\xA6\x05\x35\x15\x95\x40\x37\x9B\x95\x99\xBB\x90\x83\xBF\x7A\x83\x30\xF9\x2D\x99\x0F\x8F\x9D\x31\xC5\x99\xA3\x31\xD1\x7C\xA2\x15\x97\x7B\x99\x2F\x9E\x82\x2F\xA1\x98\xA2\xB3\x53\x99\x99\xEB\x77\x99\xFC\x49\xA1\x88\xFB\x71\x35\x88\xFC\x68\x8B\x71\x3A\x20\x08\x9E\x80\x03\x91\x80\x9A\x03\x4A\x72\xAD\xA7\x2A\x8E\x74\x62\x29\xB4\x0F\x4A\xE4\x00\x65\x82\x3D\xA9\xA6\xF1\x97\xAE\x0F\x35\xAB\x55\xDD\x14\x8F\x59\x08\x28\xB3\x5B\xC8\x63\x96\x5B\x2B\x26\xB1\xF0\x92\x67\x2E\xA2\x0F\x05\xAC\xB1\x8F\x33\x4E\x35\x8C\x09\xC4\x00\x3C\xFC\x34\x0C\x9A\x7B\x70\xAE\x39\xC0\x02\xA0\x82\x96\x20\x8C\x28\x0F\xA2\x60\x79\xA6\x6D\x14\x27\x6D\xB4\x54\x93\xB2\x88\x16\xBF\x7A\xCC\xA1\x31\xAA\x66\x69\x08\x4B\x9D\xB3\x0D\xCF\xA0\xAC\x9E\x5D\x83\xB5\x61\xE4\x98\x33\x9B\x80\x01\xA7\x98\x35\x63\xC5\x7A\xAC\xA5\x7C\x42\x21\x5F\x80\xB2\xB1\x4D\x8C\x51\x21\x13\x7A\x20\x06\xC3\xAE\x26\x60\x30\x0F\x75\x28\x2B\x26\xBB\xB4\x7B\xBB\x3C\xD4\x84\xB5\x81\x97\xBA\x77\xD7\xA1\x78\x57\x77\x74\x0E\x10\x14\x89\x78\xB6\xA9\xAC\x55\x44\x2C\xAC\xEA\x80\x26\xBA\xDB\xB9\xBB\x5B\xDB\xB3\x97\x1D\x2B\x26\xBF\xE1\xA6\x24\x0C\x68\xBB\xBA\xF5\x9D\x2C\x70\xEF\xA5\x6D\x7C\xC7\x83\xBE\xAB\x02\x30\x08\xF6\xA0\x00\x7E\x82\xCA\xBF\xEB\x9A\x68\xC0\x05\x38\xC1\xC9\x62\xB5\x6D\xF4\xA5\x6B\xBD\xAD\x62\x65\x82\xA0\x0B\xC1\xFE\x4D\xC5\x28\x26\x31\xC3\x84\x96\x20\x06\xE6\x05\x26\xC5\x16\xD9\xAF\x5E\xDC\x51\x21\xCE\x31\xA2\xBC\xD3\xB5\x3E\x76\xA6\x21\x07\x0A\xC2\x31\x06\x2E\x14\x06\x2F\x2B\x23\xC9\x00\xD6\x21\x06\x04\xDC\xC5\xF0\x5F\x31\x3D\xF6\xAE\x86\xBD\x05\xC5\x6F\x7D\x79\x3C\xA5\xB4\xA7\x3A\x30\x4D\xA0\x05\x7B\x65\x7A\xB7\xBA\x21\x3E\xB3\x9B\x65\xBF\x86\xBC\xC9\xC9\x23\xCB\xC8\x3C\xE2\x26\x6E\x17\x7A\x6E\xC2\x10\x13\xCA\x3F\x56\xD3\x3C\x96\xF9\x9A\xCA\x38\x25\x7D\x08\x78\x03\x0C\x1B\x75\x03\x0F\x34\x36\x0D\x31\x72\x01\xCC\x6C\xBF\xC3\xBD\xED\x90\xC2\xC7\xFB\xBC\xC6\x8F\xBC\xC3\x96\x55\x2B\x26\xD1\x46\xD9\x0C\x92\x9D\xCF\xC7\x33\xCD\xCE\x6C\xCC\x8D\xCF\x9B\xD5\xC7\x89\x2B\xE6\x23\xA2\x5A\xBB\xC8\x09\xDD\xC5\x23\x29\xFE\xB5\x0F\x83\xC4\xCC\xA5\xCA\xC5\x6C\x26\xE9\xCA\x04\x6B\xD0\xCA\x80\xC1\x7B\xD2\x32\x31\xCA\x3B\x9F\xD9\xCA\xA8\xE6\x68\xCE\x3D\xFC\xCE\xCF\x80\xDB\x71\x85\xC8\x6A\xB0\x81\x0A\xB4\x8A\xAF\x75\x13\x4A\x4A\xD1\xB3\xE3\x32\xB1\x6D\x74\xD6\xB6\x66\xE6\x6C\xB3\xD6\x3D\xB0\xB4\xC0\xA5\xA2\x39\xB0\xB8\x68\xD9\x95\xB0\xD4\x97\xAC\x29\x66\xB8\xB2\x04\xDD\xA4\x0C\xB7\xA7\xCB\x7D\xB6\xA8\x66\x9D\x61\xF2\x65\xD8\x01\x27\xD8\x63\xB2\x0F\x03\x95\x35\xDD\xD9\x98\x28\xB5\xDA\x7C\x6B\xB5\xE5\xAD\xB2\x04\x2A\xD0\x66\x60\x32\x0B\xD0\x8B\x32\x01\xC8\xB8\x0B\x25\xC2\x91\xD2\x07\x32\xF9\x0A\x06\x96\xCF\xD5\x0B\x6C\xC5\xD2\x29\xF8\x38\xCE\x9D\xD2\xCE\x49\x3A\xD6\xCF\x8C\xB5\x0A\x0C\xE2\x20\x73\xB5\xD3\x72\xCC\x9D\x0D\xE3\xD5\x06\xF1\xE2\x93\xAB\x04\xE2\x56",
"\xEE\xCF\xE2\x9C\xDD\x7E\xA7\x96\x2C\xE3\xF2\x55\x0E\x0D\xD3\x22\xD2\x79\x83\xE5\xD0\x1E\xC7\xD0\x21\x2B\xCF\xE1\xC1\x8F\xE3\x96\x52\x2B\x26\xE8\x0C\xEE\xE0\xC4\xAD\xD8\xCD\x95\xED\xE6\xCC\x16\xF4\xCA\xAD\x99\xE8\xD6\x8B\x20\xDF\x7B\xBB\xC2\x07\xCD\xB9\xE3\x7B\x54\xC6\xE2\xE9\x2A\xE6\x6F\xC4\xB2\xD0\xEB\x97\xD2\xEF\xD6\x6C\xB5\xE6\xC7\xA0\xE1\x2F\x30\x23\xE5\x0F\x01\xFB\xC7\x91\xC3\xE0\xC9\x18\x10\xD5\x20\x77\xE3\xCF\x91\x8E\xE1\x06\x95\xD6\x91\xD3\x51\xC6\xEC\xC6\xB2\xEA\xE2\x9A\xF4\xC9\xEB\xA4\xDF\xCB\xDB\xDE\xE2\xD2\xBE\xFE\xEA\xCD\x4F\xF9\x0C\x0C\x34\xD0\xE7\xA9\xC4\xF5\xEA\x79\x0A\xEC\xAF\xF9\xCB\xCF\x3E\xFF\xCF\x09\x81\xD3\x79\xDC\x89\xD7\xC8\x17\xC2\x20\xC6\x3F\xCA\xBA\x4A\xAC\xA4\xC6\x80\x36\xC2\xEF\x8D\xF9\xC4\xD0\x82\xE6\x24\x82\xE5\x3A\xEE\x44\xF1\x04\xD2\x85\x2B\xF6\xD8\xE7\xE4\xEC\x0F\xEF\xF2\x08\x2C\xE0\xF9\xBE\xD1\xEB\xF0\x20\x13\xE5\xE6\x87\xFD\xE2\xB3\x5B\xEA\x32\x01\xBB\xE5\xED\xE0\xEC\xE9\x26\xD6\x93\xEC\x3A\x26\xFA\xE0\xB1\xE9\xF9\xC2\xCB\xFC\xA2\x75\xD6\x8F\xC7\xA1\xEE\xED\x53\xE3\xF6\xE4\xA6\xE1\x20\xEA\xB5\xFA\xF4\xE6\xA4\x0D\xF5\x00\x0F\xF6\xC9\x83\xB0\x09\x60\x40\x26\x55\x3A\x39\xAC\xFC\x9D\x39\xFF\xE5\xAF\x76\xA5\x02\x1E\x52\xB0\x79\x57\x3D\x76\x70\x3F\x78\x22\xB4\x73\x77\xB7\x74\x7A\x92\x6A\x35\x77\x72\x10\x79\x79\x7D\x8E\x75\x7D\xAF\x6B\x66\x22\x61\x78\xB5\x68\x76\x73\x60\x7E\x59\x7D\x6B\x9D\x70\x6C\xA0\x71\x7D\xB0\x73\x69\xC5\x71\x76\x2E\x47\x81\xB3\x67\x7C\xDC\x7A\x7C\x9A\x75\x6E\x5F\x15\x6A\x60\x62\x7A\x88\x66\x72\x43\x77\x70\x32\x0B\x7B\x02\x1D\x7B\xF3\x78\x72\xC1\x74\x81\x4E\x63\x71\x28\x85\x76\x19\x84\x75\x3A\x1D\x82\x53\x03\x7E\x6D\x7B\x78\xD2\x7F\x75\x3C\x8B\x74\x20\x0E\x6A\x4E\x71\x84\x92\x64\x79\x67\x74\x84\x1B\x81\x6A\xCD\x7A\x75\x38\x70\x7D\xD3\x3E\x6E\xC7\x10\x6F\x00\x12\x6F\x32\x31\x64\xF7\x65\x10\x65\x86\x5A\x79\x0A\x6F\xA1\x5D\x6F\x18\x36\x49\xAE\x56\x7F\x00\x08\x7F\x6C\x84\x07\x01\x25\x10\x75\x8D\x7F\x18\x3D\x7E\x7B\x59\x7E\x00\x1E\x62\x37\x66\x12\x04\x84\x58\x0B\x84\x45\x6E\x58\x6C\x79\x50\x34\x72\x04\x07\xCE\x51\x10\xF9\x22\x32\xD1\x5E\x6C\x5E\x88\x19\x7C\x80\x00\x30\x6C\x58\x88\x84\x07\xC4\x1C\x11\x22\x38\x86\x3E\x07\x7E\x03\x76\x5C\x03\x43\x70\xED\x77\x89\xFB\x71\x10\x8E\x8E\x7B\x9D\x83\x83\x03\x79\x89\x09\x84\x74\x97\x80\x86\x00\x0A\x58\x9B\x83\x7F\x70\x82\x87\x80\x8B\x5C\x86\x15\x10\xB9\x88\x87\x28\x5B\x5C\x97\x83\x89\x2E\x67\x8A\xBC\x8E\x03\xB5\x8D\x8A\x79\x5F\x00\x2B\x18\x8C\xB8\x79\x57\x3F\x3B\x31\x89\x8B\x88\x00\x1D\x88\x46\x33\x8C\xA0\x84\x5C\xB6\x37\x52\x74\x55\x10\xD9\x82\x53\xA4\x33\x8A\xCE\x84\x07\x00\x81\x10\x2E\x52\x8C\x45\x55\x41\xD5\x85\x57\xB9\x44\x34\x05\x1A\x8E\xDC\x8D\x40\x97\x81\x45\x02\x11\x45\xB3\x85\x8E\xAD\x39\x8A\xB3\x78\x7B\x30\x07\x8E\x0C\x8C\x5D\x87\x8F\x8D\xA5\x85\x34\x7F\x8C\x62\xF6\x88\x80\xF8\x8C\x8A\xF8\x8D\x8C\x1C\x30\x8B\xB2\x83\x8D\xE2\x5E\x89\x3C\x6A\x8F\xD9\x7E\x8D\x1C\x3F\x8F\x00\x02\x8C\x84\x6E\x90\x47\x66\x90\x0C\x80\x64\xAF\x8B\x12\x0B\x93\x82\x4C\x38\x10\xAF\x4A\x6D\x77\x50\x8F\x01\x19\x4E\x84\x47\x57\x40\x5F\x4E\x05\x1C\x92\x68\x8C\x48\x2C\x3E\x48\x08\x53\x46\x64\x53\x49\x8E\x3D\x50\x97\x41\x5A\xF4\x8C\x49\xE0\x7B\x50\x75\x11\x42\xFE\x44\x4A\x78\x44\x55\x3A\x7F\x92\x06\x55\x36\xEB\x69\x07\xB9\x49\x65\x3E\x9C\x55\x23\x4E\x55\x00\x54\x72\x10\x9B\x93\xA5\x3D\x34\xE8\x8F\x53\x34\x02\x54\x00\x14\x54\x21\x57\x52\x47\x51\x49\x4A\x5F\x54\x59\x62\x43\x50\x51\x94\x25\x43\x55\x29\x4B\x3E\x2C\x48\x69\xB4\x5E\x54\x4E\x93\x4A\xE6\x31\x95\x56\x56\x4D\x3D\x43\x56\x40\x40\x02\xDB\x47\x3F\xDD\x4C\x54\xDF\x4A\x56\x98\x1C\x56\x9D\x22\x92\x56\x9B\x58\x29\x90\x4A\x64\x0A\x91\xE1\x46\x12\x0F\x2D\x2D\x32\x13\x88\x48\x38\x98\x49\x42\x18\x02\x21\x02\xD0\x2F\x0F\x18\x9F\x70\xD2\x28\x14\x3A\x12\x20\x23\x05\x99\xC5\x8B\x8C\xCB\x59\x99\xAD\x82\x20\x25\x05\x99\x53\x9D\x95\x33\x50\x99\x6B\x52\x99\x2B\x17\x02\x95\x97\x99\x30\x02\x9A\xB8\x72\x20\x29\x0F\x9A\xAA\x8C\x63\xB2\x9C\x80\x02\x2B\x02\x95\x9F\x01\xF3\x2C\x2A\xEB\x2F\x0F\x02\x2B\x2E\x8B\x95\x9C\xC6\x90\x21\xC1\x91\x61\xBF\x97\x9C\x7C\x20\x2A\x2B\x14\x9C\xC6\x95\x88\x81\x56\x98\xD0\x94\x25\x0B\x84\x96\x02\x27\x9A\x3A\x54\x3A\xFF\x01\x9C\x81\x95\x10\x70\x2C\x9C\xEB\x22\x2D\xD5\x9B\x98\xD2\x95\x98\x51\x3C\x20",
"\xC1\x93\x89\x7B\x2C\x9C\xC6\x9D\x9D\x04\x23\x7A\xEE\x96\x2E\xCF\x96\x9C\xD0\x80\x00\xF9\x2D\x94\x74\x32\x20\xE7\x95\x4E\x77\x52\x20\xF0\x9C\x20\xCA\x89\x14\xF3\x95\x9C\x01\xAA\x2F\xEB\x20\x87\xC7\x9D\x9E\xC6\x9A\x9A\x7F\x9C\x9A\x08\x1A\x9D\xB0\x47\x52\xE1\x92\x20\xC0\x81\x10\x64\x9B\x3C\x9F\x90\x00\x1A\x59\x47\x12\xA7\x8D\x33\x5F\x0F\x7B\x22\xA2\x0B\x82\x10\x70\x87\xA0\xCC\x2B\x12\x19\x04\x20\x09\xA5\x19\x08\xAE\xA2\x02\x1E\x01\x2C\xAB\x1A\x08\x12\xA3\xEA\x9B\x12\xDF\x92\x10\x1D\x03\xA3\x89\x5B\x12\x3B\xA7\xA3\x1F\x22\x48\x40\xA4\xA0\xE8\x4C\xA3\xBC\x1C\x23\xF5\x9D\x2E\xCE\x95\xA0\x7D\x16\x1A\xB7\x1F\xA0\x8A\x9E\x39\x52\xA7\x95\x14\xA6\x9C\x17\xAD\x1C\x4B\x55\x96\xD3\x1B\xA1\x1D\xA4\x55\x1F\xAE\x53\x27\x51\x61\xD2\x27\x9C\x5F\xAA\x94\x11\x5B\x9C\x4C\xA9\x40\x83\x92\x5A\x77\x55\xA1\x85\x1F\xA6\x87\x14\x49\x40\x9B\xA5\x90\x26\x1E\x68\x94\x06\xFD\x91\x5C\x77\x54\xA2\xD6\x98\x10\x27\xAB\x2E\xEB\x20\x02\x46\xA6\xA2\x30\xA1\x10\x28\xAC\x88\x2B\x16\xA3\x2F\xAD\xA3\x08\x1F\xA3\x8B\xA6\x1B\x35\xA3\xA8\x01\x19\xA3\x01\x1E\xA8\xC8\x9B\x12\xE1\x96\x92\x71\x23\x9E\x42\xAF\xA8\xD7\x18\xA4\xBA\x29\xA4\x44\xAC\xA4\x0E\xA9\x1A\x10\xA2\x40\x53\xA4\x98\xDB\x9D\x3A\x6E\xA8\x10\x57\xA0\x00\x19\xA4\x43\x5C\xA7\xA7\x65\xA9\x4B\x11\x65\x9E\x0F\x25\xAB\x67\xA9\xA6\x03\x29\xA7\x24\x96\x98\xAD\xAA\x8B\x70\xA0\x00\xFA\x9D\x4F\xD3\x1B\x9C\x84\x27\x43\xBE\xAC\x6E\xFF\x9F\x20\x87\xA1\x27\xC6\x54\xA9\xF4\x93\xA4\x02\x11\x61\xB0\x83\x9C\x98\xA6\xA5\xCB\x18\xA1\x59\xAA\xA1\x75\xA6\x13\xB4\xA9\xAA\xED\x8F\x15\xC0\x92\xA9\xF7\x7C\xAB\x0C\xA5\x9C\xA5\xA9\x1B\x16\x19\x9D\xE2\xA4\x95\xC1\xA7\x7A\xDB\xA8\xA5\x4F\x5B\x3C\xC8\xA1\x10\x37\x4A\xAB\x27\x5C\xA7\xFA\x2B\x27\xAB\x2F\xA7\x4B\xA2\x45\xE6\xA0\x00\xAB\x21\x8E\x9B\xA4\xA3\x05\x1A\xA8\x97\xAE\xA7\x85\xA7\xB0\x08\x12\xAD\x00\x06\xA9\x86\xAB\x2E\xB0\x82\xB1\x0E\xB5\x10\x81\xA3\xB0\xC4\x1A\xB0\x13\xB9\xAD\x45\xA1\xAA\x4A\xA1\xB2\xA4\xAE\xA2\x89\x9D\xAE\xA9\xA9\x4A\xD6\x80\xA6\x33\x51\xAF\xEA\x73\xAF\xB0\xAD\xAD\x34\x47\xAF\x00\x19\xAF\xEF\xA8\x9A\xA4\x32\xA6\xBC\xAA\xAF\x33\x58\xA6\xBC\xAB\xAC\x76\x50\xAC\xC6\x99\x8B\x02\x19\x8B\xC5\xA7\x51\x92\x13\xAB\xA5\x44\x55\x3E\xB0\x93\xFC\xAF\xA9\x0C\xB4\xAD\x66\x2F\xB1\x9E\xA4\x27\x9D\xAB\xB0\x47\xA8\x10\x06\xB5\xAE\x20\xB5\x10\x1B\x03\xB0\x70\x89\x2E\xEB\x2B\xB1\x03\xB7\x9F\x1C\xB7\xB1\x02\x10\xB1\x16\xBA\xB5\x05\x15\xB1\xA2\xA9\xA2\x22\xB5\xA0\xEB\xA8\x1C\x26\xB1\xA1\x35\xBB\xAA\x5F\x1C\xB2\x7D\x8E\xB2\xB1\xA2\x4A\x32\xB0\x00\x34\xB4\xB7\x54\xA3\x53\xB7\xA9\xB3\x75\xB3\xA1\x3B\xBC\xAB\xFC\x9B\xA6\xD3\x91\x35\x78\xB0\x00\x42\xB1\x10\x44\xB6\x51\x5A\xA2\x19\x7D\xBA\xAC\x8A\xB8\x9E\x13\x3B\x98\xCF\xAC\x2A\xD1\xAD\xB6\x1D\xB7\x8F\x6B\xB6\x9C\xEB\x2D\xB8\xAF\xAB\xB7\xC7\xAB\x12\xC9\xA8\x3E\x3A\xB4\x3A\x50\xB1\x27\xCA\x98\xAE\x01\xBD\x1D\x3D\xB7\xB9\xFE\x94\x9D\xC6\x9A\x5F\xD8\x97\xB2\x1F\x59\xB2\x66\xAB\xAF\xDE\x9E\xB1\x4C\xAC\xA9\x6F\xB3\x9F\x4B\xB0\x48\x88\xBB\xB9\xFF\x03\xA0\xB2\xB8\xB8\x9A\xB9\x9C\x1E\x9C\xAB\x80\xA6\x9F\x08\xB9\x97\x67\x5B\x9F\xBA\xB8\x53\xBC\xB9\x4B\x0B\x28\xBC\xEB\x20\x7F\xC7\xB1\x9C\x7B\x24\x1C\xD8\xA2\xB5\x02\x1B\x27\x11\x6A\xA9\xCC\x95\xBC\xE6\x4C\xB3\x69\xA1\x89\x68\x1C\xBC\x03\xBB\xB9\x0A\xA2\xBA\xBC\xA1\xB7\x9B\x97\xBD\xC7\x59\xBD\x11\x5D\xB4\x86\xAE\xAF\xF4\xB3\xBC\x00\x1D\xB8\x02\x26\xBF\xA7\xA8\xB2\x80\xBA\xAA\x86\xB7\xB3\xB1\xB3\x9F\xAB\xBD\x3A\xEC\xBC\xA4\xEA\xBD\xA6\x41\xB3\xAC\x45\xB3\xB9\x6E\x08\xB4\x43\x9B\x32\x11\xC6\x98\xFC\xB4\x21\xFF\xB8\xB1\xC0\xB0\xB7\x24\xB1\x99\x51\xA7\xC0\x06\xC8\xC0\x20\xAA\xC0\x5B\xB5\xA0\x0D\xCF\x15\x0F\xC5\xA0\x1B\xCC\xB8\x13\xC8\x10\x91\xB2\xA7\xC6\xA4\xB9\xA8\xB8\xAF\xE8\x31\xC3\x99\xB0\xBF\x53\xB6\xB6\x88\xAE\xC3\xFD\xB4\x20\x7B\x23\x89\xE3\xB5\x10\x2A\x07\x2A\x04\x98\xC4\xBC\xAE\xBE\x16\x1F\xC2\xF3\x90\x9B\x1D\xC0\x00\xCA\xBB\x20\xEB\x26\x5C\xE6\xB8\xBF\xC7\x9E\xC4\x79\x08\xAB\x54\xB2\xB2\xB6\x52\x20\xB0\x92\xC4\x56\xB5\xC6\x01\x15\x87\x42\xC3\xC5\x53\xCC\x47\x11\x6B\xB9\xEB\x2B\xA2\xAD\xB1\x87\x0D\xBA\xB6\x40\x19\xA8\x63\xB6\xC7\x71\xC8\xB6\x03\xBC\xB6\x2B\xC1\x10\x2C\x0A\xC4\xD5\xAB\x12\x7F\xC9\xA6\xB0\x90\xC5\xEE\x97\x99\x31\x03\xC5\x8F\xB7\x5F\x03\xBB\x2E\x5D\xB1\xC7\x5F\xB7\xC7\x91\xA1\xC7\x62",
"\xB9\xC7\x3E\xAB\xC7\x97\xCD\xC7\x00\x19\xB6\x59\xCD\xA8\xBC\xA0\x9B\x5E\xCC\xC8\xA0\xB5\x6B\x62\xC7\x9B\x47\x68\xBC\xCB\x96\x5C\xCB\x9B\xB9\x99\xA3\xB0\x05\xB3\xB0\xD2\x28\xBE\x02\x2B\x27\x10\xB9\xC4\x84\xC6\xCA\x92\x71\xCA\x12\x68\x68\x20\x64\xAE\x88\x61\xC8\xF8\x86\xA0\xC1\x9B\x2E\x68\xC3\x9F\xBA\xC3\xC0\x2E\xA7\x62\xF7\xB0\xBA\xC0\xCB\x8F\x6A\xCB\x27\x6C\xCD\xC8\x2B\x1F\xC8\x3F\xC2\xC7\x4E\xA1\xC7\x64\xBA\xB1\x78\xC5\xCD\x7A\xC1\xC7\x7C\xC0\xC2\x08\x13\xC8\x05\x16\xC8\x03\x2A\x91\xCA\xC5\xC0\xD5\x58\xCB\x30\x01\x61\xE2\xC5\xA0\x85\xC4\xC6\xA2\xCB\xC4\xD9\x7A\xC8\xBF\xCF\xB9\xE0\xC5\x10\x82\xA4\xC9\xDB\xC6\xC6\xD1\x8B\xCF\xF6\xC4\xA8\xD7\xCC\xCD\x99\xC5\xCD\xDF\xCE\xB6\x05\x19\xB6\xE4\xC8\xCC\x01\xD7\xCE\x25\xCB\xC4\xCD\xC7\x5D\x11\x69\xB6\xC7\x90\xCA\xC6\x93\x7A\xA4\xC5\xCF\xF1\xC3\xCF\xC1\x99\xCA\x39\xC1\xC7\xAD\xC1\xC7\xB1\xCE\xCA\xA0\xAB\x98\x09\xD3\xC7\x41\x1D\x10\x55\x18\x62\x73\xBE\xD0\xE9\xC8\x8F\xB5\xCF\xC9\xEA\xCA\xCB\xA3\x7D\xCB\x88\x4D\xCC\x0F\xDB\x5D\xCC\x98\xBC\x1F\xDC\xA4\x7B\x22\x2D\xC6\x53\xD1\xEA\xCD\xB8\x14\x92\x6D\x34\x4A\x5F\xE6\x68\x6E\x5C\xC8\xBC\x21\xD9\xA6\x3D\xDA\xC5\x15\xD1\xD4\xC6\x93\xD4\xE2\x67\x5B\xA2\x43\x7A\xD5\x6E\x59\x5C\xC0\xC4\x71\x2F\xCA\x69\xA2\xBC\xA8\xA7\xCB\xA0\xB7\x5D\xF0\xBC\xBD\x2A\xA0\xCF\xAC\x23\xA2\x7B\x2A\x8E\x35\x22\xCD\x08\x19\xCF\xD5\xC1\xC9\xFA\xC3\xC9\xD5\xC9\xCD\x9A\xC0\x00\x24\x00\xC8\x2D\xD5\x10\x77\xD0\xD6\xF2\xCF\x63\x25\xD5\x9C\x97\x92\x03\x53\xCD\x57\x6B\xD1\xC7\x8E\xCE\xB5\x73\xCB\xB9\x95\xC3\xD7\xFE\xC3\xAD\x09\xB8\xD7\xF1\xC1\xA3\x30\xD1\xD6\x3F\x62\xD3\x88\x67\xD1\xCC\xC9\xD7\x26\x78\xCA\x38\x30\xD9\x74\xC1\x6F\x03\xDC\xCF\x00\x0D\xCD\x8B\x94\xCB\x82\xC3\xD9\x7D\xDC\x63\xBA\xC9\x9B\x50\x85\xCA\x94\xDC\x63\xC2\xC3\xB0\x70\xC4\xC6\xCF\xC3\x34\x21\xCF\xCF\xD9\x2B\x12\x6E\xD2\xDA\x70\xD5\xCD\x8B\xD2\xDA\x74\xD7\xCF\x02\x1B\xD7\x2E\x28\xD1\x76\xD8\xDA\x37\xDC\x63\x7F\xDB\x98\x81\xD3\xD8\xB7\xDA\xD5\x00\x07\xD8\x90\xC9\xD8\x61\xBD\xD8\x9F\xDD\xCF\x72\xD6\xD0\x92\xD8\x10\x9D\xCF\xD8\x7C\xD9\xDC\x47\x66\xD9\xA3\xC5\x79\xAE\xD9\xDA\x06\x7C\xD9\x08\x13\x52\xE5\xB3\xB0\xA4\xD2\xDA\x05\xDB\x20\xA6\xD1\xCE\xC8\xDA\xD9\x95\xD6\x9C\xAC\xDD\x74\xE5\xD0\xDE\x92\x63\x9F\xC8\xBF\xBA\x69\xAB\x9C\x4B\xDC\xA4\x5C\xC4\x9E\xB3\xB2\x98\x75\x50\x93\xBA\xC8\xBB\x59\xAE\xAE\x07\xC3\xAE\x60\x1F\xBB\x41\xAC\xD4\x0B\xC0\x10\xB2\xC7\xBB\x8E\x92\x33\x04\xE9\xA6\x3C\xC8\x30\x71\xCF\x0F\xEC\x90\xBD\x13\xE0\x00\x15\xE5\x9C\x59\xD5\xCD\xFF\x0B\xD3\xEE\xC1\xE2\x59\xBB\xC5\x17\xE7\x1C\xD2\x26\x02\xBC\xAB\xA1\xBC\x82\x2D\xC4\xD9\xE2\xAF\xD6\x70\xD2\x2D\xCE\x51\xC8\xCB\x31\x02\x2D\xB6\xCC\xA4\xB0\x92\xD4\x2B\x1D\x19\x44\xD2\x4A\x46\xDB\x5B\xD6\x64\x07\x49\xD1\x9C\x01\xE6\xE3\xA3\xA1\x80\x4D\xCD\xE2\x98\x1F\xE2\x31\xEF\xAD\x0C\x89\x57\x34\xE3\xDF\x19\xD3\x70\x39\xEA\xE5\xBB\xC8\x7B\x3D\xEB\x12\x3F\xEE\xE4\xFA\xD0\x03\x42\xEC\x19\x01\x15\xE4\xD3\x16\xD5\x48\xD2\xE5\xEF\xB7\xDD\xAC\x2C\xD5\x4C\xA9\x9B\x50\xED\xBE\x6E\xE7\x14\x2B\x10\xE3\x69\xA2\xE3\x73\x89\xE5\xDF\xD4\xDF\xB5\x7D\xE5\x7F\xEB\xE5\xB8\x92\xE6\x5E\xE1\x74\x30\x03\x20\x64\xD8\x10\xD4\xC9\xC6\xE0\xBB\x30\x9E\xDE\xC6\xBA\xD8\xD8\x01\xDA\xDD\x01\x1A\xE7\xC5\xD9\xD9\x00\x18\xE9\x64\xE0\xE8\x06\x7B\xDC\x0F\x2C\xE7\xB7\x88\x31\xE8\xDA\x8D\x91\xE5\xDD\xD9\xD8\xDB\xD8\xDE\xDD\xA5\xD8\xA3\x2B\x15\xE3\x3B\xE7\xE3\x0F\x7B\xDA\x01\xBD\xDA\xC6\xD1\x74\x32\x01\xDB\x71\xCD\xE8\x3E\xC8\xBC\x7B\x2C\x30\x99\xE5\xCD\x19\xB3\xDD\x95\xE9\xDB\x08\x1C\xE9\x5F\x26\xDC\xC8\xE7\xC8\xB8\xC2\x03\xA0\xEB\x20\xA2\xE6\x11\x79\x55\xEA\x02\x19\x8D\xEB\xD1\xD7\xAC\xE0\xDC\xD6\xD3\xCB\xAE\xE8\x10\xB0\xEC\xEC\xB2\xE2\x03\xB4\xE2\xB2\xB6\xEA\xE9\x5F\xEC\x80\xB9\xEC\xDF\x10\xE7\xD0\xB0\xB6\xE7\x7D\xAC\xA1\xDE\x79\xDF\x9E\xE2\x69\x8D\xB9\x28\x01\x1D\x1E\x1B\xA9\x78\xA6\x68\xC8\xD0\xDF\x0F\xEF\xDE\x9E\xE9\xAB\x98\xFA\x5A\x7C\xF2\xE4\xE8\x47\x65\xEF\x4A\xCD\x1E\x14\x9E\x81\xBF\x6F\x79\x72\x0C\xEF\x66\xDA\xEA\xAC\x2F\xDB\xF3\x91\xF0\x0F\x23\xF0\xF1\xE7\xEB\xAD\x82\x03\x08\xFC\xDD\xF7\xE0\x07\xB9\x9F\x7C\x6E\x0D\xDC\xC1\x91\xDC\x05\xA6\xF1\x0B\x28\xF1\x98\x75\xF0\xE7\xE6\x72\x1D\xF1\xEC\xF8\xE6\xE5\x47\x8C\x76\x22\x74\x07\x81\xDC\xA4\x8B\xE8\xCF\x66\xDE\xEB\xF6\x6F\xC1\x75\xE1",
"\xEC\x36\xD2\x8E\x55\xEF\xB4\x57\xEB\x5C\xCF\xE7\x20\x25\xE7\x9C\x3A\xD5\xB5\xF3\x90\xE0\xA1\xD1\xEB\xE6\xD2\x69\x3E\xE7\xE8\xAD\x86\xE6\x51\xD3\xE4\x69\xE3\xD5\xCB\x37\xE4\xE7\x69\xE4\x4B\xE4\x20\x4D\xED\xF4\x21\xE2\xD1\x4F\xD2\xEB\x61\xE8\x10\x63\xE0\xF5\x65\xE7\xE6\x05\x14\xE4\x5A\xF4\x43\x6C\xEE\xF5\x77\xE9\x07\xFD\xE2\xE7\x27\xF3\xF6\x54\xF0\xE6\x53\xF3\xE8\x2D\xF8\xD3\xDB\xB1\x9C\x28\xE3\x9F\xE1\x92\x2D\x65\xBC\x9C\x81\xD2\xE8\x40\xEC\xE3\x7B\xF9\xF8\xB2\xE6\xF5\xC5\x92\xD5\xA0\x1B\xF5\x0B\x87\xD4\x72\xFF\xEE\x54\x4A\xD4\x4C\xFE\x9E\x83\xFB\xED\x65\xF1\xF5\x32\x08\xF8\x9D\xE6\xF0\x52\xF6\xE8\x7C\xF8\xE8\x6C\xF2\x10\x6E\xF1\xF9\x70\xF8\x68\x57\xDD\x5B\x25\xE8\xBC\x76\xF2\xF6\x00\xC0\x00\x85\xF0\xD4\xE1\xE0\xFA\x6A\xF3\xEF\x67\xFC\xC4\xA5\xF5\xF5\x39\xD1\x9C\xBD\xD1\xF1\x05\xA8\xBC\x02\x22\x02\xC2\xFE\x9E\x4B\xF4\xBE\xC6\xCF\xDC\x03\x20\xF9\xE3\x66\xE4\x93\xF8\xE4\x58\xD3\xF7\x98\xFA\xFC\xEE\x93\xBA\x57\xF8\xE6\x00\x1A\xE6\x92\x11\xF7\xD3\xF6\xF9\x48\x35\xF7\x23\xD7\xFC\xFD\xE2\x20\xDF\xE4\xFE\x07\x29\xFC\x02\xB9\xA6\x9B\xFE\xED\x79\xF8\xEE\xB8\xF0\xEE\x51\xFB\xFB\x02\x19\xF6\xF2\xFB\xF6\xD9\xFD\xF6\x59\xFA\xFA\xD0\xFF\xEE\x94\xFF\xFD\x57\x58\x85\x70\x08\x26\x79\xF9\x4C\x4D\xFB\x7A\x6B\xEF\x7E\xE4\x31\x7E\xC3\x7A\xF8\x24\x7C\xE3\x71\x7A\x8E\x7B\x31\x4E\x7E\xAA\x6B\xE6\x2C\x7D\x9B\x60\x7F\x32\x1A\xFC\x58\x5A\x5E\x5E\xF4\x6E\x7D\xEF\x78\x3D\x9F\x7F\xB4\x5F\x81\x8D\x4B\xF8\x21\x7D\xDF\x62\x30\x00\x51\x38\x42\x11\x65\x78\xFE\x0A\x74\xE0\x65\x80\xC7\x4C\xCE\x57\x75\xA1\x7F\x2A\x46\x45\x68\x4F\x75\x09\x84\xCB\x62\x81\x07\x8A\xDF\x74\x7D\x40\x16\x7F\x0C\x85\xF1\x67\x7D\x1A\x3B\xFF\x4F\x7F\x74\x1C\x7A\x17\x81\x00\x97\x7C\x02\x86\xFD\x4C\x4E\x0C\x9B\x74\x34\x80\xA0\x45\x7A\x8C\x1E\xE7\x3C\x83\xBC\x61\x81\xF2\x6B\x04\x99\x3F\x12\x89\xFB\x22\x7D\x04\x8F\x10\x13\x83\x79\x1E\x7E\xD7\x73\xF7\x1A\x83\x4B\x3C\x55\x07\x82\x20\x2C\x81\xE3\x41\xED\x79\x00\x96\x78\x81\x5A\x82\x07\x99\x82\x2B\x82\xFA\x3E\x80\x40\x00\x82\xB6\x78\x02\xA9\x80\x02\x12\x20\x28\x01\x0B\x8A\x7A\xCE\x5B\x50\x20\x71\xBA\x62\x20\x0A\x73\x53\x2C\x70\x5F\x6A\x00\xBD\x5D\x10\x5B\xEE\x05\x6F\x1F\x84\x7E\x0E\x87\x0F\xA9\x7F\x17\x8D\x04\x8B\x51\x88\x78\x83\x9D\x78\xFF\x4F\x7C\xAC\x7B\xFD\x6F\x79\xFF\x61\x80\xFF\x7C\x0C\x98\x81\xE3\x05\xFD\x6B\x7C\x4F\x77\x84\x39\x82\xC0\x03\x82\xD7\x35\x04\x94\x81\xF7\x76\x80\x95\x7A\x09\xA1\x7E\x38\x7F\x0F\x31\x7F\xF5\x68\x85\x71\x80\x05\xB1\x5E\x01\x1A\xE3\x12\x85\xFC\x41\x7C\xEE\x4D\x03\x85\x09\x5E\x81\x04\xF3\x7C\x17\x97\x7F\xF3\x77\x0B\x8B\x11\x30\x85\xD4\x51\x7D\xD7\x60\x80\x4E\x5A\x11\xA5\x85\x78\x4C\x01\xA1\x70\x31\x99\x83\x3D\x87\x18\x85\x86\x4D\x82\x01\x9C\x86\x67\x1E\x84\x15\x80\x74\x6D\x7C\x25\x75\x06\xB4\x86\x2D\x8C\x4E\x4D\x6B\x0E\xA6\x81\xA0\x36\x07\x80\x00\x26\x80\x6C\xEA\x66\x17\x80\x08",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void GuiIqPrimaryQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqCascadeQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqSetQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::presentation;

#define PARSING_TOKEN_FIELD(NAME)\
			CLASS_MEMBER_EXTERNALMETHOD_INVOKETEMPLATE(get_##NAME, NO_PARAMETER, vl::WString(ClassType::*)(), [](ClassType* node) { return node->NAME.value; }, L"*")\
			CLASS_MEMBER_EXTERNALMETHOD_INVOKETEMPLATE(set_##NAME, { L"value" }, void(ClassType::*)(const vl::WString&), [](ClassType* node, const vl::WString& value) { node->NAME.value = value; }, L"*")\
			CLASS_MEMBER_PROPERTY_REFERENCETEMPLATE(NAME, get_##NAME, set_##NAME, L"$This->$Name.value")\

			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery, presentation::GuiIqQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqNameOption, presentation::GuiIqNameOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqChildOption, presentation::GuiIqChildOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqPrimaryQuery, presentation::GuiIqPrimaryQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqCascadeQuery, presentation::GuiIqCascadeQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqBinaryOperator, presentation::GuiIqBinaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqSetQuery, presentation::GuiIqSetQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery::IVisitor, presentation::GuiIqQuery::IVisitor)

			BEGIN_CLASS_MEMBER(GuiIqQuery)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})
			END_CLASS_MEMBER(GuiIqQuery)

			BEGIN_ENUM_ITEM(GuiIqNameOption)
				ENUM_ITEM_NAMESPACE(GuiIqNameOption)
				ENUM_NAMESPACE_ITEM(Specified)
				ENUM_NAMESPACE_ITEM(Any)
			END_ENUM_ITEM(GuiIqNameOption)

			BEGIN_ENUM_ITEM(GuiIqChildOption)
				ENUM_ITEM_NAMESPACE(GuiIqChildOption)
				ENUM_NAMESPACE_ITEM(Direct)
				ENUM_NAMESPACE_ITEM(Indirect)
			END_ENUM_ITEM(GuiIqChildOption)

			BEGIN_CLASS_MEMBER(GuiIqPrimaryQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqPrimaryQuery>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(childOption)
				CLASS_MEMBER_FIELD(attributeNameOption)
				PARSING_TOKEN_FIELD(attributeName)
				CLASS_MEMBER_FIELD(typeNameOption)
				PARSING_TOKEN_FIELD(typeName)
				PARSING_TOKEN_FIELD(referenceName)
			END_CLASS_MEMBER(GuiIqPrimaryQuery)

			BEGIN_CLASS_MEMBER(GuiIqCascadeQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqCascadeQuery>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(child)
			END_CLASS_MEMBER(GuiIqCascadeQuery)

			BEGIN_ENUM_ITEM(GuiIqBinaryOperator)
				ENUM_ITEM_NAMESPACE(GuiIqBinaryOperator)
				ENUM_NAMESPACE_ITEM(ExclusiveOr)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Substract)
			END_ENUM_ITEM(GuiIqBinaryOperator)

			BEGIN_CLASS_MEMBER(GuiIqSetQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqSetQuery>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(GuiIqSetQuery)

			BEGIN_INTERFACE_MEMBER(GuiIqQuery::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqPrimaryQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqCascadeQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqSetQuery* node))
			END_INTERFACE_MEMBER(GuiIqQuery)

#undef PARSING_TOKEN_FIELD

			class GuiIqTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqNameOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqChildOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqPrimaryQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqCascadeQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqBinaryOperator)
					ADD_TYPE_INFO(vl::presentation::GuiIqSetQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool GuiIqLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new GuiIqTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
