/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::GuiInstanceQuery_Parser.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/

#include "../../../Import/Vlpp.h"
#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Query"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum NameOption"
L"\r\n" L"{"
L"\r\n" L"\tSpecified,"
L"\r\n" L"\tAny,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ChildOption"
L"\r\n" L"{"
L"\r\n" L"\tDirect,"
L"\r\n" L"\tIndirect,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PrimaryQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tChildOption\t\tchildOption;"
L"\r\n" L"\tNameOption\t\tattributeNameOption;"
L"\r\n" L"\ttoken\t\t\tattributeName;"
L"\r\n" L"\tNameOption\t\ttypeNameOption;"
L"\r\n" L"\ttoken\t\t\ttypeName;"
L"\r\n" L"\ttoken\t\t\treferenceName;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CascadeQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tparent;"
L"\r\n" L"\tQuery\t\t\tchild;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tExclusiveOr,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tSubstract,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tfirst;"
L"\r\n" L"\tQuery\t\t\tsecond;"
L"\r\n" L"\tBinaryOperator\top;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INDIRECT = \"////\";"
L"\r\n" L"token DIRECT = \"//\";"
L"\r\n" L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n" L"token WILDCARD = \"/*\";"
L"\r\n" L"token OPEN = \"/(\";"
L"\r\n" L"token CLOSE = \"/)\";"
L"\r\n" L"token XOR = \"/^\";"
L"\r\n" L"token INTERSECT = \"/*\";"
L"\r\n" L"token UNION = \"/+\";"
L"\r\n" L"token SUBSTRACT = \"-\";"
L"\r\n" L"token ATTRIBUTE = \"@\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryFragment"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n" L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n" L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n" L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimary"
L"\r\n" L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n" L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n" L"\t= \"(\" !QueryRoot \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query Query0"
L"\r\n" L"\t= !QPrimary"
L"\r\n" L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n" L""
L"\r\n" L"rule Query Query1"
L"\r\n" L"\t= !Query0"
L"\r\n" L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n" L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"\t"
L"\r\n" L"rule Query Query2"
L"\r\n" L"\t= !Query1"
L"\r\n" L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n" L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query QueryRoot"
L"\r\n" L"\t= !Query2"
L"\r\n" L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 5790; // 27819 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 670;
const vint parserBufferRows = 6;
const char* parserBuffer[] = {
"\x00\x00\x81\x81\x84\x02\x81\x80\x07\x82\x00\x87\x80\x83\x21\x33\x3B\x31\x30\x64\x65\x11\x35\x35\x32\x39\x3D\x7F\x18\x99\x98\x8A\x85\x84\x8C\x28\x39\x69\x6D\x21\x36\x83\x8D\x8B\x8A\x8D\x19\x85\x08\x80\x0A\x90\x81\x92\x8B\x28\x99\x88\x0B\x93\x98\x83\x29\x32\x74\x2F\xA7\x91\x9B\x03\x94\x8E\x81\x1C\x8C\x8E\x90\x82\x8C\x8A\x8B\x96\x05\xC8\xA3\x28\x39\x34\x34\x33\x98\x1B\xBE\x81\x82\xAF\x81\x8A\x9C\x03\x2B\xD8\x80\x90\x33\x95\x32\x36\x3A\x50\xFF\x7F\x86\x81\x87\x8D\x91\x91\x79\x3A\x8D\x0B\x9B\xB0\x81\x30\x3A\x74\x20\xA2\x35\x34\x3D\x32\x27\x30\x6D\x65\x21\xA3\xB9\x85\xB0\x90\x91\x24\xC6\xB9\x33\x0B\x94\xC2\xB6\xB8\x72\xF4\xB6\xB8\xB5\x37\x24\x38\x3A\x69\x6F\x2E\x3B\xB2\xA8\x82\xB2\xC0\x69\x82\xFD\x88\x8B\xC8\x03\xA5\xA6\x64\x0E\xD0\xD2\xC4\xC8\x86\x8F\xBF\x68\xEA\xAC\xA1\x82\x3D\x32\x33\x8A\x5E\xE3\x0B\xD9\xB5\xD5\x8E\xBF\xB3\x81\xA6\xB5\x85\x8B\xDC\x39\x3C\x38\xB3\xFA\x90\xBC\xB0\x07\xD0\xDD\xCC\x26\x8E\x2B\x8A\xE0\x86\xDC\xE1\xBB\x79\xA2\xD1\xD3\xC0\xAB\xDE\x81\xDD\x37\xB9\x82\xC8\xA2\x80\xA6\x33\x34\x72\x73\x20\xB5\xE4\x99\x81\xEC\x9D\x02\x2B\xA9\xE0\x8F\x30\x39\xB0\xEB\x01\xD8\xF8\x97\xA9\xA9\x83\x39\x32\x63\x12\xCF\xB0\xA1\x0B\x97\x17\x95\xFD\x6B\x42\x83\x4A\x61\x61\x53\x80\x81\x05\xB1\x47\x80\x42\x09\x8A\x8B\x82\x40\x0D\xA8\x40\x7C\x40\xBB\x49\x1E\x10\x11\x49\x12\x15\x13\x10\x54\x04\x48\x42\x87\x00\x2F\x02\x8B\x7F\x08\xB1\x4A\x55\x41\x27\x98\x8A\x84\x87\xEB\x45\x4D\x8A\x88\x01\x25\x88\x48\x88\x02\x60\x8E\x11\x10\x4D\x05\x15\x07\x4A\x3B\x80\x4B\x15\x18\x2D\x3A\x11\x11\x0B\x5A\x1F\x1D\x17\x8F\x41\x83\x9A\x14\x0C\x2D\x39\x0D\x16\x0A\x2D\x90\x84\x78\x42\xBB\x57\x19\x10\x13\x44\x03\x11\x12\x14\x44\x11\x91\x43\x8B\x2A\x03\x02\x8E\x46\x34\x83\x41\x43\x13\x50\x05\x1E\x12\x97\x00\x6F\x88\x09\x99\x00\x61\x5C\x75\x40\x48\x43\x1C\x13\x13\x53\x05\x1C\x98\x00\x2F\xA9\x03\x9D\x9C\x50\x62\x98\x42\xA0\x00\x18\x1F\x12\x14\x7B\xAF\x8E\x17\x89\x52\xB1\x49\x03\x4A\x8F\x80\x46\x84\x15\x45\x12\x19\x9C\x8B\xEA\x41\x4F\x0A\x0A\x07\x23\x99\x4B\x4A\x48\x55\x1E\x11\x12\x4F\x2B\x99\xA4\x40\x2F\x2B\x03\x84\x00\x61\x51\xA5\x42\xAB\x53\x15\x12\x13\x14\x54\x12\x11\x10\x87\x31\x88\x49\xAC\x00\x2D\x2E\xAD\xA0\x4A\xBE\x81\x4E\xA9\x10\x54\x35\xA9\x12\x10\x55\x14\xAB\xAE\x40\xBB\x80\x1A\x02\xA7\x18\x7F\x9C\x4B\x54\x4F\x37\x9E\x13\xB2\x01\x7B\xAA\x0D\x67\xBF\x9A\x44\xA2\x40\x84\x84\x1F\x10\x15\xD8\x80\x4B\xAE\x0B\xC4\x61\x55\xBB\xB4\x08\x48\x53\x14\x14\xB7\x85\x1F\xB5\x40\x84\xAF\x03\x1F\x0A\x6D\x45\x41\x58\x89\x28\xB5\x7E\x4A\x60\x30\x10\x0B\x4A\xC0\xFF\xA6\x40\x0E\x0B\x52\x2F\x1F\x18\x1D\x53\x34\x13\x48\x1D\xDC\x81\x4D\x64\x10\x20\x24\x0C\x0E\x4E\x30\x3E\x0C\xA1\x40\x27\x98\xC4\x70\x47\x18\xEE\x0D\xC3\xC3\xCF\x88\x45\xC8\x00\x14\xD7\xC0\xC2\x0F\xAB\xBB\x61\x17\x65\x68\x67\xC2\x43\xC9\x2F\xE8\x66\x46\x0B\x31\x15\x2B\x4A\xCE\x00\x57\xC0\xCE\x45\x3E\x3A\x00\x08\x0A\x20\x22\x02\x8A\x08\x14\xF7\x19\x18\x1D\x68\x20\x0B\x1C\x08\x9F\x4E\x52\x76\x64\x20\x3D\x05\xD1\x12\x6E\x24\x10\x78\x7E\x74\x22\x00\x09\x1F\x20\x29\x00\x09\x08\x35\xC7\x71\x10\x62\x69\x33\x55\x5C\x19\x0D\x0A\x0E\xCE\xCD\x79\x01\xD3\xD1\xD1\x2F\x08\xD0\x0A\xD2\x4C\xCE\xD0\xD4\x53\x52\xCF\x63\x75\xD5\x45\xC4\x1B\xD7\x18\x5D\xDF\xD1\xDB\xD8\x65\xD8\x67\xD9\x5C\x69\xCA\x64\x19\xCB\x01\x49\xE1\xCF\x4A\x34\xFF\xC9\x1E\x0B\x32\x1F\x0B\x4A\xE6\x3D\xD2\xE0\xD2\xD0\x22\x28\x06\xDC\xD9\x82\x49\xCB\xC1\xD1\x29\x22\x04\xC1\x41\xAB\xDE\xE9\x1E\x11\x72\x21\x17\x19\x5E\x5F\x52\x0B\x4A\xED\x2E\x56\xE0\xEE\xEC\xB4\xF4\x18\xCD\x2A\x2B\x40\xFD\xE6\xEE\xB1\xF3\xEE\x54\x1D\x72\xC4\xD4\xD3\x8D\x39\xA0\x02\xD2\x73\xC1\x77\xDB\xD1\xD3\x4F\xD0\xF0\x75\x63\x7E\xD4\xD6\xD6\x08\x53\x00\x73\x19\x1A\xDF\x65\x14\x1A\xD7\x60\xE2\xDC\x1F\xDC\x22\x2A\x0E\xD4\xDE\xD4\xE0\x06\xF4\x63\x53\xEE\x10\xE2\x08\x41\x2E\x19\x1C\xF9\x87\xE9\x04\xC7\x16\x45\xEE\x0E\xD4\xF3\x45\x0E\x78\x08\x2D\x3F\x35\xD6\x2E\x0A\x36\xD7\x60\x05\x17\x20\x0D\x20\x10\x16\x72\x27\xAB\x62\x21\xEB\x44\x7C\x77\xE3\x78\x75\x20\x17\x8E\x77\xEE\x46\x7F\x2A\xCC\x42\x7D\x20\x1F\x8F\x6F\x71\x1B\x8D\x77\xE4\x73\x68\x80\x02\x8F\x7D\x5E\x52\x79\x6F\xEA\x7F\x31\x38\xF1\x73\x7D\xF7\x78\x30\x7D\x34\x22\x78\x7F\xE6\x68\x7E\xFA\x2C\x8D\x7C\x15\x98\x7B\x34\xF2\x7B\x79\xFD\x77\x76\x70",
"\xB1\x7A\x78\x04\xFC\x62\x06\xFF\x20\x08\x84\xA1\x44\x80\x36\x07\x91\x7B\x02\x8D\x8F\x80\xC1\x17\x82\x20\x19\x96\x73\xE2\x09\x3B\x6C\x0A\x2B\x26\x8B\xB9\x70\x6F\x16\x8D\x7B\x6C\x9C\x74\x0B\x25\x67\x83\x7A\x18\xE8\x6A\x6C\xF1\x72\x68\x69\x76\x7C\x7D\x13\x8C\x8C\x8C\xC5\x09\x83\x81\x22\x1A\x06\xD7\x64\x64\x82\x0E\xB4\x0C\x87\x7A\x6F\x2C\xE3\x6D\x87\x7B\x18\x9B\x7B\x86\xDF\x61\x7F\xF8\x5F\x61\x83\x80\x13\x80\x6E\x24\x96\x83\xED\x11\x7D\x8F\xDE\x6E\x03\x06\x1F\x82\x21\x08\x9A\x85\x79\x12\x82\x6A\x79\x4C\x98\x45\x00\xCF\x7F\x85\x04\xAC\x7A\x6F\x3E\x86\x91\xD1\x08\x95\x87\x1B\x85\x88\x04\xE7\x64\x69\xFA\x6B\x73\x7A\x54\xA5\x90\x7E\xD9\x61\x89\xD1\x43\x88\x87\xC3\x49\x8E\x7F\x14\x73\x8F\x13\x86\x88\x80\xC6\x0A\x84\x81\x73\x0E\x80\xDC\x3A\x27\x8B\x80\x19\x8B\x8D\x83\x8E\x70\x18\x85\x23\x9A\xD7\x63\x8D\x8D\x64\x0E\x05\x0D\x43\x1B\x24\x6E\xAA\x8E\x6C\x75\x8B\x6F\x1B\xC0\x0E\x6A\x39\xA2\x92\x80\x82\x9C\x8A\x14\xC5\x6A\x8E\xC4\x55\x97\x78\x49\x75\x97\xD3\x69\x94\x8C\x18\xB9\x92\x86\xDE\x6D\x97\x22\xFD\x0D\x6C\x11\x8A\x71\x9C\x6E\x82\x68\x1F\x90\x9D\x92\x78\x80\x93\x9E\x00\xA5\x93\x3D\xC2\x86\x7E\xF2\x4D\x90\x20\x8F\x83\x85\x41\xDF\x28\x03\x95\x15\xA1\x8C\x12\xB5\x81\x07\xA6\x74\x0F\x22\x19\x6D\x47\x05\x20\xA6\xC5\x1C\x9A\xA2\xE4\x60\x00\x08\xCD\x80\x23\x33\xE0\x91\x9B\x2E\x9F\x8C\x92\xD0\x8A\x9D\x36\xB4\x09\x8D\x82\x35\xA6\x9F\x68\x37\x9A\xE3\x63\x95\x9D\x50\x8D\x7A\x68\xF4\x84\x92\x31\xF8\x8A\x8E\x8A\x43\xA1\xA3\x7E\x87\xA0\x1D\xAD\xA6\x9E\x20\xB8\x9C\x86\x8A\x84\x7D\x4A\x80\x0B\xA5\x7F\x8C\xAC\x0C\xD3\x82\x21\x35\xDA\x80\xA1\x6C\xB3\x05\xA6\x02\x37\xA6\x35\xDD\xAC\xA6\x24\xBE\xA3\x94\x4B\xAA\x9F\x1D\x94\x69\x8F\x3D\xA4\xA1\xA9\xA7\x88\xA0\x53\x8A\xAE\xA9\x43\xB9\x99\xAA\x8C\x83\x60\x4C\xC8\xAD\x77\xA9\x95\xA8\x2D\x91\x9D\x81\x0D\x19\x91\x21\x4D\xAF\x9F\x2B\x26\x8B\x7B\x39\xA4\x9F\x38\x63\xB1\xAE\x7D\xB7\x91\x3B\x42\xAB\x97\xAE\x1B\xBB\x9F\x70\xB1\x85\x6B\x0E\x8F\xB9\x95\xC9\xB4\x7D\xA1\xAF\x82\x6F\x2F\xFF\x7B\xB1\x01\xAE\x30\x8A\xC5\x8B\x87\x14\xC9\x95\x8A\x93\x28\xA3\x92\x18\xB6\xAA\x4C\x9A\x0B\x24\xDA\xB1\xB1\xA7\x5D\xA8\x62\xC2\x1D\xA9\x6B\x0B\x2B\x26\xB7\x00\x23\xA4\x57\xD7\xAE\x07\x93\x90\x77\xB6\x16\x32\x65\x40\x15\x70\x6F\x4B\xB6\x13\x25\xCF\xBF\x98\x66\x26\x86\x68\x5A\xAD\x83\x6F\xA0\x2A\x96\x08\x02\x7D\x34\xC2\x7D\x97\xA8\xB2\xB5\x9C\x19\x40\x0D\x9E\xD7\x54\xBF\x68\x4A\xB1\x69\x68\x1E\xB8\x6A\xAD\x5D\xBD\x70\xE5\x6E\x9D\x4C\xE2\xB4\xBC\xB7\x66\xB8\x74\xA2\x68\x71\xE9\x3B\xB8\x74\xA4\x5B\x60\x20\x1D\x60\x63\x71\x80\x01\x65\x18\x11\x0B\x25\x07\xDD\x73\xCA\x02\xAE\x75\xFA\xAA\x66\x60\x72\x78\x62\x00\xDC\x26\x81\x3F\xAE\x72\x80\xEA\xA8\x98\x08\x54\x24\x28\x9D\x00\x0F\xBF\x00\x01\xC2\xC1\x03\xC1\x65\x19\x3B\x03\x25\x27\xCA\xC0\x84\xC2\x62\xC2\xA1\x54\xC7\x78\x20\x17\xC2\xD0\x19\xCD\x80\x0E\xD6\x2A\x30\x40\x04\xC6\xE5\x0F\xA0\x01\x88\x98\x32\xB7\x0B\x7E\xA0\xDB\x2B\x31\xB8\x9C\x80\x6F\xA4\x20\xC2\xC6\x45\x30\x04\xC4\x80\x58\x71\xC5\x05\x30\xCB\x83\xCB\xC1\xC2\x80\x53\xC5\x2B\x5F\x34\x62\x8C\xD8\xBE\x28\x0D\xF6\xC5\x28\x26\x29\xC9\xE4\x00\x6C\x39\x82\x25\xC9\x64\x1C\xA2\xC9\xC4\x00\x2D\x33\x91\xAB\x60\xC9\xFE\x44\xC2\x60\x31\x0D\xC8\x93\x31\x00\x67\xBE\x0B\x25\x9E\xAA\xC6\x23\x18\x32\x6C\x74\x06\x6E\xC2\x4E\x7E\xCC\xC5\x39\xC2\x87\x3B\xE1\x3F\x8F\x2C\xB1\xC6\xCA\xA1\x77\x39\x3F\x59\x7A\xC3\x79\x02\x3A\xA9\xF6\x33\x78\x6B\x75\x21\x3C\xD7\x64\x72\xD1\x39\xD5\xCE\xCE\x87\xC0\x3E\x78\x45\x6E\x0A\xAF\x6D\xC0\x04\x8F\xDA\x3E\xA4\xF3\x34\xD3\xC7\x96\xD3\x7B\x45\x18\x0F\x18\x6C\x05\x0F\x39\x29\x0E\x0E\x8D\x32\x0C\xA7\xE2\xC5\x61\x3E\xF5\xCD\xCF\x2E\x14\x06\x2A\x2B\x23\xD8\x3E\xF9\x0C\xD0\x8C\xC0\xD6\xD0\x08\xD3\xD5\x45\xE7\xD1\xD5\x91\xCD\x83\xA4\xAE\xB5\xD2\x38\x17\xD7\x2B\x15\x2F\xD0\x7C\xE5\xBE\xD3\x42\xCA\xD8\x04\xCC\xCA\xD1\xA9\xC9\xDB\xC8\x01\x90\xDC\x0C\xAB\xDA\x38\xB5\xAE\xD6\xDA\x58\xF2\xD4\xD6\xB6\xD8\xD7\x13\x3A\xDF\x6A\x5E\xF2\xCE\xCE\xBF\xC7\xD8\xE6\x45\xD5\x20\x7E\xD3\xCF\xD8\x9F\xDD\xCD\xA8\x89\xDC\xAD\x71\xCF\xD8\x3F\xAA\xD2\xD8\xAB\xA6\x25\xDB\xF9\x71\xD3\xD6\xB5\xD7\xD5\xAE\xE4\x7C\xDA\x3B\xC1\xE7\xD8\x03\xE2\x3C\x5B\xBB\x87\xE0\x48\xE8\xDA\xE1\xEA\xD6\x21\xC3\xDB\x78\xD3\x6C\xDB\xD5\xDE\x71\xC3\xD1\x99\x82\x27\xCD\x39",
"\xC0\xCC\xB7\x64\x0B\xCC\x00\x6D\xCF\xDE\x3F\xF0\xC8\x21\x4A\xD9\x0E\x0C\x79\xD2\x07\x60\xF8\x13\x25\x3F\xE6\xDA\x0C\x17\xE2\x07\x8C\xCA\xD5\x05\xA6\xC6\xD2\xA3\x88\xE1\xDB\x64\x93\xDA\xE4\xEC\xD2\x85\x1D\x62\x02\x3D\xD8\x5E\xBF\x6B\x9D\xC6\x27\xD0\x8C\xC3\xCF\xAC\xD6\x23\xEB\xE4\xDA\xE6\xD1\xC5\x6B\x05\xA4\xDF\xDF\xDC\xE9\xDA\x27\xC8\xC5\x65\x0A\x37\x13\x3B\xD7\x29\xE2\x33\xCE\xE5\x3D\xD6\x9D\xD7\x94\x14\x2B\x38\xEE\xD0\xC4\xE3\xEC\x11\x08\xE9\xEC\x31\x06\xDC\xD3\x9F\xEE\xE9\x85\xD6\x21\x9E\xD7\xAF\xD7\x2A\xD3\xE5\xEB\x30\x17\xEC\x9F\xF6\xB2\xEC\xDF\xCB\xD2\xD4\x45\xE5\xE8\xF0\x82\xFE\xE1\xDA\xB8\xCB\xEC\x11\x2D\xEF\xED\x28\xF8\xE7\x98\xF8\xD4\xEF\x7B\xC0\xDB\x06\xFC\xC2\x22\xBF\x83\xD7\xE3\xC0\xD4\xF1\xD1\xA4\xD6\x6D\xC7\x89\xE5\xF1\x90\xF9\x0D\xF3\x0F\xF0\xDE\xC4\xF3\xD4\xE3\xC8\xD6\xE6\xDB\x02\xEF\xF5\xB3\xEA\x7A\xCB\x46\xE8\xD3\xF0\x9B\xEC\xE1\xD4\xA4\xE8\xDA\x4D\xCF\xF6\xDE\x3A\x33\xEC\x95\x23\xFF\xEA\x9C\x7A\xED\x20\xD7\xFF\xDC\xD8\xD1\xF6\xE8\xB6\x97\xF3\xD0\x99\xF4\xF4\x08\x4F\xE7\xF7\xE5\xEC\xEE\xED\x92\x3D\xF6\xF6\x93\xF0\xDD\xCA\xEC\xAF\xEF\xE0\xEB\xEA\xE6\xA0\xEA\xEC\xF3\xDC\x7C\xF1\x71\x2E\xF0\x7C\xD0\xF2\xEF\x95\xC1\x25\xE5\x5A\x7F\x72\x6A\x6B\x12\x34\x71\x7D\xC5\x50\x04\xC1\x20\x10\xAE\x2A\x13\x1C\x52\x73\x9D\x1C\x80\xBB\x58\x33\x20\x52\x10\x20\x5F\x6F\x1C\x5F\x67\xD1\x7F\x61\x71\x7A\x75\x3C\x78\x39\xD7\x72\x10\xD9\x76\x80\xC0\x72\x76\xC2\x77\x74\xB2\x7A\x74\xC7\x73\x7F\xB5\x75\x7F\xF2\x40\x02\x8A\x77\x7F\x54\x79\x7F\x8F\x75\x71\x5F\x7C\x7E\xE1\x64\x76\x27\x87\x76\xC8\x74\x7F\xAD\x6D\x82\x2F\x8F\x79\xE9\x7F\x35\x09\x80\x00\x0B\x8B\x5F\x0B\x31\x20\x05\x18\x84\x10\x8B\x30\x02\x89\x35\xFE\x70\x10\x65\x6E\x66\x26\x17\x81\xC6\x55\x7A\xAE\x3A\x5C\x00\x1C\x5C\xC7\x11\x6C\x9C\x35\x10\x5D\x86\x64\x71\x38\x5F\x6E\x56\x84\x74\x0C\x56\xA9\x3C\x7F\x76\x6C\x63\xAD\x3E\x72\x1C\x53\x32\x72\x00\x31\x04\x81\x10\x14\x32\x85\x7D\x6A\x31\x1B\x8D\x67\x1F\x34\x7D\xFA\x6E\x86\x74\x08\x85\x00\x07\x32\x29\x3C\x7A\x68\x8F\x75\x6A\x8A\x87\x3D\x7D\x86\x0E\x3F\x86\x0E\x82\x87\x15\x3B\x7E\x83\x8A\x73\x79\x85\x77\x3D\x7C\x87\x7E\x80\x88\x20\x0B\x7E\x43\x85\x84\x53\x8B\x5B\x86\x15\x10\x9D\x8B\x84\xBE\x38\x88\x0F\x3F\x84\x00\x05\x66\x73\x86\x81\xBB\x5E\x03\x99\x8A\x87\x1C\x5F\x00\x2B\x1E\x8A\x75\x7C\x51\x22\x39\x88\x74\x09\x2F\x02\x19\x2F\x81\x84\x86\x3E\x0E\x57\x7B\x51\x5E\xD8\x4C\x01\x2B\x10\x8C\xC8\x59\x07\x3A\x55\x46\xA2\x8F\x86\xC0\x55\x10\xC9\x87\x8A\x63\x54\x5C\xBC\x83\x8C\xC5\x82\x3E\x17\x55\x10\xD3\x8D\x8C\x32\x53\x8B\x0F\x36\x01\x2B\x1A\x8D\x00\x11\x88\xC3\x52\x53\x3E\x05\x88\xC3\x81\x58\x74\x06\x5B\x05\x16\x8E\x6F\x56\x49\xC7\x84\x07\x13\x81\x10\x20\x5C\x8C\x87\x58\x3C\xE2\x84\x60\xF1\x8C\x8D\x05\x16\x8F\xE9\x87\x3C\xD8\x8F\x86\x59\x51\x10\xD3\x4E\x8D\x04\x55\x52\x2C\x36\x85\x96\x3F\x8C\xF4\x8D\x5C\xEB\x86\x8B\x01\x18\x8B\x8D\x86\x5E\x3A\x60\x37\xA4\x87\x66\x96\x3B\x8F\x74\x01\x89\x28\x37\x89\xE6\x56\x90\xD6\x82\x5E\xFD\x80\x10\x5B\x53\x5F\xD8\x48\x39\xDE\x45\x10\x23\x90\x86\xD1\x84\x06\x18\x81\x8F\x4A\x51\x54\x76\x48\x4B\x75\x5B\x4B\xA0\x5D\x07\x82\x6F\x8D\xE2\x55\x56\xE6\x4F\x53\x69\x55\x4F\x77\x4C\x4E\x6E\x5A\x92\x8F\x5C\x92\x75\x14\x57\x7F\x36\x57\x50\x56\x59\x9C\x63\x8F\xF9\x85\x3B\xB0\x57\x90\x7C\x5A\x8F\x34\x04\x58\x00\x16\x58\x01\x9E\x47\x89\x57\x56\x29\x41\x59\x65\x0A\x54\x9D\x5F\x92\xDC\x35\x59\xAE\x41\x5F\x99\x5B\x68\x9C\x58\x95\xDA\x5C\x4B\xA1\x56\x56\x4A\x44\x5A\x38\x93\x4C\xB1\x1B\x4E\x54\x4B\x4C\x38\x6D\x29\xA2\x73\x97\xA6\x79\x07\x30\x02\x2D\x48\x1A\x13\x0F\x2D\x2D\x19\x1F\x88\x31\x08\x97\x7A\x82\x20\x21\x00\x2D\xFF\x0F\x88\x32\x00\x98\x75\x72\x20\x23\x04\x98\xAB\x81\x8B\xBB\x58\x98\x75\x92\x20\x25\x04\x98\x1A\x94\x93\xD8\x46\x91\xAD\x56\x11\x02\x27\x02\x84\x98\x94\xF1\x88\x99\x70\x96\x12\x02\x29\x02\x84\x9F\x90\xC7\x10\x9A\xC7\x1A\x97\x2B\x1B\x02\x84\x9F\x01\xF3\x2C\x2A\xEB\x2F\x0F\x02\x2B\x2E\x7B\x95\x9B\xB6\x91\x27\xB1\x90\x27\x7C\x27\x9B\xA7\x29\x14\x2B\x14\x9B\xB6\x9F\x88\x30\x0A\x9B\x02\x2B\x88\x00\x1A\x5E\xF1\x33\x60\xED\x53\x38\x74\x06\x9A\x98\x1F\x0F\xB1\x92\x2D\x7B\x27\x9B\x7B\x22\x2D\xC0\x95\x9B\xC2\x94\x9C\x71\x8C\x19\x01\x18\x9C\xB9\x46\x6F\xDC\x5C\x35\xCE\x98\x16\xB8\x94\x20\xAB\x2F\x9A\xBC\x9B\x2E",
"\xD6\x9C\x9B\x74\x92\x10\x39\x70\x03\xB5\x90\x9D\x04\x20\x62\xDA\x95\x9B\xE8\x92\x9D\xEC\x9C\x1B\x04\x90\x37\xD2\x28\x02\xF9\x98\x45\x4B\x9B\x91\xD8\x47\x9D\xFA\x93\x7D\xCD\x18\x95\x02\x2E\x99\x53\x9D\x3B\xF2\x9C\x20\x72\x9E\x9B\xFF\x9D\x26\xA0\x2D\x9B\xFF\x93\x9E\x47\x1B\x12\xFE\x91\xA1\x54\x51\xA0\x96\x9E\x38\x0C\x21\x9B\xA4\x80\x62\xB7\x9A\x9E\x14\xA9\x9F\x16\xA9\x07\x1F\xA4\x20\xBA\x93\x9D\xC1\x93\xA1\x83\x2A\xA1\x00\x07\xA2\xD2\x26\x02\x30\xAD\x98\x75\x9C\x51\xD2\x24\x02\x30\xA6\x98\xD2\x22\x02\x3B\xA7\x87\xC7\x6B\x9E\x1A\xA9\x9D\xB6\x96\x9C\x9E\x1C\x37\xEB\x50\x44\xCA\x99\x35\xCC\x97\xA2\x0D\xAA\x2F\xF8\x93\xA4\x2E\xA5\x10\xE8\x97\x9B\x32\xAB\x12\x34\xAA\xA1\x36\xA0\x8A\x39\xAF\xA3\x74\x91\x7D\x3D\xAE\xA5\xFD\x25\x77\x7F\x9F\x9B\x62\xAE\x9E\x7A\x83\x9C\x45\xAB\x9D\x47\xA9\x5D\xDF\x91\x67\xE1\x94\x38\x27\xA5\x9E\x0C\x27\x9E\x30\xA0\x99\xE0\x20\xA3\x57\xA8\x10\x59\xA1\xA1\x5B\xA4\x86\x5D\xA2\xA5\x5F\xA2\x77\x61\xA2\xA8\x63\xA5\x97\x65\xAA\x2B\x67\xAC\x31\x69\xA3\x20\x4F\xA0\x21\xEB\x23\x84\xD4\x90\xA3\xA8\x98\x19\xAA\x98\x10\x0A\xAD\x94\x5F\x15\x9F\x66\x6B\x1C\x01\x1B\x95\xD3\x16\xA3\xAC\x4A\x48\x99\xA8\x19\xE4\x8F\x0F\x7B\x28\xAA\xA5\x72\x10\x43\x8F\xA8\x66\x28\x10\xA9\xA4\xA2\xB0\xA4\x20\xEB\x26\xA7\x29\xA6\x1A\x2B\x1E\x01\xB4\xA4\x64\x05\x1A\xAB\xB7\xA5\x10\x0F\xA2\x10\xE6\x80\xA9\x94\x35\x5B\xBB\xAA\xA8\x08\x12\x8C\xFA\x21\xA9\x9E\xA8\xAC\x05\x19\xA1\x10\xA1\xA1\x95\xA9\x1A\x82\x19\xA0\x7A\x53\x8E\x13\x54\x07\x9C\xAC\x72\xCD\xA0\x00\xA0\xA2\x19\xA2\xAE\x95\x64\x05\xAA\x80\x59\xAD\x20\x60\xAD\xFF\x94\xAE\x16\x14\x8E\x55\xA0\xA3\x95\x90\x92\x8E\x3B\xAD\x01\x1D\x89\x02\x1D\x89\x40\x9D\x54\xD3\x18\x9E\x84\x23\x44\xEF\xAC\x52\x32\x5A\xAA\x06\xAF\x2A\xC7\xA2\xB0\x08\x14\x8A\xAE\xAD\x17\x08\x1E\xAB\xCB\xAC\xAB\x02\x1A\xB0\xC4\xA8\x10\xC1\xA1\x10\xC3\xA1\x10\x07\xB0\x00\xEB\x2A\xAC\x0F\xB5\x10\x7E\x83\xB1\x74\xA5\x10\x2B\xA3\xB0\xDD\x15\xA2\x1D\xB7\x1D\x2B\x18\x9E\xEB\x2E\x87\xD2\x27\x9B\xD3\xA9\x1B\x9A\x97\xAD\xAC\x3D\x8B\xE5\xA5\x52\xF2\xA0\x85\xDD\xAF\xAD\x6E\x01\xAE\x45\x92\x3E\xEA\xAF\x3A\xE6\xA5\xAC\x1A\xAB\xB3\xEC\xA0\xA3\x02\x2D\xAF\xBE\x81\xAF\xB6\x94\xAF\xF3\xA1\x10\xF7\xA2\x94\xE0\xA0\x29\xE6\x12\xAE\x44\xB8\x5B\x57\x5B\x97\x15\xBF\x0F\x3C\x61\xB1\xE6\x20\xB2\x8C\xA8\xAB\xB5\x9B\x2E\x33\xB5\x8A\x35\xB4\x96\xB9\x48\xB3\x89\x46\x59\x40\xB9\xAD\xB0\x9A\xB5\x0A\x80\xA3\x2C\xA5\x9B\x2B\xB8\x1C\x2D\xB8\xA9\x2E\xB9\x94\xDA\xA6\x9B\x11\x9F\xA9\x62\xB0\x44\xFA\xA1\x10\x43\x47\xB6\x25\x50\xB0\xFA\x2B\x27\xAB\x2D\xAA\xEB\x24\x1C\x0E\xB4\xB1\xEB\x28\xB5\x00\x0C\xB1\x69\xB6\x32\xC6\xAF\xAB\xCC\x2F\x5B\x6A\xB4\x84\xDD\xA9\xB1\xB7\x89\xAB\x93\xBF\xB1\x90\xB4\x27\x22\xBD\xB8\x05\xA4\xA5\x66\xA8\x10\xE8\xAC\xB9\x1A\xAF\xB6\x97\xAF\xB2\x72\xB8\xAD\x32\xB6\xB7\x61\xBD\x58\x92\x5A\xB7\x25\xBC\xB7\xF6\x3E\xB7\x7E\x47\xAE\x30\xA4\xBB\xBD\x3D\xAE\x1A\xA1\xB5\x16\x17\x92\x5F\xB8\xB4\x00\x16\xAF\x09\x5E\x92\xF9\xA1\xBB\x00\x1C\xAF\x1C\xA0\xAF\x6B\x30\xB8\x24\xB8\x10\x84\xB1\xBA\x9E\x83\xB9\x43\x86\xB0\x85\xB8\xB9\x9B\xB0\x10\x0A\x90\x10\x87\xB3\xB2\x01\x1A\xB8\x8C\xB5\xB1\x1B\xB9\xB9\x9D\xB5\xB1\x51\xAB\xB0\x01\xB9\xA7\xCE\xA3\x33\x53\xAF\x9F\xA6\xB5\xAD\x2E\xB2\x41\x30\xBB\xAE\xD9\xAF\xB5\x77\xB7\xA0\xAE\xBF\x43\xC5\xBF\xA2\xC7\xB3\xBB\x73\xB1\x8F\x20\x6E\x87\xB7\x98\xBB\xC7\x3A\xBB\x11\xAC\xBB\xC4\x8D\x55\xBF\xB5\x18\x4A\xB3\xBC\xAF\xB1\xAA\x4E\xB6\x13\x50\xB9\xBC\xFE\xA2\x5E\x54\xB1\x9B\x57\xB0\xBD\x96\xBB\xB5\xB6\x1D\xB5\x2B\x14\xBF\xAD\xB8\xAF\x92\x1B\xB7\xFB\xB9\x07\x02\xCF\x15\xD7\xBC\x2A\x20\x62\x73\x23\xA8\xC1\x0B\x29\xBD\x00\x09\x2F\x4B\xBC\x18\x43\xB2\xC1\x45\xBB\x36\x02\x25\xB5\xB0\x8A\xB1\x42\xB1\x9F\xB1\x90\x62\xC4\x1B\xC2\xE9\xBD\xC2\xBC\xAC\x96\x51\x47\x3D\xD6\xA9\xBA\x4C\x96\xAA\x68\xB7\x20\x55\xBB\x2E\x2E\xC2\xB4\x55\xBB\x27\xA4\x83\x9B\x9D\xBB\x27\x20\x6D\xB6\x7B\x96\xC0\x27\x94\xC0\x15\xAB\x9F\xC7\x1B\xC3\x0F\x25\xB5\xF4\x9C\xB6\xEB\xBB\x5C\xEE\xA4\xC3\x52\xB2\x53\x04\xAD\xBC\x9F\xBE\x43\x47\xC8\xBA\x49\xC1\xB3\x7E\x45\xB5\x8A\xB9\xB2\xB6\x92\xAB\x3A\xCB\xBB\x68\xCD\xBB\x5D\x50\xC5\xB1\x99\xC3\xEA\xB0\xC6\x27\xC5\xB1\x92\xA7\xC7\x94\xA5\x19\x00\x09\x99\x28\xAF\xBE\x8E\x41\xBF\x3C\xBF\xB7\xA9\xA2\xB8\x86\xC2\xBA\x1D",
"\xC7\xC8\x5C\xB9\xC8\xA1\x91\xB7\x70\xC0\xBF\xAA\xB5\xBB\x18\xA7\xBB\xFD\xBB\xA0\x03\xC2\xC8\x00\xA8\x10\x7F\x5C\xC7\x57\x59\xC0\x08\x12\xBC\x73\x54\xBC\x21\xC6\xBC\x00\x08\xBC\xA6\xCE\xC8\x27\x9C\xBC\xF1\x13\xC9\x79\xCE\xB1\x96\xCB\xC1\x98\xC9\x9A\xEE\xB8\xC4\x9C\xC1\xC7\xF2\xB5\x52\xFF\xB0\xCA\x48\xC4\xB7\x5C\xC9\x9F\x5A\xC8\xC0\x47\xBA\xC0\x87\x1D\xCA\x0D\xCD\xB4\xCE\xBF\xB4\x39\xB4\x06\xCB\xC3\xB5\xA4\xC8\xB8\x93\xB8\x84\xA4\xC6\xCB\x71\x2B\x27\x3C\x64\xC5\xB3\xC3\xAB\xED\x9E\x4C\x7A\xAE\xC5\x98\x1B\xC6\xA4\xB1\xAD\xEA\x52\x20\xC2\x9E\xCD\x00\x00\xC8\x0B\x2B\x2E\xEB\x26\xC5\x2C\xCC\x9E\x27\xA9\xCC\xEC\x92\x9C\xB6\x9D\xC4\xCE\xC9\xCD\xF0\xC0\xCF\x1D\x91\x62\x93\xBB\x2E\xC9\x89\xC1\x08\xBD\xAB\x93\xBE\xC2\xDB\xBE\xB9\xAC\xA5\xB9\xDA\xC0\xB1\x8F\xB6\xBE\xB9\xC2\xAC\xF7\xC0\x00\x3E\xA4\xCE\x87\xA2\x10\x19\xD1\xA1\xC2\x9A\xCF\xBC\x9E\x97\xF0\xCD\x8E\x00\x65\xD0\x92\xB7\xC2\x86\xB2\xBD\x10\xDC\xBD\xD8\xB6\xBD\x14\xD2\x10\xDE\xB3\xB9\xE1\xB1\xC4\x00\x1C\xB8\xF6\xC8\x10\x8C\xB7\x9B\xC2\x9A\xCE\x25\xD4\x97\xE7\x6E\xCE\x40\xA1\x03\x55\xB8\x9E\x53\x58\x9E\x15\xBA\xB9\x2F\xDB\xCE\x02\x11\xAB\xAB\xA4\x2F\xB6\x9B\x27\x8A\xBC\xD3\x03\x2B\xD3\x2D\xA4\x97\x2F\x66\xC2\x71\x68\xA6\x75\x70\x9F\x15\xC3\xB9\xC0\xB9\x9E\xBB\xC0\x14\x53\x1D\x10\x55\x10\x66\x9A\xCA\xD5\x87\xA8\x31\x01\xDB\x27\x03\xD0\x62\x15\xB6\xD0\x93\xB9\xD2\x27\xCC\xD0\x2A\xD5\xB0\x93\xB1\xD3\x27\xC3\xD3\x05\x1B\x2E\x1D\xD8\xBE\xD2\xA8\xC8\x5F\x67\xBA\x68\xD8\xD6\x18\x30\x62\x7D\xD9\x9F\x1F\xD9\xCD\x3D\xD9\xD6\x73\x63\xD2\x59\xD1\xD1\x05\x14\xD7\x27\xC7\xB1\x75\xDD\xA9\x28\xDE\xD2\x08\xD0\x00\x78\xD9\xD4\x59\x83\xD1\x91\xB8\xD3\xB0\xCC\xBE\x80\xD4\xD6\x1D\x6F\xCB\x1B\xDA\xC1\x85\xDE\xD9\x88\xD0\xA4\x30\x02\xD5\xF6\x6F\xD3\x8F\xDB\xD8\x83\x63\xD4\x4B\x9E\xD7\x99\xD8\xD4\x99\xD5\xBE\x99\xD6\xAB\x7B\x90\xD2\x02\x26\x91\x81\xD6\xDA\x83\xD8\xDA\x00\x31\xD5\x8B\xA2\xDB\x00\x3E\xDA\x71\x67\xD5\x60\x53\xDC\xC8\xD6\x30\x8A\xD9\xD9\xFF\x08\xDB\xF9\x95\x9D\xB5\xDB\xDA\x83\xA6\x30\x5F\xB6\xA4\xDE\x9A\xA4\xA5\x7B\x9C\xEF\x5E\xA4\xD1\x9D\xB9\x93\xAD\x2E\xD7\xDB\xCF\xAC\xDB\xDD\x6C\xAD\xDD\xD3\x10\x9E\x4D\xA8\xCE\xE4\x9E\xD0\x14\xBC\xDB\xFF\x98\xC7\xA5\xCE\xD1\xAC\xD0\xC6\xFE\xC8\x10\x07\xD2\xC8\x6B\xD6\x51\x95\xC3\xD9\xC1\x85\xD9\xDC\xA7\xD9\x09\xBB\xD0\x98\xD9\x2D\x2B\x1A\xA3\x1A\xDE\xDC\x00\x0C\xE0\xF8\xD9\xDD\x7D\x6E\xDB\x55\xDC\xD8\x5A\x70\xCF\x19\x01\xE0\x9C\xD6\xB1\x03\xE7\xC2\xD3\xB1\xD7\x09\xEC\xD2\x2F\xC1\xE2\x1C\xE7\xE0\x0D\xEA\xC1\x0D\xB7\xDC\x04\xD4\xA6\xCA\xDE\xD3\x83\x70\xD4\x12\xEA\x73\xB4\xD8\x10\xF6\x8B\xD4\x77\xDA\xDA\x22\xEA\xD7\x0F\x20\xD5\x2B\x17\xD8\xE8\xD1\xE3\x31\x02\xD5\x90\x91\x6E\x30\xE6\xE1\x7D\x6C\xC3\x93\xBD\xDF\xFA\xD1\xC9\x00\xEF\x21\x26\xD9\xAC\x04\xEF\x7F\x20\xE6\xE2\x1B\xE2\xD9\x7B\xDB\xE0\x9D\xB0\x62\x10\xEF\x9F\x7E\x94\xE1\xD8\x90\xA4\x32\x08\xE1\x1A\xE9\xD9\xEB\x2D\x85\x99\xDF\xE1\x06\xEA\xD0\x73\xD4\xE2\xEB\x2D\xD0\x37\xDA\xE6\x11\xE6\xE4\xC7\x6D\xE2\x87\xA0\xDB\xE5\xCF\xDC\x5F\x73\xE3\xF7\x83\xBE\x89\xB8\xE3\xF2\xDD\xD9\xA0\xD5\x9B\x3C\xE8\x10\x3E\xE1\xD2\x41\xD2\xE4\x53\xA4\xE4\xB1\xDB\xE2\x88\xAF\x9F\x74\xCE\xE7\xE5\xD1\xA1\x03\x64\x7E\x45\xE4\xD8\x73\x6F\xB5\x89\x21\x10\xED\x16\xA3\x25\x7E\x7C\x74\x0E\x97\x22\xEF\x0F\x3A\xE5\xDD\xE7\xC1\xB0\x94\xEB\xE8\x39\x71\x03\x98\xED\x9B\xED\x16\xA4\xB9\x71\x71\xF2\x62\x07\xA0\xE0\xA3\xFB\xD5\x10\x18\xBE\xDF\xB1\x9B\x27\x1D\x0C\xE7\x17\xD6\xE6\x90\xDF\xD0\x76\xD4\xD3\x00\x0D\xA7\x36\xE7\xE7\xC3\xEA\xE2\x39\x72\x03\x5E\xEB\x97\x7F\xAB\x89\x0B\x3A\xE7\x02\x1B\x01\xBC\xE7\xC9\x29\xEB\xE6\x54\xEB\xE3\x2B\x1A\xB8\x5B\xE8\xDD\x72\xE2\x03\x88\xE6\xDE\x00\x1A\xE8\xC6\xE9\xEC\x48\xE7\xC2\xB7\xEA\xDF\xB9\xEB\x12\xBB\xE7\xE2\x22\xE5\xE6\x51\xE4\xB3\xC2\xE4\xEC\x5F\x2B\xE8\xF2\xEF\xE3\xDD\xEB\xEC\x0F\x2D\xEC\x16\x1C\x51\xD0\xE1\x10\xD2\xEC\xEE\x7F\xE5\x1C\x24\xE5\xB1\x56\xE8\xED\x12\xD8\x10\xDB\xE6\xEF\x96\xEA\x75\xDF\xE1\xAD\xE2\xE7\xDA\x78\xEA\x73\xBC\x95\xB5\xD4\xDC\x9E\xF7\x90\xE9\x15\xEB\xF0\x7D\x62\xA4\x71\xEA\xF1\x76\x9A\xDE\xDC\x97\x9C\x48\xA9\x9C\xDF\xDC\xA4\xE1\xD0\xDF\x30\x13\xDE\x00\xF7\x9B\x17\xF1\xE8\x1D\xF4\xDC\x76\x6C\xF1\x5C\xE9\xDE\x6B\xA1\xF2\x6D\xAD\x37\x40\x4E\xDE\x27\xF1\xB0\xAE\x31\xEA\xF4\xD4",
"\xEA\xE0\xE7\x8E\xC8\xEA\x87\x89\xA7\xE5\x86\xAE\xF1\x5C\xDC\x9E\x55\xB2\xD7\x11\xA8\xC5\x0F\x23\xE9\x86\x7B\xC8\xE3\xE6\x88\xAB\xEA\xD1\xED\x10\x99\x40\x8E\x06\x86\x95\xB5\x05\xF0\xF4\x92\xE5\x7A\xA7\xE3\xF5\x92\x85\xF5\x2E\x2A\xE9\x70\x02\xAA\xF8\x76\x75\x9F\xE0\xE6\x11\xA5\xEB\x02\x1E\xEB\xE8\xE4\x20\x7B\x20\x02\xB8\xC6\xDB\xF3\xE6\xEC\xF8\xE2\x2C\x0F\xC7\xA3\xBB\x59\xF7\x07\x23\xA7\x13\xF9\x9B\xE4\xD6\x9B\xBA\x92\x2D\x0D\xDA\xD3\x60\xE5\xA8\x2F\xF1\xF1\x45\xFF\xD9\x8B\xFC\xE8\x18\x30\xF2\x05\x1D\x19\xEC\xD2\x19\x4B\xAE\x5E\xE2\x98\xF2\x17\x1A\xF2\x65\xFA\xA1\x85\xF4\xE2\x88\xF1\xE3\x87\x9D\xE3\x43\xF4\xA6\x32\xFC\xED\x48\xF2\xF9\x02\x14\xF9\x23\xFF\xA6\x74\x91\xA7\xCD\x9A\xF9\x3E\xF1\xDA\xF9\x9D\xF2\x70\xE3\xF3\xA2\xFA\xF8\xB8\xF2\xE7\x8D\xFA\xE0\x47\xF0\xF3\x4B\x61\xDD\xBF\xE4\xB1\x68\xE2\xFC\xD2\xD2\x20\x85\xE6\xFC\x0B\x24\xF1\x83\xF6\x9F\x65\xC0\x10\xC9\xF9\xF1\xC0\xF1\xA4\x17\xD1\xFA\x72\xEA\xA6\xB5\x9C\xDD\xAD\xFE\xDD\x01\xB0\xDE\x99\xFC\xF3\x96\x35\xB5\xBA\xD5\xFB\xCF\xF8\xD1\xA5\xF8\xA8\xA7\xFA\xF0\xD3\xF8\xFD\x7B\x9A\xFD\x6E\xA9\xF3\x70\xAF\xDE\xE0\xF0\x37\xB3\xFA\xBF\x4D\xF5\xFE\xD1\xFF\xE5\x40\xE9\xFE\x86\xE1\xE3\x49\xFB\xE1\xB2\x48\xCB\x4A\x7F\xDB\x4C\xFC\x2B\x78\xE1\x65\x7F\x09\x7D\xFF\x5D\x76\xDD\x78\xFA\x53\x7D\xEF\x79\x5A\xBF\x79\xE2\x6C\x7F\x07\x1E\xFE\x38\x7B\x74\x17\x7C\xF2\x7F\x73\x6E\x1C\xF1\x7D\xFC\x7B\x4B\xE7\x68\x78\xE7\x78\x4C\x64\x7D\x08\x80\xF9\x73\x30\xFF\x76\x7E\xA9\x7D\xE6\x53\x7D\xEE\x4B\xFD\x6D\x6D\xFC\x7B\x79\x1A\x86\x72\x35\x7E\xD0\x5A\xA1\x36\x7E\x40\x09\x80\x28\x83\xFA\x63\x7C\x42\x71\x02\xA6\x81\xF5\x72\x7E\x12\x87\x86\x71\x4C\x01\x15\xEF\x03\x80\x13\x62\x7C\x06\x85\x36\x78\x53\x80\x05\x04\xB7\x4E\xBE\x79\x03\x38\x52\x00\x8F\x7D\x64\x7C\x00\xEA\x7C\xE3\x67\x81\x40\x85\x04\x9A\x6E\x15\x8B\xFA\x2C\x83\xFB\x77\x80\x25\x78\xF3\x72\x52\xCD\x7C\x01\xC9\x83\x5E\x4B\x82\x00\x0D\x09\xB6\x4D\x27\x81\x05\xA0\x80\x09\x94\x82\x23\x83\x0A\x84\x7A\x2C\x8A\xFF\x57\x7E\xEA\x72\x18\x5E\x86\x02\x92\x0C\x9D\x7F\xFD\x31\x80\xFD\x61\x78\xFF\x07\xE7\x6C\x4F\x0F\x85\x10\x6A\x81\x6D\x4C\x83\x8F\x4A\x0A\xBB\x7C\x8F\x7B\x03\x85\x09\xFE\x7B\x4B\x7E\x4C\x0E\x90\x85\xFC\x63\xB9\x01\x80\x25\x66\x82\x04\x85\x87\x63\x72\xAF\x71\xB2\x17\x85\x01\x7B\x63\x07\x67\xAA\x12\x6B\x01\x3E\xC6\x0C\x64\x44\x2E\x64\xA7\x51\x36\x75\x62\x18\x56\xDF\x01\x0B\xE8\x4C\x4F\xD7\x62\xA6\x03\x65\x10\x56\xFC\x55\x5A\x80\x0A\x01\x98\x81\x13\xB3\x4F\x4D\x8C\x9E\x74\x66\x6D\x44\x85\x08\x56\x14\xBD\x30\x54\x89\xAD\x0F\x75\xD0\x78\x84\xB6\x83\x25\x2C\x01\x5C\x8D\xD5\x0C\x11\xC5\x60\x6B\x4E\x71\xFB\x6B\x6F\x16\x86\xF9\x61\x81\x06\x8C\x63\x1B\x84\xF3\x45\x77\x08\x5E\xB5\x5C\x80\x1E\x82\x79\x5F\x83\x0F\xAF\x81\x3E\x88\x0D\xB2\x80\x20\x82\x84\xCC\x84\x94\x40",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
