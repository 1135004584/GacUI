/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
Parser::GuiInstanceQuery_Parser.parser.txt

This file is generated by: Vczh Parser Generator
***********************************************************************/

#include "../../../Import/Vlpp.h"
#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Query"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum NameOption"
L"\r\n" L"{"
L"\r\n" L"\tSpecified,"
L"\r\n" L"\tAny,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ChildOption"
L"\r\n" L"{"
L"\r\n" L"\tDirect,"
L"\r\n" L"\tIndirect,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PrimaryQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tChildOption\t\tchildOption;"
L"\r\n" L"\tNameOption\t\tattributeNameOption;"
L"\r\n" L"\ttoken\t\t\tattributeName;"
L"\r\n" L"\tNameOption\t\ttypeNameOption;"
L"\r\n" L"\ttoken\t\t\ttypeName;"
L"\r\n" L"\ttoken\t\t\treferenceName;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CascadeQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tparent;"
L"\r\n" L"\tQuery\t\t\tchild;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tExclusiveOr,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tSubstract,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tfirst;"
L"\r\n" L"\tQuery\t\t\tsecond;"
L"\r\n" L"\tBinaryOperator\top;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INDIRECT = \"////\";"
L"\r\n" L"token DIRECT = \"//\";"
L"\r\n" L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n" L"token WILDCARD = \"/*\";"
L"\r\n" L"token OPEN = \"/(\";"
L"\r\n" L"token CLOSE = \"/)\";"
L"\r\n" L"token XOR = \"/^\";"
L"\r\n" L"token INTERSECT = \"/*\";"
L"\r\n" L"token UNION = \"/+\";"
L"\r\n" L"token SUBSTRACT = \"-\";"
L"\r\n" L"token ATTRIBUTE = \"@\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryFragment"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n" L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n" L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n" L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimary"
L"\r\n" L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n" L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n" L"\t= \"(\" !QueryRoot \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query Query0"
L"\r\n" L"\t= !QPrimary"
L"\r\n" L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n" L""
L"\r\n" L"rule Query Query1"
L"\r\n" L"\t= !Query0"
L"\r\n" L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n" L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"\t"
L"\r\n" L"rule Query Query2"
L"\r\n" L"\t= !Query1"
L"\r\n" L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n" L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query QueryRoot"
L"\r\n" L"\t= !Query2"
L"\r\n" L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 5817; // 27819 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 697;
const vint parserBufferRows = 6;
const char* parserBuffer[] = {
"\x00\x00\x81\x81\x84\x02\x81\x80\x07\x82\x00\x87\x80\x83\x21\x33\x3B\x31\x30\x64\x65\x11\x35\x35\x32\x39\x3D\x7F\x18\x99\x98\x8A\x85\x84\x8C\x28\x39\x69\x6D\x21\x36\x83\x8D\x8B\x8A\x8D\x19\x85\x08\x80\x0A\x90\x81\x92\x8B\x28\x99\x88\x0B\x93\x98\x83\x29\x32\x74\x2F\xA7\x91\x9B\x03\x94\x8E\x81\x1C\x8C\x8E\x90\x82\x8C\x8A\x8B\x96\x05\xC8\xA3\x28\x39\x34\x34\x33\x98\x1B\xBE\x81\x82\xAF\x81\x8A\x9C\x03\x2B\xD8\x80\x90\x33\x95\x32\x36\x3A\x50\xFF\x7F\x86\x81\x87\x8D\x91\x91\x79\x3A\x8D\x0B\x9B\xB0\x81\x30\x3A\x74\x20\xA2\x35\x34\x3D\x32\x27\x30\x6D\x65\x21\xA3\xB9\x85\xB0\x90\x91\x24\xC6\xB9\x33\x0B\x94\xC2\xB6\xB8\x72\xF4\xB6\xB8\xB5\x37\x24\x38\x3A\x69\x6F\x2E\x3B\xB2\xA8\x82\xB2\xC0\x69\x82\xFD\x88\x8B\xC8\x03\xA5\xA6\x64\x0E\xD0\xD2\xC4\xC8\x86\x8F\xBF\x68\xEA\xAC\xA1\x82\x3D\x32\x33\x8A\x5E\xE3\x0B\xD9\xB5\xD5\x8E\xBF\xB3\x81\xA6\xB5\x85\x8B\xDC\x39\x3C\x38\xB3\xFA\x90\xBC\xB0\x07\xD0\xDD\xCC\x26\x8E\x2B\x8A\xE0\x86\xDC\xE1\xBB\x79\xA2\xD1\xD3\xC0\xAB\xDE\x81\xDD\x37\xB9\x82\xC8\xA2\x80\xA6\x33\x34\x72\x73\x20\xB5\xE4\x99\x81\xEC\x9D\x02\x2B\xA9\xE0\x8F\x30\x39\xB0\xEB\x01\xD8\xF8\x97\xA9\xA9\x83\x39\x32\x63\x12\xCF\xB0\xA1\x0B\x97\x17\x95\xFD\x6B\x42\x83\x4A\x61\x61\x53\x80\x81\x05\xB1\x47\x80\x42\x09\x8A\x8B\x82\x40\x0D\xA8\x40\x7C\x40\xBB\x49\x1E\x10\x11\x49\x12\x15\x13\x10\x54\x04\x48\x42\x87\x00\x2F\x02\x8B\x7F\x08\xB1\x4A\x55\x41\x27\x98\x8A\x84\x87\xEB\x45\x4D\x8A\x88\x01\x25\x88\x48\x88\x02\x60\x8E\x11\x10\x4D\x05\x15\x07\x4A\x3B\x80\x4B\x15\x18\x2D\x3A\x11\x11\x0B\x5A\x1F\x1D\x17\x8F\x41\x83\x9A\x14\x0C\x2D\x39\x0D\x16\x0A\x2D\x90\x84\x78\x42\xBB\x57\x19\x10\x13\x44\x03\x11\x12\x14\x44\x11\x91\x43\x8B\x2A\x03\x02\x8E\x46\x34\x83\x41\x43\x13\x50\x05\x1E\x12\x97\x00\x6F\x88\x09\x99\x00\x61\x5C\x75\x40\x48\x43\x1C\x13\x13\x53\x05\x1C\x98\x00\x2F\xA9\x03\x9D\x9C\x50\x62\x98\x42\xA0\x00\x18\x1F\x12\x14\x7B\xAF\x8E\x17\x89\x52\xB1\x49\x03\x4A\x8F\x80\x46\x84\x15\x45\x12\x19\x9C\x8B\xEA\x41\x4F\x0A\x0A\x07\x23\x99\x4B\x4A\x48\x55\x1E\x11\x12\x4F\x2B\x99\xA4\x40\x2F\x2B\x03\x84\x00\x61\x51\xA5\x42\xAB\x53\x15\x12\x13\x14\x54\x12\x11\x10\x87\x31\x88\x49\xAC\x00\x2D\x2E\xAD\xA0\x4A\xBE\x81\x4E\xA9\x10\x54\x35\xA9\x12\x10\x55\x14\xAB\xAE\x40\xBB\x80\x1A\x02\xA7\x18\x7F\x9C\x4B\x54\x4F\x37\x9E\x13\xB2\x01\x7B\xAA\x0D\x67\xBF\x9A\x44\xA2\x40\x84\x84\x1F\x10\x15\xD8\x80\x4B\xAE\x0B\xC4\x61\x55\xBB\xB4\x08\x48\x53\x14\x14\xB7\x85\x1F\xB5\x40\x84\xAF\x03\x1F\x0A\x6D\x45\x41\x58\x89\x05\x50\x0B\x4A\xBF\x2E\x57\x68\x5A\x11\x72\x21\x17\x19\x5E\x5F\x5A\x0B\x4A\xC2\x01\xE8\x66\x44\xC1\x06\xC8\xC4\x1E\x0B\x52\x2F\x1F\x18\x1D\x53\x34\x13\x48\x1D\x3D\x85\x4D\xC4\x10\x20\x24\x0C\x0D\x14\x02\xCF\xC5\xC3\xC1\x5E\x74\x1E\x0C\xC0\xFD\x81\x44\xCA\xC3\x79\x10\xC8\xCB\x57\x16\x2B\x45\xCD\xC3\xC7\x72\xC2\xC6\x0B\x19\xDB\xC4\x07\x4A\x3F\xC0\x40\xCB\xC8\x25\xF1\xC7\xCA\xC4\x2B\xFF\xBE\xC9\xD1\x3A\xE9\xC2\x07\x4A\x4F\xF8\xC8\x65\xD3\x5F\x6E\x01\x0D\x2A\x2B\x58\xD0\x40\xD1\x30\xD4\xDA\xCA\x0E\x20\x28\x01\xD8\x08\x37\xB9\x80\x08\xD8\xCE\x41\x70\x0B\x1D\x69\x34\x18\x18\x08\x7B\x20\x09\xD8\x74\x8D\x4F\x63\x74\x08\x3D\x20\x02\x0B\x14\xC0\x63\x19\x1B\x77\x65\x24\x12\x08\x08\x7D\x20\x09\x08\x08\x7C\x23\xD2\x0A\x0A\x83\xEC\xDE\xD8\xDC\x72\xFF\x61\x72\x74\x92\x78\xDA\xDD\x10\x6E\x39\x13\xE1\xE1\x87\xE9\x00\xCB\x16\x7A\xEE\x03\xE1\xD9\x45\x27\xD0\x09\x6B\xAF\x6D\x6E\x1A\x6C\x74\xE0\x0D\x14\x08\x0D\x60\x05\xD2\x4E\x2C\xC2\x4C\xCB\xCB\x39\xC7\xDE\xD0\xD4\x4B\xDD\xDA\xED\xD5\x32\x1A\xD5\x42\xF0\x5C\xF9\xE1\xC5\xCA\x3E\x20\xD2\xDA\xD8\xA4\xE6\xE3\xDC\x63\x6B\xED\xDF\xD9\xDC\xCF\xD1\x76\xDD\xE5\x79\xFB\xDD\xDF\xDF\x69\x01\xEB\xE6\xE1\x88\xCA\xEC\xE1\xF4\x8F\xD4\xF2\xE4\xDD\x94\xEE\x16\xE6\x08\x98\xDA\xE4\xE0\xF8\x9E\xE0\x00\xEA\x08\xA2\xE4\xD8\x8D\xE9\x60\xE8\xE0\x6F\xEA\x6A\xEF\xE1\xEF\xEC\x82\x35\x75\x40\x37\x7C\x69\xDF\x74\x09\x6A\x05\x28\x80\xEE\x53\x66\x80\x17\x33\x02\x78\x02\x24\x7B\x02\x83\x66\x81\xE4\x63\x6C\x79\xF7\x6E\x7B\xF9\x50\x7E\x71\xE9\x51\x77\x39\x8C\x29\x7F\xFA\x7C\x68\x3E\xEE\x5E\x7F\x7D\x87\x69\x72\xD8\x0B\x7D\x70\xE9\x50\x75\x7A\x75\x63\x36\xFA\x59\x7D\x7D\xEF\x5D\x72\x7E\xA1\x62\x04\xC8\x4D\x79\x7E\xD7\x3B\x7C\x75\xD0\x7E\x7F\x1C\x32\x70\x66",
"\xDA\x4A\x6A\x6A\x14\x87\x7B\x57\x18\x0B\x24\x26\x88\x8E\x64\x4A\x93\x61\xC5\x17\x65\x08\x37\x24\x0D\x63\x02\x3D\x62\xC8\x13\x80\x8B\x99\x6A\x60\x04\x40\x08\x82\x40\x0A\x85\x69\x20\x08\x31\x0D\x73\x35\x2C\x19\x41\x65\x20\x36\x9C\x89\x0F\x66\x91\x2C\x1A\x8A\x34\x0C\xAB\x43\x1B\x25\x77\x9B\x6B\x1B\xF1\x89\x30\x35\x96\x81\x04\x6F\x9E\x68\xC8\x1D\x80\x73\xB7\x32\x89\x8D\x93\x77\x7B\x0C\x97\x79\x73\xCD\x4D\x02\x01\xC5\x78\x30\x1F\xF3\x8E\x8E\xB0\x7A\x83\x70\xA0\x7C\x84\xEC\x67\x88\x91\xD6\x6F\x72\x04\x3A\x03\x70\x20\x85\x81\x8B\x41\xAE\x81\x6E\x86\x9D\x8D\x22\xB2\x83\x85\xED\x40\x72\x70\x84\x62\x80\x40\x04\x8E\x77\x28\xA2\x89\x20\x64\x95\x96\x17\xAE\x05\x06\x08\x81\x22\x82\xA4\x9E\x8A\x05\xCB\x76\x7E\xB3\x68\x6B\x83\x79\x24\x7E\x07\xB0\x82\x85\xEC\x64\x86\x6F\xAF\x96\x85\xF8\x2B\x83\x7C\x42\xA6\x78\x84\xD6\x6C\x94\x0D\x8D\x98\x84\xF0\x73\x7D\x7E\x9A\x9A\x7E\xEA\x40\x89\x98\x21\x84\x8F\x38\x3A\x21\x8C\xEF\x4F\x80\x8E\x4E\xB4\x8C\x61\x05\x30\x9F\x1E\xEE\x9A\x8C\x8A\x56\x64\x0E\x55\x84\x0F\x05\x2B\x2B\x9E\x80\x1B\x8D\x8C\xF4\x81\x72\x0F\x60\x8B\x55\xDD\x2F\x8F\x59\x08\x28\xA0\x00\x6F\x8E\x80\x5B\x2B\x26\xA1\x7A\x85\x6B\x30\xFA\x62\x45\x16\xA5\x78\x04\x9F\x2E\x29\x33\xFA\x69\x08\x2B\xA0\x38\x3F\x74\x12\x9B\x28\xB0\x63\x92\x44\xA4\x08\x08\x8F\x91\x90\x5A\x13\xA2\x05\x17\x16\xA6\x83\x19\xA1\x36\x22\xEB\x74\x09\x8F\xA3\x09\xA4\xDD\x83\xA7\x71\x25\xA4\x8E\x94\x90\x97\x8D\x16\x82\x04\x0A\x22\x9A\x27\x29\xB4\x0A\x6F\x29\x1A\x84\xA3\x01\x27\x44\x9D\x30\x05\xA0\x2E\x62\x30\x0C\x56\x61\x0B\x95\x15\xAA\x8F\x52\xBF\x8F\x1B\xBE\xA3\x65\xAC\xA0\x6E\xA9\xA6\x7C\x2A\xEA\x47\xAF\x8C\xD3\x71\xA0\x76\x43\x94\x28\x51\x69\x9B\xA8\x80\x0D\xAA\xAA\x50\xAE\x26\x54\x8E\x8B\x07\x95\x35\xA8\xAB\x26\x30\x06\x05\xE0\xA0\x6C\xB1\xA9\x60\x04\x65\xA0\x6F\x59\xB1\x7A\xAC\xAB\x02\x30\x08\x71\xAB\xA1\xD1\x32\x90\x00\x5A\x87\x3E\x9E\x54\x96\x89\xBE\x02\x29\x5F\x7F\xB0\x63\xA0\x40\x0D\xAC\x00\x6F\xA9\xAF\xC4\x8E\xAE\x05\x32\x17\xAD\x41\x22\xBD\xAB\xBC\xBB\xAA\xAA\x61\xBD\x2B\x57\x20\x61\xB0\x8C\x8C\x2E\x29\x68\xA0\x05\x61\xC5\x26\x24\xCD\x9C\xB6\x22\x30\x0C\x39\x41\x3A\xBF\xB2\xA3\xB9\x9C\x5B\x01\x3D\x33\x16\xD9\xA0\x8C\xDB\x91\xAE\x24\x31\x1E\xB2\x60\x31\x0E\x04\x1A\x3E\x13\x25\xCF\xB8\xAE\x45\x31\x07\xB4\xE4\xA6\x77\x3B\xE1\x27\xAA\x08\x5E\x03\x70\xBE\xA0\x07\x3E\xF9\x36\x89\x6C\xE7\x32\x30\x65\x90\x75\x3D\xEB\x65\x08\x1E\x63\x0C\x0D\x3A\x33\x09\x0D\x76\x0D\x32\x1C\x1B\x7C\xAA\x9D\x14\xB8\x6C\x80\x92\xA9\x7D\xCB\xB5\xBB\xE9\x97\xB8\x3C\xE2\x3A\x6F\xF8\x5E\xB0\xBC\xFD\x23\xBB\x3E\xE5\xB6\x98\x08\x68\xB9\x7B\x8E\xB5\x29\x3C\x20\xB4\xBE\x71\xF2\xA8\xB8\xE5\x88\xBE\x81\xAA\x0B\x25\x86\xD2\xB9\x0F\xFB\x80\xB3\xB9\xFF\xB9\xBA\xDE\x5C\xBF\xC3\xBC\xA6\x75\xC0\xE2\xB1\x74\x79\xA6\x26\x95\x8B\x8C\xC2\x6F\xEA\xAC\xBE\x7B\xF0\xB2\xBE\x47\xBF\xA4\xBF\x5F\xA0\xC4\xD8\x58\xB1\xC0\x16\xA5\xC0\xB7\x27\xD8\x3E\x81\xAA\xC8\xC0\x16\xE6\xB9\x6E\x2F\xC2\x06\x83\x95\x20\xBC\x9C\xBD\x0E\xB3\x45\x6A\xA2\x40\x0A\xAC\xA1\x18\x15\x13\x25\x57\xD1\xA3\x65\xCA\x74\xA2\x97\xAD\xC0\xA6\xAF\xB2\xA6\x36\x9C\xAE\xA3\xD6\x37\xA2\xA4\xF3\x87\x90\x1D\xA9\xA0\xA8\x2E\xED\xA2\x87\x47\xCE\xB4\x68\x1B\xA2\x05\x9A\xA6\xCE\xC9\xE0\x7A\xA6\x24\x81\xA4\x0C\x28\xF0\x62\xCA\x01\x34\xC9\xD1\x20\xBF\x03\x95\x05\xD2\xCB\xC7\x21\xAB\x50\xA0\x69\xBE\x93\x06\xA8\xA9\x22\x13\xC3\x42\xCB\xB6\xC3\xE9\x96\x6B\xC3\x05\x38\xD1\x69\xD3\xBD\xBF\x0E\xE1\xC2\x3C\x20\x7E\xC4\x81\xC2\xC9\xC5\x21\xAB\xC6\x22\x71\xC9\xCB\x92\x90\xC7\xCC\xC2\x6C\xC8\xC7\x3F\xDE\xD3\x8E\x80\xC4\x0F\x50\xE4\xC3\xD4\xE1\xA4\x0F\x81\xDA\x36\x25\x54\xF0\x09\xBD\xEB\xAD\xBF\x7B\xF1\xBF\x09\xF9\x84\x72\xD2\xF6\xBA\xB6\x40\x3C\xBB\xB8\xC8\xB8\x9E\x8A\xC0\xA0\x22\x70\x9B\xDD\xC2\xCC\x88\xDA\x30\x32\x15\xD1\x1E\x32\x0D\xB8\x5C\x2B\x26\xDB\x1C\xD2\x05\xA7\xB2\x0F\xD2\xED\xAB\x05\xBB\x3A\xDF\xB8\xA9\xBA\xD4\xC8\x5E\xE8\xD2\xC1\x49\xD5\x0A\x1B\x53\x34\xBF\x57\xE6\x22\xDC\x39\xD7\xDD\xB9\xFA\x6D\x04\x74\xD6\xB8\x6C\x28\xCC\xDE\xA9\xC5\xCF\xDD\x53\x8B\xC7\xD7\xCE\x95\x0E\x18\x62\x35\x61\x56\xFD\x0B\xBF\xF7\xDA\xAB\x72\x99\xB5\x3E\x0A\xD6\x21\xDB\xE5\x36\xE3\xB6\x8E\x84\x15\x95\x1D\xE1\xDC\xE3\xDB\xDE\x08\x7D\xD1\xD7\x18\x01\xC9\xD7\xBB\xC9\x9E\xAF\xA3\x8A\xE0\x86",
"\xE1\x0E\xE1\xF6\xD7\xE1\xC8\xB3\xD2\xC4\x11\x27\xDD\xE4\x27\xE3\xCB\xC0\xEE\xD9\x0F\x2F\xE7\xB8\xE1\x7A\x72\xDC\xBD\x84\x77\x96\x80\x39\x93\xA7\x7C\xCC\x8E\x40\x6E\x80\xA0\x35\xF5\x9A\x06\x74\x0B\x25\xD4\x88\xDB\xCE\xA7\xC2\xA6\x92\x40\x10\xCD\x26\x99\x80\x6D\x54\x94\x95\x7F\x7A\x61\x94\x08\x7A\xC9\x88\x2F\xB1\xCE\xEB\x9D\x81\x87\x4C\xCE\x9E\x95\xEE\x70\x95\x0F\xD7\xD5\xC1\xC6\x93\xD7\xC2\x19\x18\xD2\x20\x9A\xD6\xBD\xA7\xA6\xE4\xE7\x1E\xDC\xBC\xB5\xA8\xA0\xE3\xBA\xA9\xE9\xC0\x83\xC9\xC9\xC6\xC2\xD4\xC5\xB1\xB6\xC4\xDA\x0F\xF6\xBA\xE4\x8C\x60\xF2\x89\x82\xF8\xE5\x76\xFA\x23\xE5\x0D\xDF\x28\x93\x91\xC7\xD9\x8A\xF4\xEF\xE2\xDA\xDC\xD9\x0C\x1F\xE5\x20\xD2\xD4\xD8\xDF\xB1\xC4\xDD\xDF\xB5\xDC\xDE\x7F\xFE\xBC\xF2\x3A\xE0\x07\xA9\xF9\x08\xF2\xBD\x53\x0D\xE5\x71\x2F\xE6\x93\xB1\xEB\xDB\x99\xE0\x04\xC7\xAC\xF6\xE6\xEB\xB2\xDA\xDD\xCA\xFB\xE7\xF2\xF0\xC0\xEA\x08\x42\xE2\x33\xCD\x71\xEF\xE2\xCA\xC1\x20\xB3\xF7\xDE\xD9\xDF\xAB\x23\xDA\x3A\x22\xDC\x18\xC1\x50\x20\x57\x45\xAF\x9E\xD1\xC0\x01\x67\x5F\xF7\x62\xAB\x58\x89\x20\x1D\x74\xDA\x51\x92\xE7\xDE\x75\x88\x27\xE8\x55\xEA\x97\x1A\xC0\x6D\x76\xA4\xD6\xED\x8E\x34\x13\xE9\x41\x7A\xFA\xA4\x8B\x3C\xA5\x92\x7A\x39\x75\x38\x4A\x49\x68\x7A\x18\x9E\x41\x76\x70\x64\x76\x5D\x42\x31\x67\x71\x50\xE8\x3B\x76\xB6\x7D\x76\x27\x4D\x07\x45\x70\x00\xF0\x78\x16\xFF\x71\x38\x4A\x71\x10\x4C\x74\x52\x7C\x6E\x40\xFA\x72\x10\xFC\x79\x66\xF2\x71\x54\x02\x8B\x75\xC6\x4B\x49\x56\x7E\x49\xA1\x62\x76\x0A\x86\x34\x51\x4D\x80\x2B\x8A\x76\x63\x6A\x3D\x25\x41\x4D\x9D\x78\x10\xB7\x5B\x6D\xA1\x70\x5A\xA4\x72\x10\xA6\x79\x7D\xBE\x70\x7C\xAD\x72\x79\xAF\x75\x7C\xB1\x73\x7B\xB5\x7B\x37\xB8\x7D\x70\xBB\x77\x63\x11\x79\x6F\x17\x72\x72\xE7\x66\x84\xC4\x71\x70\x84\x7D\x6B\xC9\x7B\x3E\xCC\x7E\x06\x9B\x3C\x7D\x00\x0E\x7D\x82\x16\x54\x01\x25\x10\x65\x84\x7E\x52\x47\x4F\xF9\x41\x7D\x00\x1A\x5B\xC3\x5E\x68\xF7\x48\x59\x7E\x67\x1C\x80\x60\x10\x82\x60\x33\xCD\x57\x68\x05\x1A\x87\xFD\x79\x07\x8A\x64\x54\x63\x87\x4F\xA1\x69\x54\xCF\x79\x07\x30\x0C\x58\xB7\x33\x57\x46\x5D\x33\x72\x04\x07\xE1\x7D\x19\x20\x3F\x86\xB8\x5E\x03\x85\x80\x03\xC4\x1C\x11\x9F\x5C\x88\x74\x05\x87\x00\x0A\x50\x43\x3E\x54\x94\x8E\x79\xF6\x58\x88\xC7\x56\x69\x8B\x8A\x31\x8D\x8F\x88\x01\x11\x89\x8D\x71\x8A\x3A\x85\x8A\x1D\x67\x89\xB0\x8C\x5C\x9A\x8C\x89\x9E\x80\x02\xAD\x85\x88\x32\x04\x8A\x1A\x7C\x6D\xA7\x8B\x31\xAA\x82\x34\x21\x37\x7A\xAE\x88\x22\xB0\x82\x03\xB2\x8D\x8B\x3C\x38\x8A\x9B\x8B\x12\xB7\x84\x8C\x60\x82\x86\x70\x87\x31\x86\x15\x10\xD5\x88\x86\xCE\x6A\x89\x6C\x80\x00\xBA\x5C\x8A\x68\x8E\x03\xD1\x80\x8B\x46\x5F\x00\x2B\x14\x8E\x1A\x76\x54\xCB\x8B\x31\x93\x51\x10\xF9\x2F\x89\x81\x87\x31\x3E\x05\x81\x17\x8E\x7F\x7C\x6C\x01\x2B\x16\x8F\xEC\x49\x81\x75\x4F\x8B\x8D\x8D\x4F\x05\x1E\x8F\xDE\x8D\x74\x25\x82\x8F\xF5\x71\x7F\x5F\x74\x06\x4E\x45\x10\x09\x94\x82\x07\x99\x8E\x8D\x87\x33\x05\x10\x91\x9F\x82\x90\x07\x9E\x03\x73\x88\x19\x04\x9C\x4E\xD9\x8C\x8C\xEB\x80\x10\xED\x83\x8C\x40\x57\x91\x68\x1B\x8D\xBC\x53\x68\x9A\x89\x8C\x00\x03\x91\x97\x5C\x8B\x8A\x5A\x4B\x12\x39\x91\x2D\x96\x3C\xBB\x44\x03\xBE\x40\x10\xC0\x4E\x92\xC8\x3C\x65\x18\x49\x82\x30\x41\x67\xCC\x40\x81\x36\x80\x4D\x6E\x72\x4D\x2A\x42\x60\x2F\x5F\x42\xC8\x41\x43\x77\x3B\x4D\xEE\x3C\x39\xDE\x49\x43\xC5\x48\x3F\xA7\x3E\x43\xE3\x40\x76\xFF\x35\x44\x87\x50\x93\x0C\x96\x52\x1B\x80\x10\x1D\x86\x7F\xF2\x7C\x4B\x79\x45\x10\x63\x9D\x87\xFA\x86\x82\x98\x41\x95\xA6\x35\x80\x75\x17\x80\xA0\x44\x54\xC1\x4C\x80\x0A\x6C\x96\xAB\x4B\x94\x11\x87\x83\x43\x94\x38\xF5\x54\x91\x26\x5A\x55\x71\x9F\x57\x73\x9E\x80\x34\x86\x97\xEC\x3C\x4D\x0F\x7D\x29\x08\x1C\x92\x81\x46\x40\x28\x90\x40\x26\x1F\x20\xDD\x29\x11\x95\x82\x2D\x48\x1A\x13\x02\x21\x02\xD0\x2F\x0F\x85\x81\x03\x94\x90\x8B\x02\x23\x02\x99\x9A\x8B\x9D\x9A\x71\x02\x25\x02\x99\x91\x8E\xE7\x87\x4F\xA3\x9F\x79\x79\x02\x20\x27\x09\x99\x5A\x9C\x97\x74\x4D\x98\x58\x9F\x98\x2B\x19\x02\x99\x92\x92\x16\x14\x9B\xE8\x42\x18\x02\x2B\x02\x99\x9F\x01\xF3\x2C\x2A\xEB\x2F\x0F\x02\x2B\x2E\x90\x99\x9C\xCA\x90\x21\xC5\x9A\x59\x7B\x2B\x9C\xEB\x28\x9C\x73\x77\x1D\x01\x10\x43\x02\x2A\x98\x7F\x9F\x15\xFF\x05\x9C\x88\x95\x10\xC3\x9B\x9C\xE0\x91\x27\xC5\x9B\x2E\xD2\x2B\x9C\xCF\x9A\x9C\xBC\x98\x19",
"\x96\x97\x44\x2D\x3C\x4E\x5E\x30\x27\x03\x24\x92\xD5\x99\x94\xE9\x38\x9A\x00\x0F\x4C\x26\x44\x06\xD8\x98\x93\xDA\x9B\x27\xFF\x0B\x27\x9A\x50\x86\xDB\x9B\x12\xF0\x95\x86\xCC\x90\x2A\x00\x24\x20\xEB\x2B\x2A\x15\x83\xA0\x08\x1D\x91\x00\x0E\x01\x0A\xA5\x19\x05\x12\xA1\x0C\x2B\x2E\xDD\x92\x10\x09\x97\xA0\x09\x5D\x44\x13\xAA\x2B\xF4\x77\xA1\x90\x23\xA2\x20\xA8\x10\x2A\x08\xA0\xE1\x90\x14\x14\xAE\x98\x16\x17\x9D\xEC\x9B\x98\x51\x40\x9F\x02\x22\x9F\xCD\x14\x9F\x8A\x46\x9F\xF8\x9F\x4A\xFB\x92\x93\x12\x3A\x59\x27\xA9\xA2\x03\x4F\xA2\xD9\x94\x07\xDF\x90\xA4\x63\x4B\x4E\x31\x96\x90\x26\x52\xA3\x85\x1D\xA4\x87\x13\x83\xD9\x43\x1D\xDF\x94\x28\xED\x31\x9B\x1E\x87\x7F\xFF\x9E\x79\x02\x12\xA0\xEB\x24\x1C\x16\xAA\x2F\xEB\x20\xA1\x5F\xAC\xA1\x05\x1C\x89\x1B\xA1\x10\x0E\xA5\x10\xEB\x2A\x87\x64\xAB\xA5\x24\xA0\xA6\x2B\x19\xA1\x01\x17\xA6\xE2\x94\xA0\x09\xA2\xA2\xED\x27\xA7\x70\xA4\x25\x48\xAC\x2C\xF7\x88\xA2\x46\xA9\x9E\xA9\x1E\x9B\xEC\x96\x3B\x05\x95\x76\x12\x3C\xA4\x08\x14\xA3\x00\x0F\x93\x32\x48\xA3\x12\x8A\x9F\x42\xAC\x9F\x74\x0A\x59\xF8\x86\xA4\x3B\xAC\x40\x51\x45\xA4\x46\xA6\x74\x48\xAB\x95\x74\x4A\xA8\xD6\x8E\xA4\x00\x04\x97\x0F\x8F\xA8\x6F\xA9\xA3\x6E\x76\xA5\x60\x97\x90\x90\x99\xA6\x10\x2C\x58\xF0\x93\x9E\x5A\xA1\x10\x72\xA7\x20\xEB\x22\xAA\xCB\x6B\x1C\xF3\x98\x4D\x4A\x92\x19\x90\xA8\x97\x81\x39\xA9\x88\xA9\x32\xC4\x9F\xA1\x49\x1D\xA9\x7C\x2A\xAC\x82\xA9\x1B\x2D\xA5\xA8\x41\xAE\x9E\x06\x4A\xAB\xD2\x7C\xAB\x35\xAE\xAB\xE9\x33\xA5\x01\x1D\x3E\xC4\xAB\x80\x29\x39\xA5\x0C\x20\xA0\x6F\xAD\xA6\xD9\x2B\x30\xC8\xAE\xA6\x08\x1C\xA5\x71\xAE\xA1\x78\xA5\xA6\xEC\xAB\xA7\xB6\x18\x10\x63\xA8\xA6\x61\xAB\x12\xF3\xA5\xA7\x1F\x2A\xA7\xE4\xA0\x10\xD2\x26\xA0\xF4\xA3\x9D\xB8\x4B\x12\xEB\x2F\xA3\xC9\xAD\xA9\xCD\xA8\x1C\xCF\xA9\x98\x93\xAC\xA3\x29\x34\xAD\x6D\x86\xAD\x8D\xA6\xA3\x32\x4A\xAD\x00\x1C\xAD\x0B\xBA\xA9\x5E\x4E\xA3\xCA\xAD\xAD\x30\x8E\x45\x9C\xAD\xA9\xAC\xAA\xA4\xA1\xAA\x9C\xD5\x82\x10\xD5\x86\xAA\x83\x92\x19\x14\xB0\x00\x55\xAF\xA9\xB2\x9A\x46\xE0\xA6\x8C\xE9\xA7\xAE\xE5\xA6\x1A\x34\xBE\x91\xF6\xA7\xB3\x61\x83\xAE\xFF\xA6\xB3\xF2\xAA\xB3\xB7\xA0\x00\x74\xA7\xAC\x1D\xA8\x10\x43\xB0\xAB\x66\x28\x10\xFE\xA8\xAF\x05\xB6\x86\x3A\xBC\xA0\x02\xBF\xA7\x79\xA6\xB0\x2B\xA5\x9B\x09\xBD\x9E\x58\xB0\xA3\x5E\x4E\xB0\xDC\x80\xB1\x8E\xA2\xA5\x2B\x14\xA5\x99\x3C\xB1\x5E\x36\xA9\x1B\xB7\xB1\xC5\xAF\x15\x1F\xB6\xA4\x21\xB8\x81\x7C\x6C\xB5\x25\xB1\x10\x27\xB2\x98\x51\xA0\xAC\xA9\xA1\xA9\x6D\xB4\x8F\xF7\x7F\xAA\xC5\x92\xAB\x51\xBD\xAE\x02\x1A\x59\x41\xB7\x9C\x76\xA9\x9C\x8C\xAF\xB5\x2A\xB1\xB6\xDB\xA3\xB6\x68\xBE\xAD\x5F\x10\xB8\x68\xA2\xB8\xCA\xA1\x9D\xCA\x90\xA1\xF9\x22\x4E\xB1\x11\x1C\x2E\xAA\xB0\xD2\xA1\x45\xCA\xA0\xAF\xFB\xA0\x00\xAB\x2F\xB9\x48\xB1\x27\x7B\x20\x86\x84\xBA\xB4\xA7\x22\xB3\x4E\xB0\xB2\x2E\xB7\xA5\xF2\x7B\xB6\x40\xAA\x9B\xAD\x99\x9C\xA5\xB4\xB4\x4D\xB0\xA4\xD2\x99\x9C\x07\xBB\x9E\x9C\xB9\xB5\x43\xA1\xB3\x10\x22\xAE\xC9\x93\xB0\x85\xB1\xA8\x55\xBD\x9B\xB6\x9F\xBB\x86\xAD\xB9\x19\xBB\x12\x04\xB0\xA4\x64\xB6\x40\xB2\xB9\xA2\x79\xBD\x4E\xF7\x70\xB7\xA4\xA8\xB2\x75\xBE\x06\x2B\xBD\xB2\xEF\x77\xA8\x7A\xB2\x7F\xC2\xBC\x54\xCA\x9B\x2E\x97\xA5\x23\xCC\xA9\xBC\xEA\x94\xA8\xCC\xB1\xAD\x49\xA9\xB6\x95\xA2\xB5\x98\xAD\xB8\x1D\xB2\x31\xD5\xB1\x9E\xD7\xBA\x8F\xDA\xB8\x10\x73\xB0\xA5\xBF\xAE\x06\xC1\xA2\x94\x81\x3B\xBF\x7C\x6F\xB9\x02\x27\xBB\xB7\xB4\x1C\xA4\xBE\x9F\x7B\x2C\x89\xA9\xB5\x10\x22\x0B\xBA\x81\xBB\x12\x13\xCD\xA9\xB4\xB9\xBF\xE0\x95\x89\xE5\xB2\x6D\xE7\xBB\x1A\x08\x14\xBC\x05\x10\xA1\xCB\x94\xBB\xBB\xB9\xBB\x74\x21\x10\x31\x52\x20\x95\x8A\x9C\x0A\xCB\x2E\xDB\x8D\xC0\x04\x2B\x27\xE6\x8C\xBA\xA1\xB6\x9F\xA1\xB2\xA6\x3A\xBB\xA6\x3A\xBE\xA5\x40\xBF\xAE\xA1\xB6\xA6\x7F\xB5\x10\x24\x04\xC1\xE6\xB8\x10\x45\xCD\xA9\x95\x8A\xC1\xCB\x9B\x99\x1D\xCD\x58\xB5\xAC\xB4\x7E\xA8\x10\xF0\x47\xC3\x3C\xB2\xC5\x64\x1F\xB3\x90\xB8\xB3\x5A\xC0\xBA\xB6\xA0\xC4\x3D\xBE\xAE\x46\xB3\xC4\x1A\xA6\xC4\x6E\x50\xC6\xE1\x95\x89\x27\xC5\xC1\xAF\x80\x10\x01\x7C\xC2\xA2\x8B\x5C\x0A\xCF\x9D\x10\xAF\x9D\xB7\xB5\xA0\x3A\xBD\xAF\x4F\xBD\xA7\x0B\x2B\x27\x41\xB7\xC1\x46\xAA\xC6\xCA\x92\x69\x7E\x5F\xB8\x51\xCB\x59\xB0\x80\x03\xB6\xB4\xAB\x8B\xA3\xB9\xEB\xBE\xB3\x00\x03\x5B\xBE\xB6\xC3\x47",
"\xCC\x9A\x30\x0F\xC4\x4F\xC5\xC3\x6C\xCE\xC5\xE6\x21\xA2\x9C\xCB\xB3\x33\xBB\xC5\xC5\x19\xB3\xA2\xCA\xC3\xA2\xC1\xB4\x47\xBB\x2E\x42\xC5\xA2\x44\xCA\xB8\x54\xB0\xC9\x92\xCE\xBE\x94\xC7\xC6\x1A\x70\x03\x9A\x59\xC4\x81\xC1\xC7\x79\x5C\xC4\x83\xCA\xCB\xD3\x5F\xC4\x8C\x5A\x59\xB7\xBB\x2E\x55\xC1\xC6\xE8\xAF\x2A\x3D\xC4\xCA\x9F\xC6\xCA\x9F\xC8\xCA\x3A\xBB\xCA\x6A\xA8\xC6\x00\x0C\xCB\x90\xCA\xA2\x0B\x1D\x10\x55\x14\x5B\x57\xBB\xC9\x9B\xCE\x54\x9A\x53\xB4\x4D\xCE\xCB\x86\x8B\xC6\x95\xCB\xC9\x6F\xC7\xC8\x3B\x81\x03\x73\xC0\xC2\xDE\x9A\xB3\x78\xC2\xCA\x7A\xC2\xCA\x50\xB9\x9C\xD4\xC1\xAF\xF6\xC1\xCB\xCB\xB3\xCB\x88\xC5\xCB\x7F\xCA\xAC\x82\xC9\x9C\x84\xCA\x5A\x21\x8C\xCD\x95\xCE\x54\x08\xC3\x20\x0A\xCF\xCE\x46\xAB\x27\xD2\x24\xC2\xBD\xCD\xC6\x96\xCC\xB5\xC1\x8E\x19\x61\x69\x3E\x89\x5D\x51\x64\x06\x53\x74\x04\xBB\x0A\xC1\xCF\x0B\xD0\xA8\x94\x5E\xCF\xE2\xC0\x03\x12\xD7\x7D\x2A\xC5\xD1\x8A\x42\x69\x76\x60\x52\xB4\xB8\xC5\x71\x23\xCF\x46\xA4\x9E\xEC\xC0\xA4\x2D\xC8\xC0\x2F\xCE\xC9\x07\xD6\xBA\x33\xCC\x23\xC7\xB1\xBA\x3C\xC2\xCA\x38\xC6\xCC\x59\xC5\xA1\x3A\xBC\xCC\x53\xC5\x10\x26\x06\xC6\xFB\xC8\xD4\x22\xD0\xD1\xF6\x55\xCF\x0F\x2A\x8B\x4F\xC0\x91\xEA\xB2\xCA\xC4\xCA\xB3\x41\xDE\xD2\xA3\xCD\xC5\x39\xCA\xCC\x47\xD2\x10\xF7\xAB\xAC\x10\xD0\xD6\x4D\xDC\xBA\xF6\x54\xCE\xB4\xCC\xBA\xE7\xC3\xD6\x05\xD8\x6D\xEB\xCE\xBF\x4A\xD7\xBB\xCE\xC2\xCA\xD0\xCF\x20\x7E\xCB\x12\xB8\xC4\xD3\xE2\xC1\x03\x68\xDC\x2E\x4D\xB0\x7C\x70\xCE\xD4\xCB\x5B\xC8\x3A\xBD\x95\x36\xDE\xC0\x3C\xD9\xAF\x56\xD6\xAE\x40\xD7\xC5\xB8\xB6\xCD\x44\xD5\xCA\x5E\xD5\xB3\x4C\xD1\xC2\x87\xC9\xD4\x4A\xCB\xD7\x50\xDB\x20\x52\xDB\x27\x54\xD9\xB4\x9F\xCF\xD3\x9F\xC9\xD5\x8F\xD3\xD4\x64\xD2\xD9\x5C\xD4\xD9\xA7\xDE\x22\x87\xC1\xD6\xE1\xC2\xD8\xC8\x5D\xD7\x92\x6B\xD6\xFA\xCB\x83\x32\x0F\xD6\xA3\xA6\xD9\xA7\xC2\xCD\xB7\xB5\xD7\x7D\xCB\xAE\x48\xC5\xD6\xDD\xCB\x5C\x7D\xDB\x9A\x80\xD8\xCE\xB3\x89\xA2\x0A\xCE\x9C\xCA\xAF\x9D\x1E\xD3\xBB\x73\x7F\x46\xD2\x21\xBD\xD6\xBF\xBA\xAD\xA6\x52\x7D\xD9\x58\xD6\x90\xAD\xB3\x42\xBE\xF7\xBF\xAD\xDC\x9E\xCA\x1F\xD3\xB5\xAD\xB6\xA4\xB4\xB3\xDD\xCA\xA6\xC0\x7B\xBF\xC9\xFF\x0B\x8D\xFE\x8A\xBB\x20\xD1\x10\x4B\xB0\x9E\x2D\xDC\xDE\x0A\xDA\xD7\xE4\xD7\xA4\x18\xC1\xDD\x45\x32\x2D\x28\x0A\xAC\xF6\x98\x86\xD2\x28\xD9\xB9\xC0\xDB\x17\x72\x2D\x79\xD9\xA2\x9B\x92\x2D\x80\xC8\xDF\x66\xD2\x55\x25\xDC\x19\x27\xD3\x67\x8A\x47\xD1\x65\x6C\xD2\xFC\xD0\x33\x1D\xDA\xAF\x0A\xE1\xDF\x9E\xAB\xDF\x7C\xAC\x4E\xFE\xD0\xE0\x6F\xA2\xE0\x2B\x14\xE0\x0E\xE3\xDC\xF7\x68\xE0\xC2\xDD\xD6\xC8\x5C\xE0\x2D\xE9\xD6\x4E\x51\xE1\x05\x1D\x19\x31\x59\x3E\x2A\xDA\xD1\xF5\xDA\xC0\x30\xD0\xA4\xAB\x9A\xDF\xE6\xD9\xE1\xC7\x13\xE2\x9D\xA1\xE0\xEF\x84\x07\x03\xE1\xE3\x4B\xD9\x7D\x2C\xE9\xD9\x06\xED\x61\x30\xEE\xE4\x0F\xE9\x57\x2E\xC1\xDE\x63\xCD\xA9\xE7\x99\x9C\x89\x53\x7B\x81\xD3\xE5\xD3\x5C\xB5\x89\x21\x10\xED\x16\x9F\xAB\x6D\x64\x9B\x9A\xD5\xFF\x0E\xDB\xE1\x99\xE5\x90\x9B\xE5\x04\x75\xBB\x6C\xD2\xE3\xCB\x50\xE6\xAB\xBD\x1E\x13\xD8\x78\x33\x64\x6C\x72\x07\xE6\xCA\xA7\xD3\x54\xC9\xD3\xA1\xBF\xC4\x1B\x01\xD7\x94\xB8\x10\x6C\xA2\xD4\xDD\x7E\xD8\xEB\x2F\xDF\xBA\xDA\xCF\x8C\xE5\xE0\x5E\xEB\x6D\x9B\xD7\x20\x46\xE3\x8D\x60\x15\x9C\xDF\x99\x01\x84\xE4\xA1\xAB\xDD\xD5\xA9\xD7\x20\x77\xD8\x10\x28\xED\xE1\x4F\xE2\x03\xC5\xD0\xA8\xC7\xD1\xE7\x4B\xE8\x6D\x84\xD2\xCA\xC5\xC7\xD0\x0A\xCB\x27\x83\xED\xE8\x3E\xD6\x68\x58\xDA\xE8\x2B\x1F\xE8\x02\x12\xC2\x02\x1A\xEB\xA4\xE1\xE9\x32\x03\xE9\x03\x25\xE9\x16\x16\x54\xB8\xD2\x10\x9A\xE4\xEB\x88\xEB\xD5\x91\xDB\xCC\x93\xD0\xEA\xC0\xD5\xD9\x90\xEA\xE2\x17\x77\xEA\xE4\xD9\xEA\xB5\xD7\x8C\xCA\xDD\x9C\x2B\x1D\x01\x8E\xCC\xCA\x0F\x26\xB9\x01\x1C\xBD\x65\x02\x20\xEA\xD2\x7F\x09\xC5\x9C\x9A\xC1\x10\xE9\xB0\xE8\x81\xE7\xDF\x29\xAE\xDC\xD2\xCF\xDA\x91\xEC\x99\x16\xCA\xE4\x3B\x84\xD2\xCA\x93\xD1\x37\xE5\xE1\x73\x78\xD1\x3A\xE2\xE4\x98\x1B\xE1\xAA\xBD\xA9\xF2\xE7\xE5\xD3\xEE\xE2\xD3\x51\xE5\x09\xF2\xE7\x79\x54\xE3\x02\x16\xE3\x28\xD2\x43\x39\xE7\x67\x3B\xE5\x9C\x3D\xE9\xA2\x0C\xD3\xEF\x0F\xD5\xEF\x0C\xF9\xE2\x0A\xF6\x88\x40\xAA\xC0\x3E\xC8\xE5\xCA\xAE\xE6\x3C\x7D\xE5\xD4\xEB\x6D\x74\xED\xE8\xED\x1B\x9A\x5D\x82\xD5\xC5\x96\xD4\x1A\xF7\xF2\x73\x7C\xE5\xC8\xDD\x8B\x2D\xFC\xDA\xEC\x10\x07\x38\xAD",
"\x84\xBA\x7A\x8B\x46\xAE\xE7\x7B\x8E\xEE\x68\xEB\x27\x20\x0F\xC1\xE1\xBA\xEC\x69\xD0\xE4\x40\xA4\xEC\x79\x06\x54\xC2\xE2\x20\xF5\xD1\x9E\xCB\xDA\xD4\xE6\x9E\xE1\x00\x0D\xEE\xFA\xB6\xDD\x22\xBA\x46\xD9\xD3\x77\xDB\xDF\xBE\xDD\xDE\xBC\x12\x3A\xC0\x41\xB2\xEC\x32\xD8\x10\x5C\xF0\x9E\xE7\xEE\xAA\x7D\xEA\xEE\xF4\xB6\xF4\xCB\xEF\x0F\xF0\xE1\x9E\xF0\x92\x2D\xAE\xDD\xF1\x2B\xF2\x03\x4D\xED\xF0\xAB\xEF\xE2\xF7\xE2\xE5\x2B\xFA\xEF\xC9\x9C\xEF\x13\xF3\x1D\x16\xE9\xD1\x16\xF2\xF0\x68\x14\xF0\xE5\xD0\xA4\x79\xFF\xEC\x1B\xC2\xCE\x7E\xF8\xD7\xF8\xE3\x8B\x1F\xFF\xEB\x85\xF0\xF1\xC1\x53\xE1\x1A\x59\xD2\x9E\x7B\xD2\x37\x57\xF1\x04\x29\xF1\xE1\x97\xF0\xCD\xE0\xF2\x0E\xF7\xE0\x98\xF4\xF8\x21\xF6\xEF\x08\x1D\xE0\x9C\xF1\xF2\x8A\xC4\xF7\x68\xE4\xDA\x74\xFA\xC0\x02\x24\xFB\xB8\xFD\xEA\xFA\x27\xF7\xE0\x9B\xF1\xB3\xF9\xF9\xB5\xCE\xF9\x1E\xC0\x10\xFD\xE2\x43\x8B\xF1\xF0\x21\xE1\xBF\x30\x15\x9C\xCF\xD5\xF3\xF9\xD1\x10\xBE\xF5\xF9\x4F\xE6\xF8\x90\x98\xF8\x14\xE4\xF1\xA3\xFE\xFC\xBC\x1E\xDD\x68\xE8\xFA\xE0\x9B\xF6\x12\xC6\xFC\x96\xC9\xEE\x04\x22\x20\x09\xEF\xFB\x7C\xB4\x20\xC2\xFB\x9C\xAA\xF2\x10\xED\xF8\xFD\x1E\xF3\xF8\x80\xF9\xEF\xC8\xF2\x7E\xA0\xF2\x66\x8A\xFF\xEF\x17\x75\xF4\x4E\x7D\xE8\x74\x20\x53\x7D\xEA\x7A\x7A\xF5\x7C\xDE\x6B\x78\xD9\x77\xFE\x30\x7D\xEB\x66\x44\xFB\x7A\xE2\x5D\x7F\xE9\x05\xF1\x18\x73\xF3\x6F\x23\xE3\x7C\x8F\x6B\x72\x04\x88\xFE\x76\x2F\xE6\x69\x63\x23\x6A\xFD\x4C\x10\x01\x13\xEA\x6E\x7F\x83\x09\x68\x1C\x70\xEF\x5A\x7B\x12\x86\xFF\x7D\x7B\xDF\x6C\x7D\x81\x7B\xE1\x78\x7E\x18\x8A\xFF\x7B\x76\x49\x6A\x7E\x89\x7A\x32\x0D\x7F\xC6\x77\x01\xC5\x18\xE4\x62\x08\xF3\x6B\x39\x53\x7C\x51\x7D\x01\xD8\x37\x0B\x95\x7D\x0F\x84\x01\x82\x09\xEB\x7A\x00\xB6\x7D\x04\x9D\x7F\x38\x77\xFB\x7C\x81\xF0\x7C\x4E\x19\x83\xD2\x66\x52\xF3\x79\x20\x2C\x81\x26\x8F\x00\x97\x7D\x70\x6E\x80\x31\x80\xCA\x73\x80\x24\x81\x06\xB7\x7E\x28\x66\x4E\xB9\x76\x04\x8B\x4E\x14\x85\xF0\x46\x53\x8F\x61\x08\xBE\x71\x3C\x50\x7A\xA3\x29\xE4\x60\x82\x6D\x67\x82\x20\x87\xC9\x4A\x82\xEB\x75\x04\x8F\x7A\x0D\x92\x70\x38\x83\x02\xBA\x80\x00\x8C\xF8\x16\x80\x15\x90\x7E\x17\x0A\xFA\x69\x80\xF0\x4F\x06\x80\x09\x1C\x80\x4F\x73\x82\x35\x67\x71\x3E\x8E\xFA\x5F\x81\xFE\x7A\x7C\x63\x81\x0F\x91\x74\xED\x7F\x20\x5C\x7D\xE8\x7E\x7E\x10\x6C\xF4\x5B\x69\x01\x85\xBB\x3C\x72\x06\x80\x4F\x43\x85\x20\x0F\x85\xE5\x41\x09\x97\x19\x1D\x97\x84\xBD\x40\x0F\xAD\x81\xD8\x7F\x01\xB3\x87\x03\x86\x83\xEC\x6A\x40\x14\x6E\x35\x87\x02\xDC\x74\xD3\x63\x7E\x5A\x7B\x17\xAE\x7A\xAF\x7E\xB6\x77\x3D\xD8\x6F\x7E\x63\x78\x6B\x4D\x5E\x44\x8E\x35\x68\x7A\x78\x70\x6F\xD5\x78\x20\x02\x87\xE5\x4F\xF6\x26\x2B\x19\x8E\x6F\xBF\x7C\xF7\x6B\x08\x16\x0C\x0B\xC0\x7C\x84\x11\x7F\x4A\x7D\x20\x0F\x83\x40\x8F\x09\xFF\x7F\xF3\x60\x78\x53\x84\x3A\x6C\x27\x1F\x82\xDF\x5F\x76\x38\x9F\x83\x35\x70\x0A\xA2\x7D\x50\x80\xFE\x6A\x84\x22\x96\x82\x09\x25\x1B\xA6\x80",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
