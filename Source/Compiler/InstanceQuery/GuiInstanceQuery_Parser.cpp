#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Query"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum NameOption"
L"\r\n" L"{"
L"\r\n" L"\tSpecified,"
L"\r\n" L"\tAny,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ChildOption"
L"\r\n" L"{"
L"\r\n" L"\tDirect,"
L"\r\n" L"\tIndirect,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PrimaryQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tChildOption\t\tchildOption;"
L"\r\n" L"\tNameOption\t\tattributeNameOption;"
L"\r\n" L"\ttoken\t\t\tattributeName;"
L"\r\n" L"\tNameOption\t\ttypeNameOption;"
L"\r\n" L"\ttoken\t\t\ttypeName;"
L"\r\n" L"\ttoken\t\t\treferenceName;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CascadeQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tparent;"
L"\r\n" L"\tQuery\t\t\tchild;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tExclusiveOr,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tSubstract,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tfirst;"
L"\r\n" L"\tQuery\t\t\tsecond;"
L"\r\n" L"\tBinaryOperator\top;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INDIRECT = \"////\";"
L"\r\n" L"token DIRECT = \"//\";"
L"\r\n" L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n" L"token WILDCARD = \"/*\";"
L"\r\n" L"token OPEN = \"/(\";"
L"\r\n" L"token CLOSE = \"/)\";"
L"\r\n" L"token XOR = \"/^\";"
L"\r\n" L"token INTERSECT = \"/*\";"
L"\r\n" L"token UNION = \"/+\";"
L"\r\n" L"token SUBSTRACT = \"-\";"
L"\r\n" L"token ATTRIBUTE = \"@\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryFragment"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n" L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n" L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n" L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimary"
L"\r\n" L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n" L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n" L"\t= \"(\" !QueryRoot \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query Query0"
L"\r\n" L"\t= !QPrimary"
L"\r\n" L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n" L""
L"\r\n" L"rule Query Query1"
L"\r\n" L"\t= !Query0"
L"\r\n" L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n" L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"\t"
L"\r\n" L"rule Query Query2"
L"\r\n" L"\t= !Query1"
L"\r\n" L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n" L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query QueryRoot"
L"\r\n" L"\t= !Query2"
L"\r\n" L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 5799; // 27819 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 679;
const vint parserBufferRows = 6;
const char* parserBuffer[] = {
"\x00\x00\x81\x81\x84\x02\x81\x80\x07\x82\x00\x87\x80\x83\x21\x33\x3B\x31\x30\x64\x65\x11\x35\x35\x32\x39\x3D\x7F\x18\x99\x98\x8A\x85\x84\x8C\x28\x39\x69\x6D\x21\x36\x83\x8D\x8B\x8A\x8D\x19\x85\x08\x80\x0A\x90\x81\x92\x8B\x28\x99\x88\x0B\x93\x98\x83\x29\x32\x74\x2F\xA7\x91\x9B\x03\x94\x8E\x81\x1C\x8C\x8E\x90\x82\x8C\x8A\x8B\x96\x05\xC8\xA3\x28\x39\x34\x34\x33\x98\x1B\xBE\x81\x82\xAF\x81\x8A\x9C\x03\x2B\xD8\x80\x90\x33\x95\x32\x36\x3A\x50\xFF\x7F\x86\x81\x87\x8D\x91\x91\x79\x3A\x8D\x0B\x9B\xB0\x81\x30\x3A\x74\x20\xA2\x35\x34\x3D\x32\x27\x30\x6D\x65\x21\xA3\xB9\x85\xB0\x90\x91\x24\xC6\xB9\x33\x0B\x94\xC2\xB6\xB8\x72\xF4\xB6\xB8\xB5\x37\x24\x38\x3A\x69\x6F\x2E\x3B\xB2\xA8\x82\xB2\xC0\x69\x82\xFD\x88\x8B\xC8\x03\xA5\xA6\x64\x0E\xD0\xD2\xC4\xC8\x86\x8F\xBF\x68\xEA\xAC\xA1\x82\x3D\x32\x33\x8A\x5E\xE3\x0B\xD9\xB5\xD5\x8E\xBF\xB3\x81\xA6\xB5\x85\x8B\xDC\x39\x3C\x38\xB3\xFA\x90\xBC\xB0\x07\xD0\xDD\xCC\x26\x8E\x2B\x8A\xE0\x86\xDC\xE1\xBB\x79\xA2\xD1\xD3\xC0\xAB\xDE\x81\xDD\x37\xB9\x82\xC8\xA2\x80\xA6\x33\x34\x72\x73\x20\xB5\xE4\x99\x81\xEC\x9D\x02\x2B\xA9\xE0\x8F\x30\x39\xB0\xEB\x01\xD8\xF8\x97\xA9\xA9\x83\x39\x32\x63\x12\xCF\xB0\xA1\x0B\x97\x17\x95\xFD\x6B\x42\x83\x4A\x61\x61\x53\x80\x81\x05\xB1\x47\x80\x42\x09\x8A\x8B\x82\x40\x0D\xA8\x40\x7C\x40\xBB\x49\x1E\x10\x11\x49\x12\x15\x13\x10\x54\x04\x48\x42\x87\x00\x2F\x02\x8B\x7F\x08\xB1\x4A\x55\x41\x27\x98\x8A\x84\x87\xEB\x45\x4D\x8A\x88\x01\x25\x88\x48\x88\x02\x60\x8E\x11\x10\x4D\x05\x15\x07\x4A\x3B\x80\x4B\x15\x18\x2D\x3A\x11\x11\x0B\x5A\x1F\x1D\x17\x8F\x41\x83\x9A\x14\x0C\x2D\x39\x0D\x16\x0A\x2D\x90\x84\x78\x42\xBB\x57\x19\x10\x13\x44\x03\x11\x12\x14\x44\x11\x91\x43\x8B\x2A\x03\x02\x8E\x46\x34\x83\x41\x43\x13\x50\x05\x1E\x12\x97\x00\x6F\x88\x09\x99\x00\x61\x5C\x75\x40\x48\x43\x1C\x13\x13\x53\x05\x1C\x98\x00\x2F\xA9\x03\x9D\x9C\x50\x62\x98\x42\xA0\x00\x18\x1F\x12\x14\x7B\xAF\x8E\x17\x89\x52\xB1\x49\x03\x4A\x8F\x80\x46\x84\x15\x45\x12\x19\x9C\x8B\xEA\x41\x4F\x0A\x0A\x07\x23\x99\x4B\x4A\x48\x55\x1E\x11\x12\x4F\x2B\x99\xA4\x40\x2F\x2B\x03\x84\x00\x61\x51\xA5\x42\xAB\x53\x15\x12\x13\x14\x54\x12\x11\x10\x87\x31\x88\x49\xAC\x00\x2D\x2E\xAD\xA0\x4A\xBE\x81\x4E\xA9\x10\x54\x35\xA9\x12\x10\x55\x14\xAB\xAE\x40\xBB\x80\x1A\x02\xA7\x18\x7F\x9C\x4B\x54\x4F\x37\x9E\x13\xB2\x01\x7B\xAA\x0D\x67\xBF\x9A\x44\xA2\x40\x84\x84\x1F\x10\x15\xD8\x80\x4B\xAE\x0B\xC4\x61\x55\xBB\xB4\x08\x48\x53\x14\x14\xB7\x85\x1F\xB5\x40\x84\xAF\x03\x1F\x0A\x6D\x45\x41\x58\x89\x28\xB5\x7E\x4A\x60\x31\x10\x0B\x4A\xC0\xFF\xA6\x41\x0E\x0B\x52\x2F\x1F\x18\x1D\x53\x34\x13\x48\x1D\xDC\x81\x4D\x64\x10\x20\x24\x0C\x0E\x4E\x31\x3E\x0C\xA1\x40\x27\x98\xC4\x70\x47\x18\xEE\x0D\xC3\xC3\xCF\x88\x45\xC8\x00\x14\xD7\xC0\xC2\x0F\xAB\xBB\x61\x17\x65\x68\x67\xC2\x43\xC9\x2F\xE8\x66\x46\x0B\x31\x15\x2B\x4A\xCE\x00\x57\xC0\xCE\x45\x3E\x3A\x00\x08\x0A\x20\x22\x02\x8A\x08\x14\xF7\x19\x18\x1D\x68\x20\x0B\x1C\x08\x9F\x4E\x52\x76\x64\x20\x3D\x05\xD1\x12\x6E\x24\x10\x78\x7E\x74\x22\x00\x09\x1F\x20\x29\x00\x09\x08\x35\xC7\x71\x10\x62\x69\x33\x55\x5C\x19\x0D\x0A\x0E\xCE\xCD\x79\x01\xD3\xD1\xD1\x2F\x08\xD0\x0A\xD2\x4C\xCE\xD0\xD4\x53\x52\xCF\x63\x75\xD5\x45\xC4\x1B\xD7\x18\x5D\xDF\xD1\xDB\xD8\x65\xD8\x67\xD9\x5C\x69\xCA\x64\x19\xCB\x01\x49\xE1\xCF\x4A\x34\xFF\xC9\x1E\x0B\x32\x1F\x0B\x4A\xE6\x3D\xD2\xE0\xD2\xD0\x22\x28\x06\xDC\xD9\x82\x49\xCB\xC1\xD1\x29\x22\x04\xC1\x41\xAB\xDE\xE9\x1E\x11\x72\x21\x17\x19\x5E\x5F\x52\x0B\x4A\xED\x2E\x56\xE0\xEE\xEC\xB4\xF4\x18\xCD\x2A\x2B\x40\xFD\xE6\xEE\xB1\xF3\xEE\x54\x1D\x72\xC4\xD4\xD3\x8D\x39\xA0\x02\xD2\x73\xC1\x77\xDB\xD1\xD3\x4F\xD0\xF0\x75\x63\x7E\xD4\xD6\xD6\x08\x53\x00\x73\x19\x1A\xDF\x65\x14\x1A\xD7\x60\xE2\xDC\x1F\xDC\x22\x2A\x0E\xD4\xDE\xD4\xE0\x06\xF4\x63\x53\xEE\x10\xE2\x08\x41\x2E\x19\x1C\xF9\x87\xE9\x04\xC7\x16\x45\xEE\x0E\xD4\xF3\x45\x0E\x78\x08\x2D\x3F\x35\xD6\x2E\x0A\x36\xD7\x60\x05\x17\x20\x0D\x20\x10\x16\x72\x27\xAB\x62\x21\xEB\x44\x7C\x77\xE3\x78\x75\x20\x17\x8E\x77\xEE\x46\x7F\x2A\xCC\x42\x7D\x20\x1F\x8F\x6F\x71\x1B\x8D\x77\xE4\x73\x68\x80\x02\x8F\x7D\x5E\x52\x79\x6F\xEA\x7F\x31\x38\xF1\x73\x7D\xF7\x78\x30\x7D\x34\x22\x78\x7F\xE6\x68\x7E\xFA\x2C\x8D\x7C\x15\x98\x7B\x34\xF2\x7B\x79\xFD\x77\x76\x70",
"\xB1\x7A\x78\x04\xFC\x62\x06\xFF\x20\x08\x84\xA1\x44\x80\x36\x07\x91\x7B\x02\x8D\x8F\x80\xC1\x17\x82\x20\x19\x96\x73\xE2\x09\x3B\x6C\x0A\x2B\x26\x8B\xB9\x70\x6F\x16\x8D\x7B\x6C\x9C\x74\x0B\x25\x67\x83\x7A\x18\xE8\x6A\x6C\xF1\x72\x68\x69\x76\x7C\x7D\x13\x8C\x8C\x8C\xC5\x09\x83\x81\x22\x1A\x06\xD7\x64\x64\x82\x0E\xB4\x0C\x87\x7A\x6F\x2C\xE3\x6D\x87\x7B\x18\x9B\x7B\x86\xDF\x61\x7F\xF8\x5F\x61\x83\x80\x13\x80\x6E\x24\x96\x83\xED\x11\x7D\x8F\xDE\x6E\x03\x06\x1F\x82\x21\x08\x9A\x85\x79\x12\x82\x6A\x79\x4C\x98\x45\x00\xCF\x7F\x85\x04\xAC\x7A\x6F\x3E\x86\x91\xD1\x08\x95\x87\x1B\x85\x88\x04\xE7\x64\x69\xFA\x6B\x73\x7A\x54\xA5\x90\x7E\xD9\x61\x89\xD1\x43\x88\x87\xC3\x49\x8E\x7F\x14\x73\x8F\x13\x86\x88\x80\xC6\x0A\x84\x81\x73\x0E\x80\xDC\x10\x83\x60\x4A\x90\x95\x93\xC7\x78\x03\x4A\x52\x91\x8D\x11\x90\x9D\x83\xA6\x74\x0D\x11\x59\x6D\x47\x82\x1D\x9E\x62\x9C\x95\x83\x57\x3E\x00\x04\x20\x17\x89\x20\x59\x8B\x8F\x20\x8E\x70\x8D\x82\x2D\x9E\x75\x63\x8D\x8C\x19\x2E\x05\x07\x61\x2B\x26\x9E\x6A\x86\x6D\x1D\xEB\x6F\x8C\x20\x1E\x6A\x8E\xA2\x82\x82\x20\xDC\x82\x8B\xA2\x7A\x88\x71\x95\x87\x79\xD2\x35\x9F\x69\x81\xA4\x88\x86\xB9\x92\x86\xF7\x2D\x9B\x91\x3E\x2D\x6A\x84\x8A\x7B\x9E\x1B\xC2\x6C\x8F\x67\xA2\x9C\x0E\x0B\xAD\x84\x1D\xEB\x95\x2F\x42\x91\xA2\x88\xF6\x64\x7F\x39\x80\x29\x9C\x7D\xA4\xA2\x7C\xED\x82\x23\x3B\xDA\x8A\xA3\x79\xB3\x01\x8D\x05\x38\xA4\x46\xE8\x21\x9E\xC7\x7D\x9F\x9F\xA1\x8D\x7A\xD0\x0E\xA4\x90\x63\x9D\x0C\x62\x79\x9B\x8D\x38\xFE\x80\x91\x86\x9A\xA6\xA4\x40\x92\xA0\x0D\x8A\x9A\xA5\x49\x95\x99\xA3\x2F\xA4\x0D\x4C\x81\x23\xA6\x75\x84\xA3\x9E\x34\x18\xA6\x40\x3A\xA0\x9F\x9A\xBF\xA0\x89\x41\xA3\x97\x48\x84\xA7\x8E\x83\xA3\x73\xA9\xBD\x6D\xAB\x5A\x8F\xA0\xAB\xBF\x47\x93\xA2\x54\xAC\x91\x33\xD7\xA8\x2D\x48\xB5\x76\xAA\x00\x10\xAF\xF1\x74\x99\x93\x80\x1B\x91\xA1\xE3\x9F\x93\x09\x81\xA4\x95\xE7\x06\x9F\x94\x2E\x8E\xB1\x74\x27\xAB\x94\xBC\xB6\x85\xA2\x87\x71\x95\xD1\x3B\x80\xB2\xF7\x77\x93\xB2\x51\xA8\xA4\x11\xE5\x7E\x97\xFE\x7F\x7C\xB1\x03\x8E\x34\x14\xC5\x9B\x85\x29\x89\x9D\x8A\x26\x20\x08\xE4\x7C\xA6\x22\x99\x41\x25\x72\x70\x77\x92\x2D\x2B\x2B\xB7\x7C\x98\x36\x84\x46\x75\x6E\x5C\xD1\x61\x34\xCA\xA2\x00\x6B\x5A\x6D\x34\xE1\x3D\x9D\xA2\x97\x9F\xA8\x08\x17\xAE\x77\x1B\xA2\x78\x71\xD2\x4A\x67\x8F\x22\x09\x74\x74\xEE\x62\xBA\xC5\x86\x6C\x96\x22\xA4\xBA\x2A\xA2\x02\x70\xE5\x85\x74\xB4\xCD\xB8\xAB\x73\xAB\xA0\x01\x96\xAA\xBF\xA1\x64\x1A\x03\x4A\x72\xB4\xB7\x3C\x3D\xA5\x8C\xD9\x9B\x98\x19\x17\x0B\x24\xFE\x80\x20\x9C\x34\xB9\xA8\x39\xB2\xB5\x3D\xFA\x8D\x90\x20\x8F\x87\x38\xC2\x57\xBA\xBF\x7C\x42\x21\x5F\x00\xD0\x6F\x80\x9B\x60\x21\x8E\x42\x30\x06\xB3\xA1\xB3\x85\xB8\x61\x0B\x95\x1D\xC5\x73\x17\xD2\x6D\x7A\xE8\x2B\xBA\x95\x66\x20\x06\x72\x7A\x24\x0C\x02\x8C\x2A\x03\xBF\x8E\x75\x02\x84\xB8\x32\xA0\x04\x2A\xA2\x3A\x20\x08\x14\xC0\x02\x85\xA7\xC9\xC2\x15\xD7\x93\x07\x2B\x20\xC8\x88\xA7\xC9\xC5\x0B\xEC\xC5\x2B\x5F\x20\x04\x8C\xC2\x62\xC7\x06\xB5\xC6\x2A\x82\x38\xC6\xBF\x1A\xC6\x61\x1E\xC0\x60\x67\xBE\x0B\x25\x96\xC3\xC6\x23\x8C\x5C\xA2\xC5\x25\xD8\x61\x91\x86\x62\x81\xEF\x21\x38\xBB\x3B\x8A\xC6\x00\xF7\x39\x3F\xAC\x73\xC7\x3C\x82\x32\xAD\x7B\x73\x78\x6B\xBA\x21\x3C\x6B\xE4\x61\xCF\xCA\x42\x68\x63\x32\xE0\x3A\x3C\x45\x7E\x0A\xD7\x6A\xC2\x68\x36\xFA\x3F\xCD\xF3\x31\xCD\x67\xF3\xCB\x7B\x22\x38\x0B\x0C\x6C\x15\x0F\x1C\x69\x06\x0F\xC6\x32\x09\xCF\x39\xDB\xC5\x97\xD6\xC6\x60\x17\x34\x02\x15\x2B\x20\xD4\x97\xF9\x0E\xCA\x25\xC0\x66\xCF\x67\xC1\xD3\xA0\xC6\xC5\xD0\xFC\x07\xD5\x81\x70\xD1\xB6\x9C\xF0\x03\x7E\x47\xD0\xD2\xD2\x94\xD6\xD0\xF9\x51\xBB\xCE\x53\xE4\xCA\x68\x66\xC0\xD3\x2C\xBE\xD6\x23\x15\xED\xD5\xCD\x64\x08\xD2\x76\x32\xDB\xD0\x5A\xDB\x7D\xCE\x15\x2C\xCF\x79\x99\xD1\x73\x0B\xDC\xD5\xD8\x98\x62\xC9\x41\x5A\xD6\xC5\x62\xE3\xCD\xD8\x47\xCE\xC4\xC5\x4B\xCB\x6E\xD0\x33\xC7\xC9\x45\x26\x24\xB5\x85\x65\xD8\xE6\x05\x26\xDD\x3E\xD9\xBD\xD6\x11\x60\x21\xCE\x20\x99\xC4\xE5\x8B\xDC\x95\x9B\xD5\xC1\x7D\xE4\xD0\x73\xA2\xC5\x21\xC0\xDD\xD4\xD5\x6F\xE4\xD0\xD5\xE2\x28\xAA\xA0\xC4\xD9\x0E\x63\xE0\x06\xD0\x6E\xD0\xD5\xA2\xA6\x23\xD7\x5A\xCF\xD1\xD2\x93\xD5\xD3\x13\x17\xDF\x6A\x5E\xC6\x66\xE0\x31\x08\xE0\x48\x9B\xBB\xD5\x13\xEB\xCE\xD5\x11\xE9\x99\xAC\x96\x25\xE3\x67",
"\xDF\x29\xDA\x78\xDF\x6A\xBE\x98\x6E\xDC\x81\x30\xDF\xCA\xF2\xC4\x0C\xBD\x80\x06\xDE\x82\xD9\x61\xDF\x53\xDA\x26\x0C\x57\xD9\x0E\x19\x1E\xD0\x17\x2B\x28\xEB\xA8\xB2\x06\xE0\x19\x22\xE5\x68\x2B\x05\xE5\x97\xA7\xE8\xD8\x65\xFA\x25\xE5\x45\x75\x0A\x1B\x53\x39\xCE\x8F\xD6\x24\xE9\x7C\xC2\x32\xD3\xC0\xDF\xCE\xEC\xAD\x02\xEA\x07\xE7\xDB\xAB\xAA\xE3\xE2\x96\xCD\xDA\x86\x75\x02\x0E\x78\x31\x7B\xB9\xAF\x7A\xCE\x24\x60\xF5\xBA\xC1\x52\xC8\x20\x4D\xC5\xEC\xE8\x46\xF3\x04\x29\x2B\x23\xF1\xA5\xCD\xEF\xE9\x22\x07\xEC\xC3\xA1\xEA\xED\x94\xE0\x03\xE5\x79\x01\xA5\xFB\x0C\xDB\x95\xB8\xF3\xE9\x0C\x75\xF6\xA0\x77\xE2\xE7\xF0\xB2\xE9\xD2\x04\x51\xEB\xF0\xD5\xEB\xEF\xF1\xB6\xD1\xF0\xEB\x22\x1A\xE8\xD7\xB2\xE1\xE8\x80\x44\xEF\x60\x33\x01\xE2\x40\x03\xE2\xCD\xB0\xFF\xD0\x04\xC1\xC8\xCE\xDD\x04\xDF\xE0\x94\xC9\xDA\xE2\xCB\xCE\xEC\x43\xA0\x04\xF3\xE3\xAF\xE7\xCE\x99\xFE\xE9\xC1\xB6\xF3\xEA\xCF\xC2\xDA\xD0\xE3\xCC\xD5\xEF\xD5\xE0\xF9\xAB\xEF\xED\xD1\x17\xF8\xD6\xC6\x9C\xED\x0F\x99\xE2\xE8\xF0\x38\x65\xF1\x41\x62\xF4\xE1\xBC\xC2\xEA\xE4\x48\xAA\xF1\x9F\x8D\xFF\xF6\xB6\xC1\xF9\x0F\xA8\xF3\x0A\xE5\xF1\x28\xF3\xF3\x8A\xFE\xFC\x62\xE8\xFC\xD4\xE8\xEC\xF1\xE9\xE4\xF0\xF2\xA8\x7A\x7A\x92\x14\x3E\xDE\x78\x77\x35\x71\x10\x37\x78\x77\x0B\x6B\x30\xFA\x5B\x73\x3D\x72\x74\x03\x61\x2C\x00\x1E\x2A\x3A\x19\x4D\x0E\x85\x6D\x26\x19\x4D\x38\x3D\x4D\x02\x1D\x4D\x04\x79\x4D\x22\x62\x74\x7C\x7D\x2F\xEC\x6F\x77\xFD\x62\x74\x98\x32\x7E\x02\x14\x7E\x10\x8C\x7C\x45\x78\x78\x67\x71\x7D\xB7\x70\x71\xED\x75\x7A\xEF\x71\x7F\xF3\x74\x77\xF6\x7B\x79\x78\x7D\x79\xB8\x75\x76\xFB\x72\x83\xCD\x7E\x7F\x8E\x70\x80\xD7\x79\x75\x5B\x73\x80\x5F\x3D\x63\x96\x36\x5B\x00\x18\x5B\x0A\x64\x03\x9C\x35\x10\x53\x8B\x53\x9F\x35\x34\xD4\x54\x3A\x19\x87\x5D\x48\x59\x3A\x12\x80\x00\x14\x86\x5D\x0B\x31\x20\x05\x14\x86\x15\x87\x5D\x0B\x8A\x4D\x59\x37\x80\x00\x1E\x6E\xF7\x6B\x85\x0B\x33\x60\x4C\x80\x37\xEC\x5E\x5E\x68\x19\x86\x23\x32\x07\x74\x0E\x60\x01\x19\x2F\x14\x31\x61\xC7\x1C\x32\x27\x86\x39\x6C\x80\x00\xF0\x66\x39\x22\x3E\x30\x7A\x8F\x31\x01\x19\x32\xD2\x55\x80\x5F\x77\x60\x00\x0D\x3A\x62\x78\x87\x8A\x80\x31\x2B\x13\x31\x15\x35\x7E\x1A\x3D\x7A\x78\x7C\x88\x25\x86\x74\x79\x84\x07\x4E\x80\x00\x27\x3E\x88\x9C\x7F\x85\x61\x80\x87\x74\x06\x18\x05\x1E\x8A\x67\x8B\x30\x96\x8F\x30\x85\x8E\x6E\x7F\x8F\x81\xD7\x5E\x03\xAA\x88\x81\x16\x19\x4D\x0F\x0B\x12\xBF\x85\x82\x1A\x83\x8A\x7C\x80\x10\x7E\x80\x02\xB8\x81\x87\x90\x8D\x70\x92\x84\x89\x27\x63\x8B\x7A\x87\x81\x00\x17\x8B\x2A\x6D\x89\x7D\x7C\x8B\x0D\x70\x8A\xFE\x60\x03\x89\x84\x32\x94\x3D\x88\xC8\x85\x8D\xCD\x8E\x4C\xD6\x4F\x51\xF4\x55\x10\xE7\x82\x58\xD8\x47\x5D\xA3\x8C\x81\x01\x1D\x4D\xD4\x88\x58\xC8\x33\x8E\xF5\x5E\x57\x74\x06\x01\x2B\x18\x8F\xF5\x87\x4D\xBE\x33\x8A\x5B\x50\x10\xED\x4E\x88\xF2\x8E\x03\x75\x84\x8E\xEF\x52\x4F\x1C\x0B\x12\x09\x95\x5F\xF7\x52\x3E\xD0\x84\x07\xFE\x55\x10\x11\x91\x8F\x5E\x50\x5F\x04\x90\x58\x65\x59\x55\xD4\x45\x10\x1B\x99\x91\x5F\x5D\x8D\x7A\x8A\x8F\x05\x12\x92\x02\x95\x91\xF2\x4E\x03\xF4\x81\x58\xF2\x85\x90\xFB\x8F\x51\x9E\x65\x58\x00\x17\x58\x1E\x5E\x47\x26\x4B\x3C\xA8\x5E\x43\x72\x59\x4A\xC6\x5C\x4A\x79\x54\x5A\x9A\x53\x6C\x9D\x5A\x93\xA1\x5B\x4B\x29\x5F\x4A\x62\x3F\x4B\xA7\x52\x54\xA9\x55\x40\xB1\x15\x50\x54\x4B\x4C\x51\x6C\x92\x2A\x96\x92\xEC\x4F\x45\x06\x9C\x53\x35\x58\x39\xF8\x45\x10\x5B\x96\x85\xF6\x56\x56\x5F\x62\x8F\x72\x54\x54\x76\x48\x4B\x43\x94\x3F\x45\x9D\x07\x61\x61\x60\x5F\x57\x56\x00\x5A\x94\x64\x95\x52\x46\x5E\x56\x08\x53\x93\x71\x5D\x59\x71\x90\x51\x67\x9C\x93\x97\x59\x67\x9D\x27\x8D\x80\x9E\x6F\x31\x02\x2D\x48\x1A\x13\x0F\x2D\x2D\x32\x13\x88\x70\x3A\x8D\xB0\x56\x11\x02\x21\x02\xD0\x2F\x0F\xCB\x82\x03\x84\x98\x8D\x02\x23\x02\x91\x9B\x8B\xC2\x87\x5D\x95\x95\x82\x02\x25\x02\x91\x9B\x8C\x30\x0D\x99\xFE\x62\x20\x27\x01\x99\x29\x9A\x8E\x74\x0C\x98\x50\x96\x12\x02\x29\x02\x91\x92\x95\x1E\x90\x5F\xAC\x97\x1C\x86\x9B\x12\x2B\x01\x99\x1F\x03\x2F\xAC\x2B\x2E\xFF\x02\x20\xEB\x27\x98\xC2\x93\x9C\x71\x2E\x9B\x70\x2C\x27\xC4\x9B\x12\xBC\x9C\x2E\x05\x11\x9C\xC3\x9B\x8C\x83\x9B\x12\x28\x09\x9C\x81\x92\x10\x7E\x70\x03\xC7\x92\x20\xD2\x8E\x19\x7C\x35\x5C\x40\x49\x61\xC8\x53\x38\x74\x03\x87\xC7\x1F\x0F\xBE\x92\x2D\x7B\x24\x9C",
"\xCB\x92\x2D\xCE\x92\x9C\xD0\x92\x2D\xD3\x94\x9D\xD6\x9E\x89\xC5\x69\x9D\x99\x87\x9F\x00\x12\x5E\xB9\x4A\x6F\xE5\x5C\x35\xE4\x98\x19\xC5\x94\x20\xAB\x2B\x9C\xC4\x9B\x27\xEC\x92\x9F\xF3\x91\x98\x18\x30\x9F\x08\xAC\x31\xF4\x9D\x70\xC2\x96\x9E\x04\x29\x63\xF6\x92\x9C\xEB\x97\x2A\x0D\xAF\x9F\x68\x12\x2D\x2C\x0D\xA0\x2C\x58\x91\x6C\x90\x5F\xED\x9C\x1B\xFD\x6E\x43\x02\x29\x9A\xF2\x82\xA1\x0C\x2F\x97\x49\x1E\xA1\xC8\x9D\x2E\x18\xA8\xA0\x1A\xA7\x14\x2B\x1D\xA1\x1E\xA2\x9B\x21\xA2\x4F\x0C\x2E\x9B\x85\x89\x63\xC4\x9B\x2E\xE8\x9E\xA2\x33\xA9\x07\x3B\xA4\x20\xC7\x99\x9E\xCF\x90\x2A\xCA\x92\xA4\x8A\x97\x1C\xD2\x26\x02\x2E\xAA\x99\xFE\x69\x4D\xD2\x24\x02\x2E\xA3\x99\x07\xAE\xA1\xEF\x92\x9D\x57\xAF\xA0\xD8\x93\x9C\xDB\x9A\x9F\xDF\x9D\x6F\xE1\x96\x5E\x43\xAA\xA2\xFA\x21\xA4\x5A\xAA\xA4\x83\x2C\xA4\x54\x27\x95\x34\xA8\x10\x50\xAE\xA1\x52\xA1\x8B\x74\x05\xA5\x5D\xAA\xA0\x62\x79\xA5\x0D\xAB\xA5\x08\x11\x9F\x7D\xAE\xA5\x15\xA5\x10\x61\xAD\x9D\xF1\x3C\x9F\xE2\x93\xA4\x01\xAC\x20\x03\xAE\xA2\xA4\x90\x2E\x6E\xA4\xA2\xF5\x5F\xA4\x51\xA0\x29\xD8\x84\xA5\x2B\x16\xA5\x6B\xAA\xA7\x78\x7C\xA7\x08\xAE\xA7\x05\x10\xA8\x9F\xAE\xA5\x03\x28\xA6\x10\x2B\x2E\xAB\x25\xA0\x2E\xA5\x9B\x98\x17\x9B\x08\x18\xA2\x76\x97\x3C\x83\xA6\x73\xCB\x11\x10\x42\x93\x1D\x52\xAC\x97\xE2\x30\xAB\xE5\x8E\x47\xFF\x0B\x27\xBF\xA6\xA9\x08\x1F\x85\xA6\xAD\x87\x2B\x1E\x01\x04\x2B\x2E\x2C\xA2\x10\xE7\x87\xAA\xDF\x88\x10\xCD\xA1\x10\xC5\xA6\x2E\x2B\x10\x02\xC9\xA2\xAC\x05\x15\x8C\xBD\x95\x19\x05\x18\xAC\x45\xAF\x21\x31\xA2\xAD\x40\xA1\xAE\x8B\xA2\xA9\x05\x1B\x9C\xEB\x26\xA3\x2D\xAE\xA1\xAC\xA9\x1A\x82\x17\xA2\x7B\x53\x95\xBD\xAD\x3B\xB3\xA8\x80\xB5\xAD\x1C\x9F\x5F\x43\xB8\xA8\xAD\xBA\xA4\x06\xBC\xA8\x19\xF6\x89\x63\xEA\xA8\xA0\xFF\xAD\x57\xFC\x84\xA0\x2E\xA8\xA3\x54\x9B\x36\xF5\xA0\x10\xAE\x82\x10\xAE\x89\x97\x75\x52\x19\xCB\x94\x28\x43\x4A\xB0\xCE\x50\x5F\xC1\xA3\xAC\xD8\xAE\xAC\xBA\x2D\x5F\xD7\xA8\x10\xDA\xAE\xAD\xFA\x2A\xAC\xF3\x51\xB2\xAF\x2B\x1A\xDF\xA6\x1B\x08\x14\xB2\x1E\xB5\x10\xA5\x81\xAD\xE5\xA5\x23\xE4\xAB\xAD\x30\xA8\x10\xC0\xA8\xAA\x4B\xAF\xB1\x9C\x1C\xA6\x0D\xAD\xAE\xB9\x1E\x98\xF1\xA2\x41\x70\xAF\x3A\xFC\x8D\xB0\x86\x87\xAF\x00\x07\xAB\x92\x19\xAB\x96\x5B\xAB\xF1\xAA\x9A\x39\x6B\x73\xC4\x95\xB0\x16\x16\x8F\x08\xB7\xA3\x20\xAB\xB0\xE2\x38\xB4\x0F\xB1\x10\x11\xBF\x54\x66\x9B\xAF\x1C\xB6\x13\x4F\xB4\x06\x18\xB7\x90\x8E\x37\x98\xD3\xAC\x2A\x92\x8B\xAC\xD9\x28\xB2\x09\xAC\xB2\x87\x9B\x2E\x48\xB5\x8B\xB6\xA9\xAF\xF1\x3E\xB4\x53\x57\x59\x56\xB6\xB4\x1F\x56\xB3\x25\xBD\x6F\x08\xA8\xA4\xC2\x90\xB4\xC8\x12\xB4\xAF\xA1\xB5\xF2\x87\xB7\x4A\xBC\xB4\x6E\x05\xB1\x01\x13\x44\x7F\xB6\x8F\x1B\xBA\x2F\x7B\x22\xA5\x2F\xBC\x2C\x0A\x92\xB7\xC2\x2A\xB2\x83\xB2\xB2\xC7\xAE\xB9\x00\x10\xB7\x00\x12\xB3\x82\xB3\x33\x27\xBB\xB2\x40\x13\xBA\xAC\xB6\x26\x38\xB4\xBA\xCC\x92\x10\x39\xB4\xB8\xF4\x2B\x12\xE9\xAE\xB3\x08\xA8\xB8\xAE\xAC\x3A\x8C\xB1\xAB\x5F\x1E\xB8\x08\x1E\x6E\x90\xB2\xB9\x00\x14\xB9\xBF\xB3\xAF\xC7\x32\xB0\x2E\xA5\xB9\x07\xBE\xA2\x02\x29\xB6\x58\x99\x55\x5E\xB5\x18\x01\x12\xB1\x63\xB4\xB1\x3B\xB0\x00\x17\xBB\xB5\x19\xB2\x4F\x97\xB2\x10\x9A\xB2\xAE\xB8\xB5\xAD\xB2\xBF\x85\xDA\xAD\xB6\x23\xB2\xBB\xA6\xB0\x00\xA8\xBD\xB6\x31\xB2\xBB\xC4\x1E\xB2\xE4\xB0\xAE\xB1\xBF\xBA\x00\x1A\xA6\xA1\xB6\xAE\x90\xAC\xB3\x84\xAA\xBB\xF2\x9C\xBB\xEF\xA3\xB4\x8E\x45\xB4\xF6\x82\xBC\xEF\x69\xB7\x92\x5A\xAF\xDA\xBD\xA6\xC7\xB6\x3F\xCE\xBF\x51\x53\xBD\xBC\xC9\xB0\xB0\xCF\xB0\xBD\x08\x12\xBD\x16\x1D\x90\x64\x05\xBD\x08\x11\xB6\x2F\x53\xB1\x6E\x0C\xB7\x89\x47\x59\x1A\xCF\x95\x59\x5C\xB6\xBE\x9F\xB6\xE5\xB8\xBF\x3A\x6C\xAD\x0F\x26\xB7\xC3\x98\xB7\xF8\xAB\xC0\xF1\x36\xBC\xDC\xB0\xC1\x15\xC6\xB0\x81\xBB\xBF\x10\x29\x63\xA5\x8F\xA3\x2D\xC7\x98\xDA\xA9\x2F\xD8\xB9\x17\xD1\xBE\xBD\x6A\xBB\x36\x02\x2D\xB6\xFF\x01\x8C\xFF\xB8\xC1\x0F\x2E\xC4\x39\x64\x1C\x42\xCE\xBF\x0F\x25\xC4\xAC\x1A\x5A\xC4\x41\x1C\xF0\xAB\xB8\x2D\x9E\x47\x52\xC3\xB3\xF5\xB9\xC0\x63\xC5\xC6\x10\x2B\x27\xDA\xA0\x9C\x35\xBB\x27\x39\x66\xB8\x87\x97\xC2\x1C\xC9\xB5\x19\xAD\xA4\x00\xA7\xC6\x4E\xC0\xC5\x02\x14\xB5\x67\xC4\xC6\x71\x24\xA1\x2E\xA6\xA0\xF8\x9D\xA0\x72\xC5\x53\x23\xA7\x1D\x25\xA9\xAF\x5F\xCE\xBB\x61\xCD\x3B\x4E\xCD\xBE\xD2\x27\xC5\xEB\xA1\xC5\x84",
"\xCA\xC4\xD3\xBF\x55\x07\x2E\xC4\x3A\xBE\xA1\x87\xCB\x20\x02\xCE\x9A\x04\xC8\x60\x06\xCC\x8F\xE1\xB2\xAD\x99\xB3\x9C\xB9\xB6\xBF\x3F\xBC\xAD\x8D\x94\xA4\xA1\xC3\x89\xA3\xC2\xC1\x35\xA4\xC1\x60\xC2\xAF\x16\xCF\x51\x74\xC8\xA0\x85\xC4\xBD\xC3\x9F\xB5\x0E\xB7\xBD\x62\xB0\x5A\xD3\x18\xC3\xDD\xB9\xC1\x45\xBC\xC1\xA5\xC3\x81\xA8\xC3\xC8\x34\xBC\xAE\xAC\xCD\x9A\x8A\xBC\xC8\xD2\xC2\xB5\xCC\xC2\x9F\x11\xCE\x47\xB9\xC2\x9F\xBB\xCF\x55\x1E\xCF\x8A\xC0\xC1\xC2\xD9\xB3\xC2\xFC\xA7\xB6\xDB\xC0\x5F\xC3\x9A\xC9\xC0\x8D\xC7\x71\x20\xAC\x7B\x22\x89\x6C\xCF\xA7\x35\xB9\x63\xA2\xA2\x9F\x43\xA9\xCD\xD4\x92\x9A\xC9\xC0\x00\x64\x81\xC3\x56\x97\xBF\x24\x8E\x4E\x91\xA8\xC8\xF5\x5D\xC9\xF9\xBE\xB3\xC4\x52\x20\xA2\x9A\xCE\xF2\x98\xCE\x08\x1E\x8E\x52\xC9\xCF\xF9\xCE\xCB\x2F\xCE\xC2\xE8\xB2\xBF\xAE\xBE\xC3\x71\xB8\x10\x0B\x98\xD1\xC6\x87\xD1\x9B\xB1\x10\xED\xBF\xBE\xEB\x21\xBF\x58\xC1\x10\xA8\xBE\xC6\xAB\xB1\xA8\x9C\xA5\x6C\x04\xD3\xD1\xFF\xC4\x83\x08\xDF\xA0\x31\x09\xCF\xEC\x59\x63\x6D\xB5\xD1\x2E\xC3\xBF\xB2\xBB\xBE\x2E\xCB\x2E\x1B\xDF\xD1\xA5\xB9\xD2\x40\xD6\x8A\x42\xD9\xD1\xCD\x91\xCF\x43\xC3\xAA\x2B\xDD\x70\xF6\xC9\x9C\xD0\x9E\xC4\xCB\x9F\x8F\x00\x0B\x9C\x6D\xB7\xA4\xB2\xBA\xBF\x43\xDD\xA8\xC2\x9B\x27\xED\xB3\xCF\xF7\xCE\xA5\x2D\xDA\x6F\x2D\x67\x3C\x31\xDB\xD4\x30\x01\xA1\xBE\x9B\x2E\x0E\xD9\x9C\x2D\xD2\x20\xDA\x88\x6E\xBD\xB3\xB7\x73\xBA\x62\x10\xDB\x27\x12\xD6\xD3\xEB\x2C\xD3\x1C\xD0\x00\xEB\x26\xAD\x14\xD0\xBA\x43\xDA\xD3\x2E\xC1\xD2\xB2\xB4\xD2\x47\xD0\xAD\xDB\xBB\xBB\xDC\xA0\xD7\x03\xC5\x9D\x0E\xA5\x82\x30\x09\x63\xA8\xB4\x9C\xA2\x91\xD6\x53\x60\xD3\x53\x63\xD7\x00\x34\xD3\x99\xD8\xC6\x9F\xB2\xBA\x39\xDE\xD1\x9E\xDD\xD1\x2D\xB2\xBB\x3E\xDC\xBE\x45\xDE\xC7\x44\xD8\xD8\x25\xD4\xAD\x0E\xCB\xCA\xA6\x13\x15\x0D\x15\x15\xE9\x61\xCD\x72\xDF\xD8\xDB\x89\x63\x6D\xDD\xD9\x15\x68\x8D\x30\x0D\xD4\x94\xD2\xD3\x50\xDD\xCF\xE7\xA2\xBB\x56\xDE\xC2\x58\xD3\xDA\x00\x0A\xD5\x87\x90\xDC\x30\xC4\x16\x0B\x13\xDB\x36\x6D\xD8\xFF\xCA\xD9\x27\x6D\xD5\x79\xAF\xCF\x2A\x66\xD9\x81\x93\xD6\x5F\x15\xD6\xDA\xD7\x61\x68\xD2\xBB\x11\x98\xC7\xEC\xC3\x4D\x2B\x17\x9C\x6D\xBD\xD7\xE7\xB0\xD8\xCA\xD2\xD8\x7B\xDA\xD7\x9C\xB8\x10\x9A\xAE\x22\xBC\xD0\x00\xF5\xDA\xD4\xE1\xD6\x30\xCE\xDE\x9E\x0F\xA2\x03\xF9\xC9\x01\xE9\xD6\xDA\xE6\xBF\xD7\xA0\xDB\xD7\xF0\xD3\xD4\xF2\xD6\xD4\x02\x14\xBF\x6D\x27\xDF\x0E\xEE\xD4\x32\xDC\xDD\x2F\xDE\x7B\xE0\xD6\xDD\x5F\x73\xDC\x08\x12\x92\xB4\xB8\xDA\xAC\xDB\xD7\x86\xDF\x20\x5C\xD9\xD4\xF2\x90\x9D\x2D\xD4\x9A\xB9\x77\xE1\xB8\xD8\x31\xE3\xDE\xC2\xE5\xD3\xC6\x75\xD8\xDE\xAA\xC3\xD4\xA7\xD6\xE0\xD9\xA6\xD1\xA5\xDE\xC2\x0B\xEE\xDA\x05\x19\xDF\x5F\x27\xDF\x3E\xEF\xD5\x4B\xD1\x03\xFD\xD7\x98\x93\x91\xE0\x03\xED\xD3\x05\xEB\xD7\x38\xD8\xE0\xA2\xDA\xDA\x3B\xEC\xD7\x4F\xEF\xA2\xD5\xD1\x10\x11\xE1\xDC\x43\xE4\xE1\x73\xB8\xD9\x8E\xDD\xDB\xA1\x8A\xE1\x23\x95\xB3\x6D\xB4\xD8\x2E\xC1\xE2\x0B\x23\xE2\xAD\xD2\xE1\x59\xE3\x9C\x28\xE5\x76\x2A\xEE\xE5\x82\x99\x9C\x4E\xC7\xDC\x0D\xA2\xC8\x08\x12\xD5\x58\xEB\xDF\xF5\x90\xA6\x83\xC2\xA6\xD3\x10\x9E\x59\x39\xA8\x76\xC8\x16\x4E\xC9\xDC\xD4\x96\xE7\x00\xDB\xA9\x7A\xED\x70\x48\xB5\xA8\xA0\x17\xA8\x53\x6D\x9F\x84\x3A\xA8\xA9\xB2\xAD\xCC\xD8\xA0\xE3\xA7\xE7\xD9\xD8\xE1\x10\xAA\xD0\x8F\xC9\xDA\xC9\x90\xC7\x0F\x29\x61\x90\x7F\xE6\x2E\xD8\x31\x48\xB9\x28\x01\x1D\x1E\x52\xA0\x6D\xC8\x74\x07\xD0\x9A\xDA\xFF\x06\xE6\x87\xE1\xD0\xF1\x16\x1E\xA6\x76\xEA\x7E\x71\x03\xA9\xE8\xA1\xED\x1B\x9D\xB6\x68\x71\xB9\x6B\x71\xB1\xEE\xA2\x0C\xD5\x10\x3F\xD0\xE3\xBE\x9B\x27\x1D\x02\xE6\xEB\x2C\xDE\x36\xEF\x60\x24\xE0\x10\x73\xA6\xDF\x5D\xE0\x00\xD5\xEA\xDF\x9C\xE2\x03\x45\xEF\x20\x75\xA2\x86\x60\x1E\x9B\xCB\x9B\x01\xCE\xEF\xDC\x00\x11\xE1\xEA\xB3\xE5\x02\x28\xE6\x3D\xEB\xE9\x2B\xE2\x76\x27\xEE\xB3\x29\xE7\xDF\x7E\x72\x03\x2D\xEB\xD7\xC9\xEF\xD0\xCB\xEB\x12\xCD\xEE\xCF\x34\xEB\xE4\x43\xDD\xE4\xF3\xD5\x10\xD9\xEF\xE3\xD7\xE5\xF0\x42\xEB\xE8\xDC\xEA\xD0\xDF\xEC\x8A\x60\xE2\x10\xE4\xEE\xEF\xEF\xD3\xE5\xE9\xE9\xE3\x87\x9C\xEE\x02\x11\xE4\x6A\xEA\xF0\xF1\xE7\xB3\x00\x03\xEF\xD7\xE5\xEF\x72\xE6\x9C\x35\xBA\x9E\x00\xC7\xBA\xEE\xE0\xE7\x0B\xAC\xA5\x8A\xEC\xE9\x5F\xA2\x9C\x8E\xED\x37\x63\xAF\xA6\x92\x21\xE8\x66\xA3\xE8\x30\x17\x9E\x25\xF3\x9C\x17\xAF\xE1\xDA\xEF",
"\xEE\x06\x3C\xA0\x2D\xF0\xF4\x7B\xE0\xF3\x7D\xE6\xA8\xFB\x91\xE9\x82\xE4\xF3\xB6\xC8\x16\xB2\xE7\xE9\xF2\x98\xE8\xCC\xA9\xF2\xA7\xE0\x30\x42\xFA\xD2\x8B\xE7\xD6\x0B\xDE\x9B\x09\xE1\xF5\xB6\xE4\x21\xB8\xEF\x7E\xBA\xE8\x8D\x32\x0D\xEB\xFE\xCD\x1E\xA4\x92\x80\x6E\x07\xE4\xBE\x91\xE5\xAA\xAE\xA1\xA4\xE9\xEB\xF4\xE4\xF6\x66\xF6\xED\x00\x0C\xEA\xFC\xA9\x83\xF5\x73\x99\x0D\xA7\xEC\x02\x1E\xD7\x7D\xCE\xC4\x7B\x23\x85\xFC\xCF\xDA\x1D\xE7\xED\xDD\xEF\xD9\x29\xBB\x99\x0B\x39\xF8\x07\x24\xE9\xC4\x93\xE7\x3B\xF2\x9C\xC7\x92\x2D\x57\xE9\xA4\x4B\xD4\x99\xD3\xEB\xF1\x9C\xE1\x9D\xF0\xC3\xF4\x2A\xF7\x61\x8D\xE7\xF4\x8F\xE9\x4B\x80\xE9\x5C\xFE\x98\xF3\x17\x1A\xF3\x12\xF4\x9D\x95\xFA\xEE\x98\xFA\xF0\x9E\xA5\xE2\x32\xD7\xF5\x3F\xF1\xFA\x27\x63\xFA\x3D\xB9\x9F\x48\xF0\x44\x88\xA7\xF3\x4C\xFE\x3A\x4F\xF9\xD8\xF2\x9D\xF3\xDD\xA4\xF5\xF5\xE3\xFB\x09\xFD\xF9\xB6\xF4\xFB\x66\xD3\xF2\x04\x22\xF0\x0A\xD8\xA0\x4E\xC2\x20\x22\x03\xFD\x5B\xF6\xA4\x93\xF5\xB7\x49\xE7\x98\x31\xFE\x9D\x7F\xE4\xA6\x36\xF9\xFA\xC1\xF6\x39\x85\xEB\xFD\x85\xF5\x10\xBA\xF4\xC9\x7E\xE2\x19\xBF\xF4\xFE\xE6\xA2\xFC\x95\xE1\x27\x50\xF8\xFD\xF3\xFC\x2A\x02\x2A\xF1\xF6\xF9\xC9\x24\xFD\xFA\xC9\x9F\xFA\xF4\x68\xF9\x64\x7A\xE5\x7C\xF9\x44\x78\xA9\x2D\x7E\xCB\x7E\x00\xAF\x78\xEF\x74\xFA\x32\x79\xF8\x6C\x7A\x65\x50\xFE\x42\x69\xA6\x79\xF3\x04\x12\xA1\x7F\x7F\x27\x78\xBF\x42\x81\x50\x44\x00\xF9\x70\xF3\x6C\x79\x58\x7E\xE5\x6B\x7F\x3D\x61\x10\x6D\x7F\xDA\x6A\x7A\xC0\x79\xFE\x56\x1D\xE1\x76\xF8\x45\x7D\x06\x9A\x7F\xB1\x7B\xDB\x5D\x81\x18\x86\x00\x9E\x7D\xA8\x5B\x80\xDB\x45\x89\x7E\x4C\x01\x18\xF0\x7B\x7C\xFF\x7A\x7E\xFE\x7C\x38\x4F\x55\x80\x0D\x03\xC4\x4D\xC3\x7D\x45\x9C\x49\x53\x78\x80\xA1\x33\x03\xFE\x6F\x90\x68\x80\x05\x80\xF7\x45\x7A\x06\x8B\xFB\x5C\x4D\xE9\x73\x79\xE6\x51\x02\x93\x74\xD5\x77\xFE\x41\x80\x9B\x79\x80\x45\x83\x38\x47\x83\x3C\x08\xA9\x01\x80\xE8\x75\x7A\x9D\x53\xF3\x5E\x81\x1A\x80\x05\xEB\x82\x14\x8C\x74\x7C\x75\x0A\xA6\x81\xF7\x7B\x05\xE5\x7C\xDC\x0C\x81\xC5\x6E\x43\x40\x80\x82\x75\xA9\x65\x5B\x94\x49\x82\x66\x81\x04\x86\x80\xCD\x79\xE6\x6E\x80\x1A\x9D\x32\x6D\x84\x06\xAF\x82\xAD\x7E\xC2\x3F\x4C\x08\x9E\x81\x53\x65\xFF\x76\x7B\xC2\x59\x01\xDE\x69\x14\x87\x84\x70\x86\xE8\x72\x83\xDE\x7F\x00\xD9\x83\xF8\x75\x83\x2A\x80\x6E\x1D\x83\x49\x8E\xF5\x1E\x7A\x40\x16\x84\x86\x87\x3A\x63\x80\x89\x15\x02\x9C\x86\xFB\x68\x81\x12\x87\xD6\x75\x2E\x3C\x8D\xBF\x0D\x51\xA6\x77\x81\x67\x87\x3A\x7A\x80\x02\x12\x20\x2A\x00\x24\x91\x7C\xBE\x48\x90\x5C\x64\x35\x86\xBB\x60\x79\x0D\x7E\x62\xAF\x61\xC1\x37\x64\x5F\x5E\x9B\x10\x67\x2F\x92\x75\x02\x13\x60\x4F\x87\x1F\x8C\x20\x42\x85\x9D\x79\x80\xD2\x84\x3A\x65\x66\x79\x2D\xD2\x19\x32\x89\x49\x86\xB1\x64\x19\x84\x10\x67\x83\x0C\xA6\x85\x40\x19\x86\xC9\x4B\x1B\xAB\x5B\xBD\x6F\x0F\x3D\x53\x34\x83\x63",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void GuiIqPrimaryQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqCascadeQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqSetQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::presentation;

			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery, presentation::GuiIqQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqNameOption, presentation::GuiIqNameOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqChildOption, presentation::GuiIqChildOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqPrimaryQuery, presentation::GuiIqPrimaryQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqCascadeQuery, presentation::GuiIqCascadeQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqBinaryOperator, presentation::GuiIqBinaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqSetQuery, presentation::GuiIqSetQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery::IVisitor, presentation::GuiIqQuery::IVisitor)

			BEGIN_CLASS_MEMBER(GuiIqQuery)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(GuiIqQuery)

			BEGIN_ENUM_ITEM(GuiIqNameOption)
				ENUM_ITEM_NAMESPACE(GuiIqNameOption)
				ENUM_NAMESPACE_ITEM(Specified)
				ENUM_NAMESPACE_ITEM(Any)
			END_ENUM_ITEM(GuiIqNameOption)

			BEGIN_ENUM_ITEM(GuiIqChildOption)
				ENUM_ITEM_NAMESPACE(GuiIqChildOption)
				ENUM_NAMESPACE_ITEM(Direct)
				ENUM_NAMESPACE_ITEM(Indirect)
			END_ENUM_ITEM(GuiIqChildOption)

			BEGIN_CLASS_MEMBER(GuiIqPrimaryQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqPrimaryQuery>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_attributeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->attributeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_attributeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->attributeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_typeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->typeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_typeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->typeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_referenceName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->referenceName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_referenceName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->referenceName.value = value; })

				CLASS_MEMBER_FIELD(childOption)
				CLASS_MEMBER_FIELD(attributeNameOption)
				CLASS_MEMBER_PROPERTY(attributeName, get_attributeName, set_attributeName)
				CLASS_MEMBER_FIELD(typeNameOption)
				CLASS_MEMBER_PROPERTY(typeName, get_typeName, set_typeName)
				CLASS_MEMBER_PROPERTY(referenceName, get_referenceName, set_referenceName)
			END_CLASS_MEMBER(GuiIqPrimaryQuery)

			BEGIN_CLASS_MEMBER(GuiIqCascadeQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqCascadeQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(child)
			END_CLASS_MEMBER(GuiIqCascadeQuery)

			BEGIN_ENUM_ITEM(GuiIqBinaryOperator)
				ENUM_ITEM_NAMESPACE(GuiIqBinaryOperator)
				ENUM_NAMESPACE_ITEM(ExclusiveOr)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Substract)
			END_ENUM_ITEM(GuiIqBinaryOperator)

			BEGIN_CLASS_MEMBER(GuiIqSetQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqSetQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(GuiIqSetQuery)

			BEGIN_INTERFACE_MEMBER(GuiIqQuery::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqPrimaryQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqCascadeQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqSetQuery* node))
			END_INTERFACE_MEMBER(GuiIqQuery)

			class GuiIqTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqNameOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqChildOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqPrimaryQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqCascadeQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqBinaryOperator)
					ADD_TYPE_INFO(vl::presentation::GuiIqSetQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool GuiIqLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new GuiIqTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
