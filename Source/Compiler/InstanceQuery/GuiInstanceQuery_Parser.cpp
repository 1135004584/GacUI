#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Query"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum NameOption"
L"\r\n" L"{"
L"\r\n" L"\tSpecified,"
L"\r\n" L"\tAny,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ChildOption"
L"\r\n" L"{"
L"\r\n" L"\tDirect,"
L"\r\n" L"\tIndirect,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PrimaryQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tChildOption\t\tchildOption;"
L"\r\n" L"\tNameOption\t\tattributeNameOption;"
L"\r\n" L"\ttoken\t\t\tattributeName;"
L"\r\n" L"\tNameOption\t\ttypeNameOption;"
L"\r\n" L"\ttoken\t\t\ttypeName;"
L"\r\n" L"\ttoken\t\t\treferenceName;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CascadeQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tparent;"
L"\r\n" L"\tQuery\t\t\tchild;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tExclusiveOr,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tSubstract,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tfirst;"
L"\r\n" L"\tQuery\t\t\tsecond;"
L"\r\n" L"\tBinaryOperator\top;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INDIRECT = \"////\";"
L"\r\n" L"token DIRECT = \"//\";"
L"\r\n" L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n" L"token WILDCARD = \"/*\";"
L"\r\n" L"token OPEN = \"/(\";"
L"\r\n" L"token CLOSE = \"/)\";"
L"\r\n" L"token XOR = \"/^\";"
L"\r\n" L"token INTERSECT = \"/*\";"
L"\r\n" L"token UNION = \"/+\";"
L"\r\n" L"token SUBSTRACT = \"-\";"
L"\r\n" L"token ATTRIBUTE = \"@\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryFragment"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n" L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n" L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n" L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimary"
L"\r\n" L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n" L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n" L"\t= \"(\" !QueryRoot \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query Query0"
L"\r\n" L"\t= !QPrimary"
L"\r\n" L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n" L""
L"\r\n" L"rule Query Query1"
L"\r\n" L"\t= !Query0"
L"\r\n" L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n" L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"\t"
L"\r\n" L"rule Query Query2"
L"\r\n" L"\t= !Query1"
L"\r\n" L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n" L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query QueryRoot"
L"\r\n" L"\t= !Query2"
L"\r\n" L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 5782; // 27819 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 662;
const vint parserBufferRows = 6;
const char* parserBuffer[] = {
"\x00\x00\x81\x81\x84\x02\x81\x80\x07\x82\x00\x87\x80\x83\x21\x33\x3B\x31\x30\x64\x65\x11\x35\x35\x32\x39\x3D\x7F\x18\x99\x98\x8A\x85\x84\x8C\x28\x39\x69\x6D\x21\x36\x83\x8D\x8B\x8A\x8D\x19\x85\x08\x80\x0A\x90\x81\x92\x8B\x28\x99\x88\x0B\x93\x98\x83\x29\x32\x74\x2F\xA7\x91\x9B\x03\x94\x8E\x81\x1C\x8C\x8E\x90\x82\x8C\x8A\x8B\x96\x05\xC8\xA3\x28\x39\x34\x34\x33\x98\x1B\xBE\x81\x82\xAF\x81\x8A\x9C\x03\x2B\xD8\x80\x90\x33\x95\x32\x36\x3A\x50\xFF\x7F\x86\x81\x87\x8D\x91\x91\x79\x3A\x8D\x0B\x9B\xB0\x81\x30\x3A\x74\x20\xA2\x35\x34\x3D\x32\x27\x30\x6D\x65\x21\xA3\xB9\x85\xB0\x90\x91\x24\xC6\xB9\x33\x0B\x94\xC2\xB6\xB8\x72\xF4\xB6\xB8\xB5\x37\x24\x38\x3A\x69\x6F\x2E\x3B\xB2\xA8\x82\xB2\xC0\x69\x82\xFD\x88\x8B\xC8\x03\xA5\xA6\x64\x0E\xD0\xD2\xC4\xC8\x86\x8F\xBF\x68\xEA\xAC\xA1\x82\x3D\x32\x33\x8A\x5E\xE3\x0B\xD9\xB5\xD5\x8E\xBF\xB3\x81\xA6\xB5\x85\x8B\xDC\x39\x3C\x38\xB3\xFA\x90\xBC\xB0\x07\xD0\xDD\xCC\x26\x8E\x2B\x8A\xE0\x86\xDC\xE1\xBB\x79\xA2\xD1\xD3\xC0\xAB\xDE\x81\xDD\x37\xB9\x82\xC8\xA2\x80\xA6\x33\x34\x72\x73\x20\xB5\xE4\x99\x81\xEC\x9D\x02\x2B\xA9\xE0\x8F\x30\x39\xB0\xEB\x01\xD8\xF8\x97\xA9\xA9\x83\x39\x32\x63\x12\xCF\xB0\xA1\x0B\x97\x17\x95\xFD\x6B\x42\x83\x4A\x61\x61\x53\x80\x81\x05\xB1\x47\x80\x42\x09\x8A\x8B\x82\x40\x0D\xA8\x40\x7C\x40\xBB\x49\x1E\x10\x11\x49\x12\x15\x13\x10\x54\x04\x48\x42\x87\x00\x2F\x02\x8B\x7F\x08\xB1\x4A\x55\x41\x27\x98\x8A\x84\x87\xEB\x45\x4D\x8A\x88\x01\x25\x88\x48\x88\x02\x60\x8E\x11\x10\x4D\x05\x15\x07\x4A\x3B\x80\x4B\x15\x18\x2D\x3A\x11\x11\x0B\x5A\x1F\x1D\x17\x8F\x41\x83\x9A\x14\x0C\x2D\x39\x0D\x16\x0A\x2D\x90\x84\x78\x42\xBB\x57\x19\x10\x13\x44\x03\x11\x12\x14\x44\x11\x91\x43\x8B\x2A\x03\x02\x8E\x46\x34\x83\x41\x43\x13\x50\x05\x1E\x12\x97\x00\x6F\x88\x09\x99\x00\x61\x5C\x75\x40\x48\x43\x1C\x13\x13\x53\x05\x1C\x98\x00\x2F\xA9\x03\x9D\x9C\x50\x62\x98\x42\xA0\x00\x18\x1F\x12\x14\x7B\xAF\x8E\x17\x89\x52\xB1\x49\x03\x4A\x8F\x80\x46\x84\x15\x45\x12\x19\x9C\x8B\xEA\x41\x4F\x0A\x0A\x07\x23\x99\x4B\x4A\x48\x55\x1E\x11\x12\x4F\x2B\x99\xA4\x40\x2F\x2B\x03\x84\x00\x61\x51\xA5\x42\xAB\x53\x15\x12\x13\x14\x54\x12\x11\x10\x87\x31\x88\x49\xAC\x00\x2D\x2E\xAD\xA0\x4A\xBE\x81\x4E\xA9\x10\x54\x35\xA9\x12\x10\x55\x14\xAB\xAE\x40\xBB\x80\x1A\x02\xA7\x18\x7F\x9C\x4B\x54\x4F\x37\x9E\x13\xB2\x01\x7B\xAA\x0D\x67\xBF\x9A\x44\xA2\x40\x84\x84\x1F\x10\x15\xD8\x80\x4B\xAE\x0B\xC4\x61\x55\xBB\xB4\x08\x48\x53\x14\x14\xB7\x85\x1F\xB5\x40\x84\xAF\x03\x1F\x0A\x6D\x45\x41\x58\x89\x05\x52\x0B\x4A\xBF\x2E\x57\x68\x59\x10\x88\x69\x13\x5D\x5D\x64\x1C\x0B\x4A\xC2\x01\xE8\x66\x44\xC1\x71\x46\xCA\x60\x19\x2E\x12\x1F\x1B\x1B\x74\x13\x14\x1F\x48\x74\x17\x0B\x4A\xC7\x00\x40\x10\x08\x09\x3C\x11\x12\xC3\xC3\x05\xC7\xC5\x18\x19\x3E\x00\xCD\xBD\x40\x26\xCE\xC9\x1C\xC4\x89\x48\xC8\x07\x4A\x37\xCD\xC7\x70\xCD\x12\xC8\xCE\x0A\xC6\x1C\xD6\x0B\x4A\xD0\x21\xE0\x05\xCB\xC9\x33\xE9\xC3\xC5\xCB\xFF\xB0\xC8\xD0\xCF\x2A\xE4\x14\x07\x4A\x53\xFA\xC8\x64\xD4\x13\xEE\x02\x0C\x1D\x2B\x5C\xD0\x43\xD1\x32\xD8\xD8\xC2\x0F\x3A\x20\x02\x08\x10\x67\xE0\x0B\x14\x08\x37\xB9\x80\x09\xD9\x6F\x51\xCA\xC8\x74\x65\x20\x0D\x16\xD9\x3A\x22\x00\x09\x08\x31\xC7\x76\x12\x1C\x61\x27\x19\x5F\x57\x20\x37\x19\x18\x1D\x68\x20\x0B\x1C\x08\x71\xF5\xC1\x72\x74\x92\x60\x0D\x0E\xD9\x53\x00\x73\x19\x1A\xDF\x6B\xCA\xDD\x1F\x10\x2B\x4D\xE6\xD5\x68\x7F\xD1\xE3\xE0\x74\x2E\xC2\x42\xCB\x7D\xD8\x62\xEA\xE0\x5E\x74\x1E\x09\x0C\xA9\x2B\x41\xEF\xD7\xA9\xE1\xE0\xE0\xEB\x5F\x64\xD0\x08\x0A\xBB\xEC\xD8\x8D\x11\x6F\xE0\x0E\x71\x70\x85\xC7\xE9\xE3\xE2\xC3\xF4\xD0\xE6\x1B\x92\xD4\xE6\xE4\xE6\x69\x1A\xE0\x09\x1F\x20\x29\x00\x08\x1F\xBD\xE2\x0A\x0A\xDE\x86\xC8\xEA\xE2\xF0\xBF\x4F\xEF\x63\x74\xCD\xE2\x01\x12\x1B\x79\x1B\xE5\xF5\xF5\x22\xEB\xD2\x0A\x0B\x7A\xED\xD0\xF1\xD9\xAD\x6F\x6D\x6A\x1B\xB2\x74\xD6\xDC\xE3\x73\x20\x08\xD2\x4E\x9F\x65\x21\x00\xB5\x76\x23\xD5\x64\x76\x74\x01\x28\x74\xD2\x06\x8D\x74\xAD\x73\x75\x20\x0F\x80\x6E\xDF\x37\x74\x74\xDD\x7C\x74\x77\xF2\x61\x79\xF2\x0C\x35\x78\xEF\x48\x79\x7C\xCA\x63\x7D\xE4\x13\x72\x05\xCA\x78\x38\x7A\xD2\x74\x7A\xF5\x58\x7C\x76\xED\x5C\x7E\x78\xDF\x7B\x81\x74\x22\x8C\x78\x12\xA7\x79\x7D\xD3\x6B\x7D\x0A\x6D\x76\x6C\xF8\x7E\x76\x6D\xF4\x6E\x34\x6C\x78\x74\x79",
"\xBB\x4D\x26\x7F\x32\x7A\x24\x02\x80\x2A\x81\xB0\x4A\x68\x61\x55\x65\x21\x14\x84\x89\x68\xB9\x59\x6C\x06\x5E\x65\x21\x16\x92\x87\x6B\x27\xAB\x62\x77\x67\x7A\x6F\xDA\x19\x80\x6E\x2F\xBA\x7D\x0B\x22\x62\x05\xDE\x7B\x64\x8A\x06\x84\x75\x7B\xC7\x6C\x72\x19\x8C\x3B\x79\xF2\x66\x87\x72\x99\x64\x0F\xE6\x4B\x80\x01\x26\xBB\x66\x8B\x52\x74\x6A\xD3\x4E\x86\x8A\x9F\x75\x01\x8B\x02\x3B\x88\x15\xE2\x6F\x8B\xB2\x61\x8A\x6D\x3F\x93\x7E\x1C\x85\x95\x88\xBC\x69\x6C\x6F\x0B\x94\x81\xEB\x1D\x81\x8F\xC6\x7D\x62\x7C\xA3\x35\x86\xF3\x27\x89\x8F\xCD\x41\x82\x20\x03\x99\x93\xE8\x2D\x7C\x8E\x3F\xAA\x72\x93\x5F\x2E\x07\x0C\x0F\x82\x21\x08\xAD\x88\x96\x74\x16\x81\xEF\x64\x80\x7D\xE7\x1C\x80\x8E\x31\x80\x84\x1D\xB4\x86\x8F\xE7\x65\x91\x87\x2B\x99\x7B\xF6\x1C\x91\x98\x5F\xB3\x81\x94\xE5\x77\x86\xFA\x56\x76\x7A\xF7\x70\x7A\x64\xBC\x95\x7F\x10\xF9\x7C\x82\x23\xBD\x7F\x7F\x82\x2D\x97\x20\xFF\x84\x93\x40\x88\x23\x8A\x4F\x60\x93\xEB\x43\x1B\x24\x76\xB4\x71\x9D\xE5\x9A\x74\x26\xB2\x6E\x8C\x3A\x22\x60\x98\x8B\x7E\x93\xDC\x43\x90\x9A\x1B\xA8\x7B\x73\x0D\x0A\x00\x17\x83\x60\x90\x30\xA8\x68\x92\xBC\x9A\x9E\x62\x67\x86\x92\x36\xAA\x90\x77\xF6\x8C\x99\x3E\xF3\x8F\x98\xF2\x64\x87\x8E\x28\x9A\x8F\xF4\x27\x91\x21\x54\xB4\x98\x97\x39\x65\x21\x48\xB7\x9B\x95\x58\x96\x60\x63\x45\x0E\x0C\x19\x3D\x45\x20\x96\xA4\x64\xA4\x10\xBE\x04\x08\x40\x0C\xA2\x80\x1E\xA3\x82\x25\xA5\x75\xD3\x20\x75\x80\x5C\xAE\x05\x06\xB4\x81\x22\x2D\x8F\xA5\x83\xB2\x57\x81\x92\x1A\x82\x99\x5E\x12\xAD\x96\x50\x96\xA3\x94\x78\x91\x7A\x46\xAA\x87\x7A\x65\xAF\x86\x83\x4D\xA1\x85\x3F\xE6\x62\x9A\x64\xAB\x7E\x9A\xF1\x7F\x75\xF0\x5A\x97\x7E\x6E\x8B\xAE\x9B\x48\x87\x3A\x4E\x40\x02\x9C\x9E\x95\x8E\x71\x64\x1A\x03\x4A\x72\xAE\xAC\x46\x94\x67\xA4\x74\x09\xA4\x19\x20\x65\x20\xBE\xAF\xA0\x9E\x70\xB2\xA4\x10\x2B\x5B\x36\x2A\x8F\x58\x21\x87\xA0\x00\x15\xB2\x96\x17\x95\x0D\xB7\x9D\x32\x7A\x96\x08\x2F\x07\xAB\x38\x9F\x36\x29\x75\x84\x84\x11\x60\x38\x3E\x3A\x13\x9E\xA1\x84\x90\xAC\x10\x01\xA3\xA0\x8B\x20\x88\x05\x7A\x7C\x6E\x60\x78\xA6\x6D\x14\x27\x6C\xB4\x54\x92\xB2\x88\x15\xBF\x7B\xCB\xA1\x34\x98\x24\x89\x0A\x4A\x9C\xB3\x0C\xCF\x9E\xAB\x9E\xE4\x82\xB4\x61\xE3\x98\x33\x9A\x80\x07\xA6\x98\x35\x63\xC5\x79\xAA\xA5\x7C\x42\x21\x5F\x7F\xB1\xB3\x4C\x8C\x51\x21\x13\x7A\x20\x06\xC3\xAE\x26\x60\x30\x02\x97\x28\x2B\x26\xBB\xB4\x7B\xBA\xEE\x57\xB1\x78\xAE\x37\x7C\x0E\x20\x14\x89\xF0\x36\xBC\x7E\x10\x14\x2C\x28\x6B\xB0\xB6\x78\xE5\x60\xB8\xCC\x00\x0C\xBA\x00\x36\xBB\x76\xD9\xBA\xB1\xED\x9A\x6B\x07\x2B\x20\xC1\x78\xA6\x20\x07\xF1\x9B\xBD\xBC\x5D\x24\x72\x7A\xE5\x6C\xBD\x23\xAF\xBE\x2A\x82\x37\xBD\x7D\x5A\xB4\xC0\xFE\x97\xBF\x75\x02\xC5\x21\x86\xA5\x63\xBF\xF4\x87\xC5\x6C\xE6\xAD\x76\xC8\x0B\xC0\x05\x06\xFD\x7F\xC1\x45\x26\x24\x7E\x80\x0A\xBE\x02\xCC\x3D\x20\x2F\xD7\xC0\x5E\xFA\xAC\x5B\x80\x1D\x37\xA5\xE2\xB3\xBB\x84\xFD\xB6\x25\x18\x16\xC2\x30\x31\x0E\x04\x0D\x3E\x1B\x24\x22\xC3\xC6\x22\x31\x06\xC1\x8F\xC1\x7F\x3B\xF0\x28\xBE\x85\x1E\xC4\xC1\xF0\x77\x39\x3E\x95\xAD\xBF\x3C\x82\x2C\xA9\x7B\x65\x7A\xB7\xBA\x21\x3D\xB3\x9B\x63\xB6\x40\xBA\x29\xC8\xFA\x97\xBA\xCC\x1C\xDD\xC6\x92\xC8\xCC\xC8\xF0\x22\x3E\x6C\x5E\x1A\x6C\x79\xE5\x64\xCA\xFD\x17\xCB\x3E\x59\xD8\x9C\x08\x5B\xC4\x85\x22\x38\x0B\x0C\x6C\x15\x0F\x1C\x69\x06\x0F\xC6\x32\x09\xCC\x2B\xCD\xC4\x92\xBF\xCD\xC6\x59\xAA\x13\x25\x8F\xC7\xC9\x1E\x65\xC1\xCA\x36\xE5\x6D\xC9\x6F\xD0\xCB\x9C\xA0\x05\xCE\x2B\xC7\x88\xCB\x26\x37\x9C\x0C\x8B\x7C\xCE\xB3\x5D\xCD\x22\x54\xDE\xB5\x1F\x72\xBA\xCD\xB2\x64\xCD\xCD\x4E\xD0\xCE\x9C\x9F\xCC\xD2\xFC\x36\xCF\xD3\x78\xC1\xD6\x96\xF0\x05\x7C\x3F\xC0\xD2\xD0\x84\xC6\xD3\xE6\x16\xC8\x69\xC4\x82\x21\xB1\x8B\xB1\x05\x25\x2B\x2B\xD8\xC8\x87\x3A\xB6\x69\x7A\xCE\x6D\x99\xB6\x6D\xCD\xAD\x35\xB7\x9F\xB5\xBC\x41\xE5\x90\xB6\xA4\x72\xB4\xB2\xA2\xD8\xAB\xB4\xB8\xB6\xD5\xDD\x97\xDA\xD5\xEB\x7A\xD8\xCA\x65\x94\xD8\x99\x46\xD9\x20\xC8\xC8\x6A\xD6\x1F\x0B\x24\x7A\xCE\xD8\x33\xA7\xB7\x92\x4E\x2C\xB2\x04\xD7\x89\xD0\x66\x82\x32\x04\xA3\x96\x22\x06\x21\xF8\x13\x25\x07\xF2\xD2\x0C\x6B\xC9\x0E\x19\x30\xD1\xD3\x2D\x13\xD7\x92\xF4\xC6\xD6\x4F\xFD\x78\xD4\x16\x3B\xD6\x1D\xF5\x02\x0C\xF1\x00\x70\xDB\xD3\x68\xCE\x4E\x0B\xE6\xCC\x20\xE2\xE1\xE0\x0C\xEE\xE3\xA5\xEE\xCF\xC9\x15",
"\x12\xE6\xD2\xB5\xD5\xC8\x19\x77\xCA\x3A\x93\x1A\xE4\x84\x55\x0E\x0F\x74\x08\xDB\xC7\x91\xC3\xE5\xE1\xB2\x84\x17\x4A\x42\xEA\xE1\x94\xCF\xE7\xC9\x11\xF5\xD3\xA4\xD3\xC5\xE3\x99\xF8\xD5\xE6\x16\x21\xDD\x1C\xA5\xD5\x84\x8E\xDE\xE1\x0C\x20\xEB\xD7\x98\xA8\xEE\xD5\x80\xC7\xEE\x6C\x2E\xEA\xE9\x0C\x4C\xE2\xE6\x9A\xEB\xAF\xE6\x66\x79\xE7\xCE\xD3\x7F\xDE\x0A\xCB\xD5\x3C\x6E\xF3\xD3\xEB\x11\xD5\x20\xBA\xE9\xC8\xC9\x0C\xE3\xEF\xCA\xCE\xC9\x8D\x38\xCA\xE8\x06\x64\xF7\xD7\xC5\xB9\xD9\xE2\x3D\xD4\xEE\xD7\x81\xC3\xD1\xA1\xCF\x07\xD1\xE9\x6C\xD0\xEF\x5D\xF3\xE0\x08\x18\xD1\xA2\x4D\xF4\xD5\xD3\x4E\xE3\xF0\xD4\xF9\x08\xEC\x11\x27\xD7\xCB\x59\xED\xEC\x8F\xC8\xCF\xC4\x81\x31\xC0\xC8\xCA\xA8\xA6\x4A\xB5\xC0\x21\x1B\xF7\xEB\xD2\x82\xA2\xF6\xCF\xF0\xE3\xF4\xA0\xF1\x04\xE8\x05\x38\xF7\xEB\xA4\xEA\xE8\x95\xD3\xF4\xE5\x69\x89\xEB\xAB\x94\xE5\xED\xA7\xFA\x25\xF3\x53\x16\xE9\x5C\x58\xEA\xD5\xC7\xCD\xE6\xE8\x7B\xE2\x3D\x1A\xE1\xE3\xF9\x98\xC2\xF0\x04\x18\xFC\xF2\xE1\xBC\xD8\xE6\x9D\xD2\x33\x73\xB2\xE1\xE1\xE9\x81\x27\xF4\x93\x05\xE3\xC6\xAB\xEB\x26\xEB\xA3\xE2\xB1\x60\x40\x26\x55\xFB\xCB\xB8\xEB\x80\x0D\x33\xF8\xD8\x67\x75\x2C\xA2\x20\x4B\xAF\xF8\xAE\x79\xA3\xE2\xC2\x08\x1A\x68\x93\x6F\x73\x41\x62\x03\x74\x72\x10\x76\x74\x66\x79\x7F\x75\x2E\x43\x62\x97\x7D\x74\x66\x79\x67\xA3\x6B\x67\xDC\x75\x6E\x5E\x69\x6A\x00\x5B\x75\xAD\x62\x76\x0C\x81\x67\x0E\x82\x65\xC4\x77\x7D\xD9\x7D\x79\x88\x70\x6C\x8B\x7D\x78\x7D\x01\x7E\xE6\x7F\x73\x05\x72\x03\xB8\x72\x10\xBA\x7C\x7E\x91\x74\x70\x0C\x81\x71\x1F\x80\x73\x98\x71\x81\x36\x7B\x7D\x1B\x7D\x71\xCB\x79\x75\xCE\x7C\x7B\x23\x7C\x80\x2E\x77\x83\x4B\x71\x82\x16\x78\x7D\x84\x7A\x7D\x13\x84\x75\x6A\x7F\x7D\xD3\x3D\x6E\xC7\x1F\x6E\x00\x11\x6F\x32\x32\x64\xF6\x65\x10\x59\x85\x5A\x79\x09\x6F\x6C\x4B\x5A\xCB\x59\x46\xAE\x5E\x7E\x00\x00\x7F\x60\x88\x31\x01\x25\x10\x69\x86\x7F\xAE\x38\x7E\x64\x03\x7E\x00\x1F\x62\x38\x66\x12\xFD\x73\x53\x52\x88\x19\x6D\x5A\x58\xF2\x68\x57\x40\x32\x07\x74\x0E\x5C\x01\x19\x2F\x22\x31\x5D\xCF\x67\x87\x68\x10\x87\x00\x01\x63\xF2\x6D\x87\x74\x04\x1C\x1C\x12\x32\x5C\x8E\x03\x2A\x86\x11\x30\x06\x5C\x03\x4E\x5F\x7C\x8B\x31\x7E\x83\x7F\x9D\x13\x88\xAF\x75\x60\x93\x89\x07\x30\x0E\x88\x00\x74\x60\x3F\x3A\x89\x74\x04\x85\x00\x09\x58\x90\x87\x5D\x92\x8D\x73\x01\x76\x89\xA5\x84\x70\xA9\x79\x31\xA8\x8C\x89\x01\x1E\x89\xEC\x71\x8A\x32\x04\x8A\x71\x75\x70\x8C\x8A\x8A\xAC\x86\x34\xEC\x72\x8B\x6E\x55\x4F\x74\x55\x10\xC9\x80\x53\xA4\x35\x8B\x8C\x89\x7F\x01\x1C\x52\xBA\x84\x54\xAD\x3E\x03\xC6\x8A\x87\x1F\x59\x53\x44\x35\x10\xDB\x8C\x8C\x0D\x4C\x88\x51\x42\x10\x51\x4D\x8A\xD4\x89\x3B\x64\x86\x86\x74\x8B\x5C\x86\x15\x10\xEB\x8C\x86\xCE\x88\x8A\x88\x8F\x62\xBA\x87\x86\xB9\x47\x8E\xB3\x89\x07\x78\x5F\x00\x2B\x1A\x8F\x71\x78\x57\xA7\x8C\x31\x80\x80\x10\x82\x84\x8C\xF4\x8F\x8A\x01\x87\x8F\x31\x07\x8D\x64\x6F\x8E\x1C\x38\x8B\x45\x33\x87\x78\x71\x8A\x31\x0E\x8B\xB5\x71\x64\xC1\x8B\x12\xC3\x8F\x7A\x49\x69\x87\x8B\x40\x48\xE1\x81\x10\xE8\x41\x5A\x9F\x44\x31\x33\x0E\x4E\x05\x16\x92\x5C\x86\x57\xFE\x75\x8E\xE8\x5A\x67\x0A\x55\x17\x5A\x5F\x54\xE6\x3F\x4F\x21\x7D\x6D\x22\x91\x35\x06\x52\x46\x48\x55\x46\x94\x4C\x50\x6A\x49\x5A\xDE\x8F\x46\x13\x8F\x92\x4E\x53\x42\x50\x59\x51\x61\x6A\x90\x2C\x9C\x91\x2C\x92\x64\x41\x50\x10\x43\x59\x8D\x31\x56\x54\xBB\x42\x56\x65\x32\x43\x75\x3A\x67\x58\x94\x6D\x25\x46\x4C\x52\x5F\x59\x2C\x46\x36\xCB\x4A\x95\x4A\x5D\x18\xE4\x63\x93\x38\x44\x55\xD5\x4D\x43\x61\x50\x44\x20\x04\x56\xB1\x15\x49\x47\x40\x4E\xA1\x6D\x29\x08\x1C\x94\x37\x93\x31\x14\x94\x97\x16\x1F\x20\xDD\x22\x13\xB4\x74\x45\x7B\x99\x44\x82\x12\x20\x21\x00\x2D\xFF\x01\x8A\x30\x02\x2D\x48\x1A\x13\x02\x23\x02\x88\x9C\x8B\x8C\x97\x8F\x02\x25\x02\x88\x9A\x94\x52\x94\x3A\x83\x9A\x56\x85\x9B\x12\x27\x08\x98\xF6\x8D\x8F\xCB\x53\x99\x71\x72\x20\x29\x01\x99\xB0\x8D\x63\xA4\x95\x7B\x02\x2B\x02\x88\x9F\x01\xF3\x2C\x2A\xEB\x2F\x0F\x02\x2B\x2E\x7E\x97\x9B\xB8\x90\x21\xB3\x9B\x62\xB1\x99\x9B\x7C\x20\x2A\x2B\x16\x9B\xB8\x98\x97\xC1\x53\x92\xC2\x94\x25\xB4\x78\x95\x02\x28\x99\x38\x50\x51\xFF\x03\x9B\x76\x95\x10\x70\x2E\x9B\xEB\x22\x2D\xC7\x9E\x97\xC4\x9D\x45\xE5\x4C\x20\xB3\x98\x88\x7B\x2E\x9B\xB8\x9F\x9C\x04\x2B\x62\xD2\x29\x9B\xEB\x27\x9D\xCF\x5B\x1A",
"\x87\x1D\x93\x8C\x12\x20\xD9\x9B\x6D\x70\x52\x20\xE2\x9C\x20\xFC\x88\x22\xE0\x91\x9E\xB3\x9B\x2E\x64\x89\x9B\xDF\x98\x9B\x9B\x98\x19\x8E\x9E\x39\x02\xA7\x8C\xB8\x43\x9D\x02\x21\x8F\x01\x1B\x95\x34\x41\x9A\x00\x08\x51\x79\x4C\x9C\xAF\x49\x53\xFF\x0B\x27\x13\xA4\x7B\x02\x14\x86\xF3\x95\x10\xAA\x8D\x01\x04\x2A\x9F\x95\x1A\x2F\xEB\x24\x1C\x1E\x0D\xA1\xEA\x95\x10\x23\xAC\x9D\x2B\x11\x9D\x02\x1C\xA1\x28\xAF\x21\x82\x4D\xA2\x49\x1F\xA2\x20\xA6\xA1\xD1\x84\xA2\xBA\x2B\x12\x20\x01\x9C\x3B\x6D\x1D\xF7\x90\x14\x1F\xAC\x97\x79\x0B\x9C\x03\xA8\x8D\xCD\x94\x3A\x06\xAB\x1C\x48\xAD\x1C\x65\x9B\x3C\x0C\xAE\xA0\x52\x50\xA1\xB6\x39\x53\xA2\x7D\xA3\x50\xAD\x53\x39\x5D\x9B\x3D\xA7\x3A\x3B\x54\xA4\xDA\x90\x57\x47\xA8\x10\xEB\x82\x10\xEB\x84\x94\x31\x92\x19\x4D\xAE\x95\x2B\x3F\x9E\xEB\x60\x57\x15\xA8\x9C\x08\x18\xA1\xEB\x23\x9D\x1F\x91\x27\xD5\x92\xA3\xBA\x94\xA3\x00\x10\x8D\x74\xAA\xA3\x08\x1B\x01\x36\xAF\x2A\x1F\xA7\xA7\xA6\x1B\x12\x27\xA3\xA3\x08\x11\x90\x00\x05\xA8\x82\xA5\x10\x2A\xA1\x10\x2C\xA6\xA8\x1A\xAB\x12\x8F\xAC\x2C\x7C\xA1\xA3\x59\xA5\x1C\x3F\xA4\x98\x26\x12\xA4\x08\x18\x5C\x51\xA0\x51\x5F\xA0\x63\x49\xA0\x00\x0A\xA1\x4A\x67\xA4\x4A\x4F\xA3\xA4\x41\x94\x07\x2B\x68\x9E\x0B\x25\xA5\x79\x05\x4F\x58\xA7\xA9\x7D\x4B\xA5\x1D\x95\x4E\xA1\xA2\xA6\x85\x11\x10\x64\xAC\x4F\xD3\x1D\x9B\x84\x27\x43\x6A\xAF\x56\x23\x9E\x97\x19\xA0\x21\xC6\x5D\xA8\xE6\x2F\xA7\x02\x1B\x62\xAA\x85\x9B\x2B\x19\xAB\xE4\x73\xAA\xA5\xA3\x1D\xA7\xA1\x55\x2B\x30\xAB\xF5\x42\x9B\xCC\xA2\x2C\xB4\xAD\x9F\xB7\x9F\x9F\xA9\x1D\x99\x9D\xAA\xAA\x2C\x92\xAD\x71\x84\xAD\x4B\xA4\x43\xC0\xA1\x10\x37\x4A\xAD\xB8\x4D\xA6\xFA\x2B\x27\xAB\x20\xA7\x95\xA2\x10\x7E\xA0\xA3\x17\xA1\xA8\x01\x17\xAC\x64\x18\x10\x8A\xAD\xAF\xEB\x28\xA8\x01\xBB\xA7\x08\x1A\xAC\x00\x03\xA9\x02\xB8\x91\x92\xAD\xAD\x00\x12\xA7\x0E\xBC\x2E\x52\x41\xB1\xAB\x2A\xA7\x00\x0B\x2E\xE4\x94\xAB\xE2\xA9\x1B\x7D\x93\xA4\xA8\x44\x5C\x9F\xA6\xA4\xB8\x98\xA0\x4A\xAE\x4C\x66\x91\x4A\xED\xA0\x10\xEF\xA6\xAE\x99\x9D\x3A\x53\xA7\x9F\xF0\xA7\xA5\xB4\xAE\x9E\xB6\xA0\x58\x23\x98\xAE\x00\x01\xA6\x01\x13\xA6\x14\x57\xB2\xD6\xA0\x29\xE6\x18\xA6\x64\x03\xAC\x76\x52\xAF\xD7\x10\xB4\xFA\xA1\x88\x84\xA1\xB1\x08\xBA\xB0\x06\xB1\xA9\x08\x1E\xB4\xDC\xA7\xA3\x08\x19\xA3\x49\xBD\x17\x00\xB1\xB1\x64\x89\x2E\x71\xA6\xA7\x0B\xBD\x2E\x5E\xBF\xB4\x47\xB8\x10\x16\xB7\x9E\xC0\x97\xA9\x1B\xB8\x1C\x1D\xB5\xAE\x6C\xBC\xA5\x21\xBD\x3A\x38\xB4\xB2\xA4\xAB\xAE\x28\xBB\x12\xC1\xA8\x3E\x31\xB0\x51\xAD\xA4\xAB\x79\xB4\x3A\xB3\xA7\xA9\x44\xB0\x48\x38\xBA\xB3\x00\x1C\xB3\xEC\x95\x51\x92\x19\xB2\x00\x02\xAC\x35\xB9\x97\x08\x36\xAC\xB3\x99\xAC\xF7\xAF\xB5\xF6\x98\x58\xB8\x9D\xB5\xB7\x92\xB7\xD5\xA9\xB8\x76\xBE\xAE\x78\xBC\xB2\x45\xAD\x3A\xF8\x94\x20\xF5\x9D\xAC\x33\xB7\x9B\xFE\xA1\x27\xBC\x9F\xAD\x67\xB5\xB9\x59\xA1\xB8\xE5\x4E\xAA\x14\x29\x9C\x65\x9C\xA9\x02\x40\xB2\x56\xAE\x9C\xD0\x91\xAD\xB4\xA5\xA7\x07\x90\xB8\x8D\xB5\x9C\x51\x33\xBA\x0C\x2E\xAC\xBD\xB3\xB9\x07\x28\xA8\xF9\x20\x97\x44\x44\x37\xB6\xBF\xB1\x04\xA9\x53\x0B\x29\xBA\x53\xB5\x10\xF3\x73\xB3\xD4\xB6\xB4\xFF\xAE\x97\xEB\x23\xA7\xBF\x9F\xBB\x13\xB0\xBC\x77\x98\xBB\xC4\xA1\x35\x7F\xB9\xA5\x86\x8B\xB6\xA7\xBB\xA8\xEC\xBE\xAD\x97\xA2\xBB\x03\x29\xB6\x01\xAD\xB6\xD0\xBE\xB6\xB9\xB4\x3A\xDA\xB1\x27\xF4\xA7\xB9\x3B\xA6\x26\x68\xB9\xA9\x9C\x9B\xA9\x1E\xBD\x51\xE4\xB5\x4F\x2F\xB0\x9E\x7D\xBD\x3A\xE7\xBD\xA3\xB0\xBE\xA5\xB8\x94\xB8\x39\xBC\xAB\x3D\xBC\xA4\x48\xBD\xA0\x42\xBD\xC0\x23\x99\xBF\x00\x0B\x2A\xD0\xA4\xB5\xD2\x9A\xB1\x00\xC0\xA0\xE4\xA7\xBB\x6D\xBB\xAA\x7B\xB7\xA9\x09\xCF\x15\x0B\xC7\x9F\x18\xC1\x35\x83\xBB\xAB\xEB\x9E\x38\x65\xAE\x06\x8A\xBC\xB8\xE3\xB5\x57\x80\x4B\xBE\x57\xB5\xBD\xE9\x9A\xC3\xFD\xA4\xA1\x7B\x28\x88\x1D\xC5\x10\x24\x07\x2A\xAE\xB2\x10\x45\xC7\xA9\xE9\xB9\x07\x2B\xC0\x9E\x8A\x9A\xC1\xA5\xBB\x20\xEB\x26\x5C\x7B\x2B\x62\xC6\x59\x9B\x4B\xC0\xBF\xAB\x96\x5B\x02\x2A\x98\x3E\xCD\xBE\x62\xB1\x10\x69\x8E\xC3\x1A\xCA\xC1\x7C\x4B\x62\xD4\xBB\xB5\x11\xBB\x2E\xF9\xA0\xA9\x3E\xA9\xB5\x3B\xC4\xB0\x4C\xBD\xB0\x3B\xCB\xA1\xC8\xB0\x00\x2C\x06\xC4\xA6\xB8\x10\x79\xC7\xA9\x8A\x9D\xC4\xBE\x92\x91\x1A\xC0\xC1\x68\xC6\xB6\x7D\xA1\xB1\x22\xA1\xB1\x72\xCB\xC3\x6A\xCB\xC3\x4D\xB1\xB1\x76\xCE\xC1\x2B\xAA\xC7\xD5",
"\x54\xC7\x59\xAA\x98\xF0\xB2\x7A\x98\x7D\xC5\xA9\x98\x64\xD9\xBD\x9B\xC6\x5D\x9B\xD4\xB0\xB1\x3B\xC2\x2D\xDE\xB4\xBD\x15\xB8\x9B\x7B\x28\xB0\x49\xC7\xC9\x9D\xC2\x8A\x99\xCB\x63\x21\x6F\x15\x9C\xC0\xBE\xD7\x58\xBA\xF9\x90\x20\xC7\xBF\xBF\x83\xAB\x10\x0D\x15\x15\x29\x6A\xBE\x7B\xCE\xBA\xD7\x55\xC6\x7B\x27\xC6\x6B\xCB\x12\x19\x0A\xB5\xFC\xA1\xC6\x58\xB6\xA2\x8A\xCB\xB4\x8E\xC6\xC9\x60\xCB\x8A\xD4\xC9\x2D\x2B\x1D\xC7\x05\x10\xC8\x02\x24\x91\x28\x63\xBF\x47\xC5\xC9\x71\x70\x03\x2B\x6A\xCD\x3D\xAF\xC7\x5F\xC9\x5F\xAF\xC1\x03\x83\xCD\xBF\xCE\xC7\xB1\xCA\xCC\xCC\xBD\xCE\xC6\xDB\xB2\x10\x05\xBC\xC3\x4A\xB0\xC7\xF4\xC0\x10\x8F\xC5\xC7\xD7\xCB\xAC\x51\xBD\xB9\xBC\xC6\x1B\xBE\xC3\x14\x10\x62\xC0\xE0\xB3\xCC\xD7\x5B\x62\x52\xB9\x9B\x98\xC8\x9B\x9A\xCD\x74\xB5\xC4\xCC\x40\x6F\xC9\x03\xC0\x10\xA2\xCB\x2E\xA9\xCB\xC3\xA4\xCB\xCF\x12\xB2\x8E\xB8\x9C\xCD\xCD\xC8\xA9\x05\xD0\xCC\xE0\xC3\xCC\x0A\xDB\x5D\xAC\xC4\xAB\x0F\xD7\x9B\xA2\x73\xCB\x88\x48\xD2\xE2\xC5\x7B\x30\x0E\x9B\xD9\xBD\xD1\x3D\xAB\x27\xD2\x27\xC5\x10\xDF\xCA\x30\x08\xB3\x0E\x9E\x19\x4C\x18\x59\x34\x4C\x5F\xBA\x54\x06\xBC\x54\x07\x4B\xC9\xBD\xA6\xCC\xBA\x60\xB4\xBF\xF7\x9A\x98\x40\xDA\x7E\x01\x13\x6E\xA1\x42\x7A\xD6\x6D\x59\x4B\xCF\xCE\xFF\x0B\xD1\x59\xAE\xBB\x24\xCE\xCA\xB6\xCB\x5D\xEB\xB9\xBD\xEB\x2B\xCC\xE9\xC6\xCC\x43\x3C\xBB\x3B\xCC\xC6\xF2\xC4\xD0\x1E\xD9\xC8\x71\xC2\xCD\x05\x1B\x2E\x26\x04\xC9\xEA\xC8\x10\x77\xDE\xC7\xEB\xC2\xD2\x2E\xDF\xCA\x32\x0A\xC1\x7C\x55\x23\xC9\xC7\xC8\x8C\xC3\xD2\xD4\xB2\xD7\x1E\xDB\xC8\x75\xD4\xD7\x02\x15\xC5\x8E\xD1\xD5\xEB\xC1\xCB\xE0\xBB\xC9\xEE\xCC\x62\xF7\x81\xD8\xB3\x9D\x9B\x21\x5F\xD8\x73\xC1\xD0\xFE\xC0\xDA\x7E\x9B\xCA\xD9\xCC\xD2\x93\xD8\x9B\xAB\x94\x79\x13\xD9\xD2\x3D\x68\xCB\x11\xB8\xD6\x5F\xCA\xD6\x08\x1B\x8D\x84\xDD\xD6\x38\xAF\xD6\x6F\xC1\xD7\x91\xDF\xCE\x8C\xD4\xA9\x7A\xD8\xD7\x98\xDF\xDB\x7C\xD3\xD6\x3D\x6E\xD7\x7E\x9C\x8B\x82\xDC\xD6\x1E\xDE\xD6\x87\xD3\xCF\xD5\xCA\xD8\xD5\xCD\xDB\xD8\xCA\xCF\x9E\xD9\xD0\x01\x17\xCF\x0E\xD7\xDA\x7F\xD5\xD9\x12\xD7\xD9\x02\x8A\xD9\x04\x2C\xD9\xC0\xD4\xBD\xFD\xCE\xD1\x91\xC3\xDA\x29\xA5\xDA\xC3\xD4\xD1\x3D\x6A\xC5\xAD\xBA\xDA\xDE\xD8\x90\xF7\x99\xBD\xAB\xB7\xA9\xBD\x9D\xD4\x4A\xC1\x98\x48\x36\x9D\xB4\xAD\xC2\x13\x30\xBF\xFC\x5A\x9C\x17\xD7\x5C\x05\xC1\xAF\xBB\xBE\xA2\x97\xAA\xD3\x61\xBE\x9B\x4B\xCC\xDF\xE2\xBF\x32\x38\xCB\x9D\x1E\xDF\x0F\xDE\x9B\xCB\x96\xA1\xBE\xE8\xBA\xDF\x32\x3B\xC3\xFF\x08\xD3\x92\xDF\xD4\x2D\x54\xAB\x0D\xEB\x12\x2A\x04\xAB\x0C\xAC\x86\xD2\x2B\xD7\x62\xDC\xDE\x04\x72\x2D\xE6\xCF\xE1\x2C\xE3\x69\xD2\x2D\xCA\xE7\xCE\xD3\x53\xDC\x19\x55\xD3\xD4\xB7\x51\x4A\x46\xD6\x6E\x5A\xDA\xE1\xC7\x1C\xD4\x0B\xE9\xDD\x20\xEA\x7F\x22\xE0\xE4\x98\x12\x2D\x25\xE7\xA9\x27\xE4\x8F\x29\xE6\xDA\xC4\xDD\xE2\xEA\xDB\xE2\xAC\xD8\x64\x33\xE0\xE5\x31\xEF\xD3\xB8\x91\xD4\x56\xD3\x1D\x58\xD9\xD4\x5B\xD8\xCF\x71\x2E\xD5\x3D\xAB\x9A\x46\xE9\xDF\x6E\xA6\xBF\x79\x0A\xE4\x26\xE5\xC1\x28\xEB\x12\x2A\xE5\xE3\x51\xED\x70\x2E\xE8\xE5\x55\xE2\xE3\x2B\x14\xE3\x30\xE7\xE7\x35\xD2\x9F\xB9\xC6\xD8\xB1\xD3\x9B\x7B\x2C\x30\x2E\x25\xD8\x05\x16\xB5\x1E\xDD\xC8\x8D\xD8\x10\x4B\xE5\xE8\xD6\xD0\x10\x8D\xE2\xE7\x31\xE2\x03\xC6\xDF\x20\x4D\xE9\x8E\x18\x36\xD1\x08\x19\x8C\xD5\xDA\xDB\xD4\xD4\xB9\x3D\xC0\xCD\xB7\x94\xDA\xC2\xD4\xE5\x33\xD3\x72\xEE\xD0\xE2\xF0\xDF\xE8\xC1\xD5\x7B\x32\x0E\xDA\x3B\xCD\xC6\x64\xC2\xE8\x0B\x33\xDE\x86\xC7\xE8\xB8\xD5\xCF\xD3\xD5\x10\x91\xEF\x25\x97\xDD\xEB\x4E\xC0\xD8\x95\xEB\x20\x97\xE6\x11\x78\x5A\xE9\xCA\x86\xEB\x23\xD7\xCF\xD4\xB2\xDD\x07\x24\xEA\x05\x11\xE7\x7B\xE7\xEA\x01\x79\xEA\x17\xEB\xEA\xE1\xC9\xD7\xAE\xED\xA3\xD9\xB5\xDE\x39\xD7\xE4\x69\xE9\x7D\xAB\xD4\xED\x3D\x68\xB3\x89\x21\x10\xED\x1C\xA0\x9F\x79\x6A\x12\x9C\xD5\xE7\xDF\xED\x68\xEC\x1B\xE6\x1B\x84\xE3\xEA\xED\x64\x66\xEE\x46\xCD\x1E\x41\xD5\x82\x8A\x76\x68\xED\xE9\xCE\xD5\xC2\x16\xBB\xDE\x9B\xE0\xAE\x97\xFC\x52\xEE\xF1\xDF\x8B\xF8\xE8\x10\x2D\x2D\x1E\xAB\x9F\x84\x6E\x08\xDC\xB3\x9E\xEC\x04\xF0\xEE\xF2\xE6\x13\xF4\xE9\xF0\xAE\xEB\xF0\x8E\xE0\x00\xE9\xE5\xC1\xC9\x7E\x83\x1F\x7C\xAA\x80\xD9\xA5\x66\xD7\xDB\x69\xD4\xEB\x08\x19\x85\x0F\x2B\x2E\x16\xB0\xD9\x64\xBD\xE6\x6F\xA7\x8F\x78\x53\xEC\x07\x21\xE6\xB9\x97\xD3\x43\xE1\xD2\xAD\xB3\xC9\xEB\xD7",
"\xE7\x31\x07\xE5\x3F\xF4\xEE\x94\x87\xE3\xD6\xB9\xE3\xA0\x1B\x3C\x3D\xE8\xD4\xE7\x6B\xD4\xB3\x98\xDF\x59\xA7\xDF\xFF\xC1\xC8\xEB\xC2\xF4\xA6\xE6\xEF\xDB\x56\xF4\x02\x1D\x19\x5D\xE2\x19\x5F\xED\xF4\x48\xE8\x16\x5C\xD4\xE6\xF7\x9A\xE0\xA2\xD2\xE9\x40\xF6\xF5\x68\xF4\xF4\xA2\x8F\x20\x3A\xF7\x4E\xB4\xA3\x9D\xD2\x28\xDD\x3D\xD3\xE7\x32\x05\xE7\x43\xF8\xF5\xAA\x99\xE7\x76\xEC\xF6\x5A\xE7\x9B\x5C\xEA\xE3\x4A\xF4\x7B\x47\xD0\xE6\x61\xF0\x13\x4F\xFB\xF3\xB7\x92\xF7\x03\xF4\xE4\x93\xE8\xF7\x57\xFD\xEA\x64\x6A\xF6\xD3\xEA\xF7\x45\xFB\xE5\x54\xD0\x10\x5D\xF1\xF1\x3B\x69\xD5\xBD\x51\xE6\xD9\xB4\xF6\xE0\x92\xF5\x9F\xE1\xEC\x76\xF0\xF9\x6B\xF6\xF9\x78\xE8\x10\x7A\xE6\xFA\x59\xE6\xD3\xB3\x9A\xE8\x00\xF6\xF2\xB3\x92\x20\x22\x03\xFB\xF3\xD3\x9B\x1E\xE0\x9E\x98\xBE\x97\x81\xF9\xF4\x45\xD4\xF8\x3E\xEF\xF9\x87\xF7\x11\x89\xF0\xF7\xEF\xBA\xDC\x0F\x2F\xFB\x44\xD7\xD5\x9D\xF6\xF8\x69\xE4\x45\x63\xFC\x23\xB8\xFC\xE1\x02\x2D\xFA\xD5\xF3\xBD\xBA\xFA\xF8\xE8\xD5\xE4\x01\x18\xFD\x8E\xFC\xE7\x5A\xF6\x63\x48\xFD\xFC\xD3\x1B\xF4\xD0\xF7\xF1\x6A\xE2\xE4\xC8\xF9\xA5\x66\xF4\xC4\x7D\xFA\xFA\x7F\xFE\xFB\x99\xF2\xD4\xC0\xFE\xFC\xE0\xBE\xF9\x4A\xD5\xFC\xD3\xF1\xF3\xC9\xFE\xFD\x00\x08\xFC\x75\x7B\xD7\x71\xB1\x34\x4C\x9C\x79\x7E\x39\x7B\xFB\x6D\x7F\x1E\x5C\xF8\x25\x75\xEA\x72\x7C\x01\x38\xF5\x55\x7C\x08\x8B\xF7\x2C\x7D\xFC\x74\x80\x97\x78\xF0\x75\x7F\xCD\x78\xFE\x60\x79\xF4\x68\x1A\xEC\x78\xC3\x4C\x81\x9E\x71\x10\x52\x76\xEB\x77\x73\x77\x7B\xCA\x4F\x80\x01\x41\xF4\x7C\x79\xDE\x78\x80\xA2\x43\xFC\x6D\x3D\xF2\x7B\xE3\x5E\x73\xF3\x7E\x80\xEA\x7A\xFA\x62\x72\x56\x12\xFA\x3E\x4C\xE9\x71\x76\x17\x87\xBB\x52\x81\x13\x8C\xF6\x2D\x82\x05\x8F\x81\x02\x45\xCF\x56\x7F\x95\x08\x02\x08\x80\xEC\x63\x4F\x02\x6F\xAB\x77\x62\x01\x11\xE0\x35\x5F\x80\x7E\x54\xF7\x5D\x75\x1D\x76\xE5\x78\x00\xD9\x5E\x80\x00\x76\x4E\x86\xCF\x44\x11\xDD\x7E\x9B\x66\x71\x40\x00\x83\xB9\x4D\xD8\x78\x47\xD1\x47\x00\xC8\x81\x66\x63\x82\x54\x7B\xCE\x46\x82\xF8\x7E\x06\xE3\x66\x0C\x94\x3F\x34\x83\xF0\x69\x73\xC2\x78\x03\xE3\x5B\xFA\x67\x7E\x22\x87\x3E\x66\x82\x48\x72\xF3\x00\x56\x68\x58\x18\x4F\x75\x0E\xAE\x74\x38\x81\xFE\x45\x80\xE5\x64\x82\xF2\x7F\x0E\x9C\x7A\xC1\x74\x43\x5F\x7B\x8F\x7F\x80\x1B\x73\x07\x9D\x6A\xEA\x77\xA9\x0D\x80\xAF\x65\x84\xFB\x57\x10\xB4\x03\x44\x81\xF9\x42\x82\x0A\x93\x80\x2C\x87\x11\xB1\x82\x02\x8B\x04\xFC\x61\x18\x90\x5C\x63\x84\xFB\x4F\x11\x1F\x82\x10\x2F\x70\x24\x90\x81\x73\x80\x89\x41\x83\x7B\x43\xFF\x4B\x7F\x06\x94\x84\x3C\x72\xF8\x4C\x7B\x4B\x89\x03\xA0\x80\x20\x80\x69\xF6\x6C\x04\x80\x08\x5B\x8B\x0A\xE9\x7A\x0B\x85\x85\xBC\x82\x12\xB9\x83\x4A\x87\x03\xC4\x86\x1F\x9A\x81\xA1\x7C\x13\xAE\x7E\x65\x88\xC7\x3B\x85\xDC\x39\x85\xDF\x7E\x1B\xB4\x69\x57\x81\x10\x00",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void GuiIqPrimaryQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqCascadeQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqSetQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::presentation;

#define PARSING_TOKEN_FIELD(NAME)\
			CLASS_MEMBER_EXTERNALMETHOD_TEMPLATE(get_##NAME, NO_PARAMETER, vl::WString(ClassType::*)(), [](ClassType* node) { return node->NAME.value; }, L"*", L"*")\
			CLASS_MEMBER_EXTERNALMETHOD_TEMPLATE(set_##NAME, { L"value" }, void(ClassType::*)(const vl::WString&), [](ClassType* node, const vl::WString& value) { node->NAME.value = value; }, L"*", L"*")\
			CLASS_MEMBER_PROPERTY_REFERENCETEMPLATE(NAME, get_##NAME, set_##NAME, L"$This->$Name.value")\

			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery, presentation::GuiIqQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqNameOption, presentation::GuiIqNameOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqChildOption, presentation::GuiIqChildOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqPrimaryQuery, presentation::GuiIqPrimaryQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqCascadeQuery, presentation::GuiIqCascadeQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqBinaryOperator, presentation::GuiIqBinaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqSetQuery, presentation::GuiIqSetQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery::IVisitor, presentation::GuiIqQuery::IVisitor)

			BEGIN_CLASS_MEMBER(GuiIqQuery)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})
			END_CLASS_MEMBER(GuiIqQuery)

			BEGIN_ENUM_ITEM(GuiIqNameOption)
				ENUM_ITEM_NAMESPACE(GuiIqNameOption)
				ENUM_NAMESPACE_ITEM(Specified)
				ENUM_NAMESPACE_ITEM(Any)
			END_ENUM_ITEM(GuiIqNameOption)

			BEGIN_ENUM_ITEM(GuiIqChildOption)
				ENUM_ITEM_NAMESPACE(GuiIqChildOption)
				ENUM_NAMESPACE_ITEM(Direct)
				ENUM_NAMESPACE_ITEM(Indirect)
			END_ENUM_ITEM(GuiIqChildOption)

			BEGIN_CLASS_MEMBER(GuiIqPrimaryQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqPrimaryQuery>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(childOption)
				CLASS_MEMBER_FIELD(attributeNameOption)
				PARSING_TOKEN_FIELD(attributeName)
				CLASS_MEMBER_FIELD(typeNameOption)
				PARSING_TOKEN_FIELD(typeName)
				PARSING_TOKEN_FIELD(referenceName)
			END_CLASS_MEMBER(GuiIqPrimaryQuery)

			BEGIN_CLASS_MEMBER(GuiIqCascadeQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqCascadeQuery>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(child)
			END_CLASS_MEMBER(GuiIqCascadeQuery)

			BEGIN_ENUM_ITEM(GuiIqBinaryOperator)
				ENUM_ITEM_NAMESPACE(GuiIqBinaryOperator)
				ENUM_NAMESPACE_ITEM(ExclusiveOr)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Substract)
			END_ENUM_ITEM(GuiIqBinaryOperator)

			BEGIN_CLASS_MEMBER(GuiIqSetQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqSetQuery>(), NO_PARAMETER)

				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(GuiIqSetQuery)

			BEGIN_INTERFACE_MEMBER(GuiIqQuery::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqPrimaryQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqCascadeQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqSetQuery* node))
			END_INTERFACE_MEMBER(GuiIqQuery)

#undef PARSING_TOKEN_FIELD

			class GuiIqTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqNameOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqChildOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqPrimaryQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqCascadeQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqBinaryOperator)
					ADD_TYPE_INFO(vl::presentation::GuiIqSetQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool GuiIqLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new GuiIqTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
