#include "GuiInstanceQuery_Parser.h"

namespace vl
{
	namespace presentation
	{
/***********************************************************************
ParserText
***********************************************************************/

const wchar_t parserTextBuffer[] = 
L"\r\n" L""
L"\r\n" L"class Query"
L"\r\n" L"{"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum NameOption"
L"\r\n" L"{"
L"\r\n" L"\tSpecified,"
L"\r\n" L"\tAny,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum ChildOption"
L"\r\n" L"{"
L"\r\n" L"\tDirect,"
L"\r\n" L"\tIndirect,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class PrimaryQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tChildOption\t\tchildOption;"
L"\r\n" L"\tNameOption\t\tattributeNameOption;"
L"\r\n" L"\ttoken\t\t\tattributeName;"
L"\r\n" L"\tNameOption\t\ttypeNameOption;"
L"\r\n" L"\ttoken\t\t\ttypeName;"
L"\r\n" L"\ttoken\t\t\treferenceName;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class CascadeQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tparent;"
L"\r\n" L"\tQuery\t\t\tchild;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"enum BinaryOperator"
L"\r\n" L"{"
L"\r\n" L"\tExclusiveOr,"
L"\r\n" L"\tIntersect,"
L"\r\n" L"\tUnion,"
L"\r\n" L"\tSubstract,"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"class SetQuery : Query"
L"\r\n" L"{"
L"\r\n" L"\tQuery\t\t\tfirst;"
L"\r\n" L"\tQuery\t\t\tsecond;"
L"\r\n" L"\tBinaryOperator\top;"
L"\r\n" L"}"
L"\r\n" L""
L"\r\n" L"token INDIRECT = \"////\";"
L"\r\n" L"token DIRECT = \"//\";"
L"\r\n" L"token NAME = \"[a-zA-Z_][a-zA-Z0-9]*\";"
L"\r\n" L"token WILDCARD = \"/*\";"
L"\r\n" L"token OPEN = \"/(\";"
L"\r\n" L"token CLOSE = \"/)\";"
L"\r\n" L"token XOR = \"/^\";"
L"\r\n" L"token INTERSECT = \"/*\";"
L"\r\n" L"token UNION = \"/+\";"
L"\r\n" L"token SUBSTRACT = \"-\";"
L"\r\n" L"token ATTRIBUTE = \"@\";"
L"\r\n" L"token COLON = \":\";"
L"\r\n" L"token DOT = \".\";"
L"\r\n" L""
L"\r\n" L"discardtoken SPACE = \"/s+\";"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryFragment"
L"\r\n" L"\t=\t("
L"\r\n" L"\t\t\t(NAME : typeName with {typeNameOption=\"Specified\"})"
L"\r\n" L"\t\t\t| (\"*\" with {typeNameOption=\"Any\"})"
L"\r\n" L"\t\t)"
L"\r\n" L"\t\t[\".\" NAME : referenceName] as PrimaryQuery"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimaryAttributed"
L"\r\n" L"\t= !QPrimaryFragment with {attributeNameOption=\"Any\"}"
L"\r\n" L"\t= \"@\" [NAME : attributeName] \":\" !QPrimaryFragment with {attributeNameOption=\"Specified\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule PrimaryQuery QPrimary"
L"\r\n" L"\t= (\"/\" with {childOption=\"Direct\"}) !QPrimaryAttributed"
L"\r\n" L"\t= (\"//\" with {childOption=\"Indirect\"}) !QPrimaryAttributed"
L"\r\n" L"\t= \"(\" !QueryRoot \")\""
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query Query0"
L"\r\n" L"\t= !QPrimary"
L"\r\n" L"\t= Query0 : parent QPrimary : child as CascadeQuery;"
L"\r\n" L""
L"\r\n" L"rule Query Query1"
L"\r\n" L"\t= !Query0"
L"\r\n" L"\t= Query1 : first \"^\" Query0 : second as SetQuery with {op=\"ExclusiveOr\"}"
L"\r\n" L"\t= Query1 : first \"*\" Query0 : second as SetQuery with {op=\"Intersect\"}"
L"\r\n" L"\t;"
L"\r\n" L"\t"
L"\r\n" L"rule Query Query2"
L"\r\n" L"\t= !Query1"
L"\r\n" L"\t= Query2 : first \"+\" Query1 : second as SetQuery with {op=\"Union\"}"
L"\r\n" L"\t= Query2 : first \"-\" Query1 : second as SetQuery with {op=\"Substract\"}"
L"\r\n" L"\t;"
L"\r\n" L""
L"\r\n" L"rule Query QueryRoot"
L"\r\n" L"\t= !Query2"
L"\r\n" L"\t;"
;

		vl::WString GuiIqGetParserTextBuffer()
		{
			return parserTextBuffer;
		}

/***********************************************************************
SerializedTable
***********************************************************************/

const vint parserBufferLength = 6753; // 34089 bytes before compressing
const vint parserBufferBlock = 1024;
const vint parserBufferRemain = 609;
const vint parserBufferRows = 7;
const char* parserBuffer[] = {
"\x00\x00\x81\x81\x84\x02\x81\x80\x07\x82\x00\xC3\x00\x01\x30\x03\x38\x01\x31\x0B\x80\x24\x20\x05\x30\x01\x28\x00\x75\x14\x80\x12\x30\x01\x3C\x01\x7F\x20\xA1\xA0\x87\x88\x80\x2B\x8C\x00\x69\x00\x2D\x31\x8C\x8E\x8F\x8B\x8C\x15\xAD\x9F\x82\x91\x95\x00\x84\x8B\x18\x9A\xB2\x94\x91\x90\x07\x9B\x29\x1A\xF4\x38\x90\x97\x96\x8C\x9E\x90\x0B\x37\xA4\x85\x8A\x84\x86\x86\x88\x0C\x93\x95\x8F\x9A\x9D\x8C\x00\x9B\x08\x90\xA8\x28\x90\x04\x36\x89\x99\x3C\xCB\x82\x8D\xAD\x87\x85\x88\xA9\x43\xD5\x9E\x86\x07\x98\x38\x96\x8D\x6E\x00\x02\xA7\xAF\x7A\xB1\x80\x93\x1C\xA9\xAB\x8C\x82\x9C\xA9\x98\xAB\x0D\x37\x8C\x82\xA2\xA1\xBC\x00\x31\x39\xC2\x95\x8E\x21\x8B\x95\x8A\xBA\x76\x80\xB8\xBC\xAB\xBD\xA1\xB5\xBF\x1E\x93\x02\xD2\xBC\xCE\xC0\xC5\x8C\x8A\x80\x0C\xCC\x8E\xC0\x03\x26\x00\x6E\xC2\xA9\x8F\x30\x01\xB8\xC9\x9B\x93\xFA\xAF\xAE\x99\x98\xCC\x01\xA4\x59\x80\x1B\xA9\x9E\xAB\x8B\xD3\xD4\x5C\xAC\xEE\xC7\xA1\xC8\x01\xD8\x95\xB3\x97\xD6\xC1\xC8\x84\x8D\x8A\x33\x55\x95\xB1\xB0\x8B\xC5\xC6\x8D\xD7\x25\xA7\xB2\xDC\xB6\xAE\xBE\xCA\x9F\x08\xC2\x9E\x8E\xB5\xEC\xD3\xEA\xE2\xB0\xDA\xC8\xFC\xE4\xDC\xA2\x98\x07\x37\xE2\xE8\xDA\x83\xD0\xE5\x8B\xDF\x9C\xAB\xED\xC0\xB4\x98\xF1\x82\xA0\x15\x42\x5E\x76\x4C\x58\x45\x40\x75\x4A\x1C\x4E\x43\x5F\x51\xFE\x42\x40\x80\x67\x03\x96\x52\x03\x4D\xAC\x6E\x54\x5D\x83\x01\x4F\x82\x81\x6D\x96\x6C\x58\x42\x43\x15\x50\x42\x73\x57\x74\x51\x07\x4F\x0B\x37\x66\x87\x4F\x8A\x37\x74\x54\x5C\x8B\x2D\xAE\x8C\x4C\x8C\x08\x72\x83\x8C\x8D\x02\x76\x8D\x7F\x4D\x49\x22\x60\x00\x11\x00\x3D\x82\x14\x00\x45\x00\x0A\x40\x15\x00\x04\x48\x40\x8A\x4C\x80\x08\x8B\x8A\x74\x5E\x85\x40\x90\x42\x84\x96\x90\x00\x48\x93\x8B\x92\x93\x00\x01\x01\x8C\x4F\x4A\x85\x4C\x61\x10\x00\x0D\x16\x95\x05\x37\x5B\x11\x45\x0B\x00\x3A\x10\x00\x99\x6C\x9A\x10\x03\x17\x00\x1D\x10\x02\x9A\x0C\x6C\x9E\x98\x9C\x00\x32\x90\x0C\x00\x6C\xB9\x05\x9C\x00\x2A\x00\x0A\x95\x41\x17\xB7\x47\x15\x90\x00\x0C\x1F\x8F\x95\x64\x83\x90\x93\xA1\x02\x68\x85\xA3\x00\x5F\xB4\x41\x9A\x40\xA7\x66\x45\x90\x63\x94\x81\x48\x88\x0A\x49\x99\xA2\x49\x81\x63\x4D\xA6\x68\x00\x40\x45\x91\xA8\x40\x28\xA9\x07\x56\xA9\x21\x58\xA8\x40\x16\xAB\x83\x9F\xA8\x97\x5E\x00\x02\x95\x8E\x47\x49\x0C\x8E\x8F\x48\x85\x93\x91\xAB\x57\x99\x97\x88\xA1\x00\x07\x04\xAC\x48\xA8\x81\x45\x16\x8F\x3D\xA7\x60\xAB\xB2\x2B\x00\x08\x84\x40\x74\x42\xB8\x40\x50\xD3\x82\x1C\xA8\x96\x00\x03\x94\x9B\x91\x5D\xB7\x4C\x9A\xB7\x88\x81\xB7\x4C\x99\x48\x88\x93\x91\x8F\xE2\x93\xB5\xB1\xBA\x08\x40\x10\x02\x02\xCF\xBF\x31\xB5\x42\xAB\x8E\xA6\xB4\xBE\x05\x7A\x07\x6D\xBF\xB6\x93\x9B\xA8\x92\x5E\x88\x4E\x08\x00\xC5\x74\x5D\xC1\x41\xFF\xA3\xB6\x4B\xB9\x56\x89\xC5\xA5\x59\xD9\x8C\x7D\xB8\x4F\x4F\x85\x4F\xAD\x40\x11\x9E\x4F\x9C\x04\x37\x65\xC0\x03\x9F\x0F\xC3\x9C\x68\x6B\x42\x40\x52\x50\x77\x42\x78\x65\x42\xBE\x20\x00\x04\x08\x00\x3C\x0A\x72\x4F\x9F\x3E\x3E\xA9\xC8\x87\x3F\xD0\xC3\xD2\x7B\x56\x6C\xC3\xBB\xCC\x27\x42\x5C\xBD\xBE\x00\x39\xCD\xCE\xCA\x40\xDA\xB3\xD3\x71\x95\x72\x4F\xD1\x41\x17\x58\xD9\x73\xC3\x31\x00\x05\x27\x4D\x53\xC6\x7A\x79\xD6\x56\x41\xD6\xC1\xCE\xA4\xB9\xC2\x08\x97\x28\xAF\xD8\xCC\x00\x77\x1C\x52\x53\x56\x39\xFB\x11\xD6\x59\xBB\x5D\x5F\x54\x7E\xAA\x40\x03\x89\xCE\x3D\x3B\xDF\xD9\x8F\x71\x53\x48\x82\x46\x10\x42\x5F\xD9\xCE\x7D\x3B\xD2\xAD\xCE\x21\x38\x4E\xD4\x7B\x6F\x9C\x65\x60\x57\x9F\x5C\x65\x47\x44\x81\x7C\xB5\xDB\xE5\x96\x6A\xDB\xDD\xDB\x00\x2F\xD1\xDC\x00\x73\xF5\xD9\x4B\xDD\x7B\xFA\xD9\xCE\x56\x5C\x7D\x6B\xA8\x70\xFA\x71\x54\xE2\xE1\x8F\x8B\xE1\x88\x67\x8F\xC0\x01\xE5\xCE\x93\xC0\x05\xE5\xD7\x67\xC9\x74\x98\x61\xEA\x5D\xE1\x6B\x44\xDB\x96\xE9\xF0\xE6\x5B\xC2\x48\xF2\x61\x68\xDE\x4F\xC2\x0C\x00\x1F\x04\xDA\xF4\xD8\xC9\x76\xEA\xDB\x00\x24\xA2\xDF\xDE\xC7\xC4\xD6\x56\xCB\x82\xDC\x64\xFA\xAC\x6F\xE8\xC8\x43\xF5\x94\x49\x76\x13\x49\x0C\x67\x16\x7F\x7E\x42\x52\x07\xD7\xF4\x96\x37\x7C\x47\x79\x7B\x7F\xB8\x02\x28\x6C\x00\x09\x17\xF7\x74\x7B\x3B\x00\xB8\x78\x00\xFA\x65\x36\x01\x80\x03\x7D\xF2\x67\x73\x6F\x63\x45\x4E\x95\x39\x6B\x6C\xCE\x23\x3C\x3E\xD6\x35\x21\xCE\x2E\x7C\x32\xBC\x40\x02\x76\x1E\x93\x3D\x79\x7B\x70\x71\xE0\x3B\x3B\x77\xE4\x60\x28\x79\x66\x29\x25\x03\x5A\x23\x22\xC1\x63\x78\x00\x45\x7C\x0F\x0B\xA4\x7D\x50\xC1\x64\x84\xEC\x79\x6B\x6E",
"\xF9\x33\x85\x3E\xA5\x2D\x85\xEE\x7B\x65\x70\xF2\x64\x49\x2E\x1E\x39\x86\xE4\x53\x83\x6E\x35\x64\x7F\x61\xC1\x79\x82\x99\x45\x4C\x83\xBD\x4E\x38\x00\xD0\x3F\x2E\x74\x66\x2B\x85\xD2\x39\x66\x4E\x39\x6E\x2B\xDE\x24\x7D\x2E\xF5\x5E\x22\x7E\x5C\x66\x6D\xF8\x18\x72\x81\x88\x11\x80\x2E\x9C\x3E\x7F\xFC\x72\x85\x7E\x3A\x8F\x87\x8E\x63\x87\x80\x00\x5C\x7A\x80\x84\x23\x70\x80\x32\x35\x8C\x01\x92\x8C\x33\x0A\xA8\x70\x75\x5A\x9B\x80\x00\x1D\x86\x88\x10\xA6\x3A\x84\x74\x76\x6E\x6E\x31\x75\x88\xAB\x07\x89\x84\xB7\x79\x3D\xFB\x3A\x70\x01\x26\xA9\x73\x5C\x33\x90\x21\x0D\xDC\x2F\x73\x53\x90\x73\x8A\x39\x7D\x84\xDB\x3C\x70\x89\xBD\x42\x8B\x93\x44\x99\x65\x25\xE5\x8A\x22\x25\xA3\x94\x89\xBC\x6F\x8A\x55\x52\x84\x78\x2A\xBB\x6E\x8A\xA7\x98\x88\x06\x99\x7B\x8B\xBD\x5D\x87\x8B\x61\x87\x27\x18\xD4\x3E\x47\x4B\xBB\x68\x8D\x11\x2E\x21\xCE\x6C\x8D\x3A\x37\x80\x02\x8F\x71\x9C\x9A\x47\x4B\x7D\x32\xCE\x49\x37\x86\x00\x14\x03\xFF\x73\x86\x32\x72\x9B\x71\x25\xCE\x68\x9F\xF6\x1C\x36\x90\xF0\x7D\x8D\x9D\x9A\x6D\x7B\x39\xAD\x95\x83\xF3\x67\x79\x67\xC8\x91\x90\x17\x93\x9B\x6F\xC1\x25\x98\x9E\xFB\x95\x9B\xFE\x67\x8C\x76\x83\x41\x79\x7D\xE2\x80\x02\x22\x90\x85\x80\xF7\x59\x97\x75\xB8\x87\x85\x41\xF9\x9E\x33\x84\x88\x8D\x97\xF3\x21\x73\xE0\x25\x9C\x76\x19\x8C\x74\x2B\x36\x8D\x96\x14\xF0\x86\x7A\x3E\x8D\x81\x91\x7F\x95\xA1\xFF\x6B\x97\x9E\x98\x83\x84\xA2\x8C\x82\x93\x0C\x09\x8B\x80\x97\xAB\x3E\x81\x37\xA0\x90\xFF\x14\x84\xA1\x59\x86\xAE\x47\x64\x4D\x99\x17\xBA\x9E\x92\x4B\x8B\xA7\xA2\x25\x9C\x90\x53\x9F\x8C\x97\xFB\x21\xA6\x85\xA4\x86\x97\xDB\x26\xAF\x77\x55\xA9\x22\xA5\x7B\x7A\x84\x0F\xBE\x87\x95\x5A\xA3\x82\x93\x26\x88\x87\x2E\x8A\xA9\x89\xAB\x8B\x88\x86\xA7\x82\x99\x14\xE1\xA0\x97\x1D\x87\x9C\x77\xCA\x93\x6E\x40\xCE\x9E\x8A\x8D\x11\x9F\x8B\xD3\x2E\xAA\x19\x83\x59\x8D\xB2\x1B\x98\x91\xDD\x88\x6B\x1B\xB4\xAF\xA4\xAB\x13\xA2\xA8\x13\x98\x00\x63\xBF\xA6\xA6\x3B\xB2\xA0\x00\x2D\x6D\x7C\xCC\x56\x49\x70\x00\x28\x48\x21\x3B\x67\x90\x3B\x95\xBB\x90\x3C\x82\x29\x68\x39\x7A\x5C\x38\xAD\xA1\xA2\x77\xBA\x98\x34\xE8\x8A\x9F\x1E\xAD\xBC\xA2\x73\xB0\xB5\x95\x08\x83\x19\x4F\xB4\xBC\x79\x8E\xB7\xB7\x2B\x15\x90\xA0\x62\x9E\x2F\xB1\xCB\xAD\x70\xAD\x52\xB1\x21\x6F\xB6\xBE\x72\xB6\xA0\xA0\x77\xBF\x90\xAF\xDB\x72\xAE\x94\xE1\x40\x01\x74\x3C\x76\x9D\x63\xE3\x95\xB6\x84\xBF\xB3\x22\xFD\x8C\x75\x75\x81\xAC\x98\x49\x9D\x86\xA0\xEF\x87\x32\x47\xA0\x9C\xA0\xF2\x4E\xA0\x7D\xDA\xB4\xB2\x63\xB1\xA9\xA6\xF1\xA7\xA8\xA3\x69\xBB\xA3\x72\xDE\xBD\xB9\x8F\x96\xA8\xBA\x23\xBA\xA8\x2A\xA7\xAE\xAA\x74\x92\x8B\xB5\x24\x7E\xA5\xF6\x19\x7B\xBE\xF5\x9F\xB9\x9D\x93\xAB\xC2\x6B\xBE\xBD\xB9\x89\x0F\x64\x06\xF4\x85\x22\x68\xB5\xA6\x2B\x09\xCC\xBF\x79\x44\xBD\x82\x3F\xF7\xA9\x67\xBD\x8B\xAA\xB9\x07\xAE\xC1\x7F\xEC\xB3\x51\xB9\x6F\x6F\xBD\x94\x71\xBF\x82\xC5\xB5\xBF\xFB\x91\xA9\x97\x28\xC9\xBD\x3C\xD5\xA1\x94\x91\xAF\x84\xA4\x31\x8A\x84\x0D\xE0\x8C\x95\xAF\x07\xC1\xC2\xCA\x7D\xBA\x8A\xA0\xC2\xB7\x70\x83\xBC\xC1\x29\xDB\xC7\x57\x0F\x65\x07\x0C\xC2\x23\xC3\xDB\xB0\xCA\x8E\x89\xA0\xBD\xA2\xA7\x92\x5F\xC1\x64\xBD\x52\xE6\xBA\xBF\x28\xEB\xBE\x9A\xED\xA7\x97\x7B\xF3\x62\xB9\xD1\xB3\xB9\xA8\x97\xB6\xC7\x10\x9A\xA5\xB1\x06\xD2\xCE\xBF\x3D\xD8\xA8\x30\xC1\xC9\x94\x94\x85\xC8\x87\x74\xAC\xA5\x82\x91\xA4\xC6\xD3\x9F\x98\xC9\x7E\x90\xCD\x7D\xD4\xCC\xA7\x7A\x8C\x82\xBE\xC4\xB4\xBE\xA1\x8E\x94\xAC\x13\xDE\xCB\xAD\x78\xD2\xCD\x46\xEA\xAD\xA8\x1E\xFE\x91\xC0\x25\xA2\xCA\x2A\xC4\xCF\xAA\x23\xF4\xAD\x98\xB1\x84\xAF\xDB\x66\xA0\xAB\x39\xDC\xD4\xAA\xCE\xBF\xBE\x28\xA0\xDE\x89\xFD\x33\xAF\x95\xA8\xD6\xAC\x40\xF8\xA5\xBA\x4B\xCF\x9E\xAF\xD1\x3B\x3C\x35\x99\xD4\xB1\x6C\xAB\x8F\xC9\x2A\x7A\x5D\xF4\x0F\xDB\xC1\xEA\x43\xD7\xC9\x0F\x7B\xA6\x2D\x3B\xBF\xC8\x4A\xE4\x7D\x49\x41\x88\xB8\x8E\xB4\x7C\x37\xBF\x6E\xA9\xBA\x40\xC7\x94\xE2\x5F\x2E\x76\xB3\x0E\x77\xD4\xBA\xC6\x7A\x8C\xC9\xC6\xCE\x2E\xE2\xB8\xBB\x58\xD0\xD1\x88\xBC\x76\x7C\xF8\xAA\x64\x7D\x9B\xAF\x7F\x97\xD7\xBB\x5F\xEC\x8C\xDA\x7C\x5E\xC8\x76\xEA\x55\xB7\x97\xFC\xB3\x73\x93\xDD\xDE\x37\xB7\xB4\xD7\x94\x20\x65\xDD\x71\xD5\xA2\xAE\xBD\x8A\xCC\xDC\x33\xCF\xC2\xB5\x88\xD8\x9D\xBB\x8F\xCA\x03\x8C\xF2\x26\xC3\xFC\xA0\xC5\x66\xAF\x6C\x33\x22\x5D\xB7\x02\x37\x21\xB7\xBA\x98\x70\xE5\x25",
"\xE8\x98\xB5\xE2\xA3\x64\x40\x54\x66\x6B\x3D\x8A\xB3\x65\x98\xA0\x03\x4E\x97\x2E\xD0\x6F\x95\x6D\x83\x34\xE7\xC6\x5B\x5C\x31\x91\xBD\x7F\xD8\x73\x27\xDC\xDA\xDF\x13\x25\xB0\x6D\x97\x4A\x8D\x50\x3F\x2B\x54\x5E\x9A\x5E\x78\xFE\x61\x69\xF3\xD1\xC7\xD1\x96\x3A\x5E\x99\xD7\xEE\x64\x35\xF1\x8F\xCD\xCA\x6C\x7B\x1D\x3D\xA3\xEC\x59\xFF\xE8\xCE\xC2\xEF\x2D\xA2\xF9\x63\xEB\x32\x29\xE8\xC2\xCB\xEB\xA2\xA7\xE4\x2F\x29\x67\x3A\x21\xB2\xE1\xEC\xB5\x27\xC2\xD3\xE6\x14\xF8\x73\xC8\xED\x72\x28\x93\xDF\x2E\x63\x02\x2A\xE4\xDC\xE9\x6B\x6F\xAE\xC7\x6A\x2D\x38\xEB\xDA\xCF\xB9\xE1\x6C\xB3\xFD\xE0\xED\x15\x81\xEA\x97\xC3\xE2\x9B\xA1\xB3\x6B\xF1\x1E\x32\xED\xDF\x36\x7D\xE9\xBD\x77\xEE\x2C\x51\x3A\xEE\x37\xDE\xE4\xE6\xF8\x36\xE0\xF2\x4A\x78\xDD\xC9\xFB\x33\x22\x9B\x49\xF6\xDF\x93\xF0\xE6\xE3\xAF\xF6\x37\xB0\x52\xF7\xE6\x61\x77\xC0\x00\x3E\x17\xEC\xC8\xE1\x69\xF3\xDE\x81\x6F\x89\xB6\x89\x40\x8B\xAB\xD5\xBA\x9A\xFD\x80\x88\x66\x23\x44\xA6\xC6\xD9\x67\x1A\x4A\xEE\xA6\x86\xED\x7C\xB7\x12\xBC\x51\x13\x9F\x2F\xF4\x90\xE2\x8B\xAA\xFD\xDD\x6C\xC0\xE9\xEE\xCA\x4A\xFE\xCA\xE6\xE5\x2A\x28\xE4\x7D\x55\xF0\x51\xFB\x6F\xF1\xFF\x96\xFA\x6A\x98\xF9\x50\x5A\xFD\xD5\x4D\xFB\x6D\x42\x7B\x67\x4A\x45\x28\x07\x66\x1E\x15\x19\x1E\x10\x29\x16\x07\x20\x5C\x11\xE5\x7C\x6F\xA2\x3A\x76\xC7\x7E\x65\xE9\x38\x76\xBB\x72\x76\xC6\x7C\x77\x09\x69\x7E\xD1\x60\x00\xAA\x05\x7C\xBD\x7A\x7E\xC9\x7C\x57\x39\x3E\x7E\x0A\x2C\x3B\xF2\x76\x74\x93\x77\x62\xF6\x75\x7D\x75\x7B\x37\xD9\x7B\x77\xDB\x79\x5C\x00\x8F\x7D\x03\x85\x80\x39\x18\x80\x00\x0A\x80\x56\x5C\x80\x74\x56\x75\xEB\x70\x82\xE9\x7B\x7C\x5C\x1D\x7C\xF0\x75\x56\xD0\x79\x82\x5E\x6B\x82\xB4\x7D\x82\xFA\x71\x20\x6A\x77\x5C\xF8\x52\x83\xF3\x1F\x7D\xE3\x61\x1A\xCD\x7F\x3B\xE7\x6F\x4A\xAC\x71\x82\xBF\x77\x81\x08\x4D\x81\x97\x77\x81\xC8\x71\x84\xED\x73\x84\xEF\x76\x5F\x46\x83\x7F\x48\x82\x7D\x27\x5C\x82\xA5\x7D\x84\x10\x2E\x4D\x31\x88\x63\x33\x81\x6E\x87\x33\x54\xE2\x77\x52\x59\x86\x5D\x3E\x81\x82\x63\x87\x81\x42\x8B\x38\x25\x8E\x62\x00\x07\x82\x6F\x7B\x86\xF5\x7D\x86\x4B\x8F\x86\xE3\x2E\x84\x2A\x33\x87\x74\x6D\x7D\x01\x8F\x36\x35\x80\x11\x06\x85\x16\x09\x8B\x80\x11\x72\x34\xBC\x76\x19\x61\x3E\x7A\x16\x8F\x81\x83\x7B\x59\x86\x75\x7B\x29\x78\x7B\xE9\x7A\x7B\x9C\x81\x8A\x96\x1C\x3D\x5D\x86\x1B\xDC\x38\x40\xB8\x0E\x81\xAD\x89\x76\x13\x87\x81\xE6\x7F\x80\x2A\x3C\x3D\x7F\x80\x8B\x22\x84\x6A\x27\x15\x82\xE4\x3C\x26\x6A\x84\x86\x6C\x8F\x3B\x6E\x87\x7D\x8D\x81\x87\x37\x70\x89\x28\x45\x87\x02\x60\x14\x19\x18\x18\x25\x87\x53\xE4\x74\x57\xB9\x88\x8A\x90\x7C\x8B\x5E\x6B\x8B\xBF\x84\x82\xCE\x70\x00\xD9\x25\x8C\x80\x89\x84\x8A\x8D\x59\x8C\x8F\x82\x72\x8D\x7F\xDC\x70\x8D\xBC\x33\x2D\x71\x1B\x44\x0D\x8B\x85\x37\x7E\x8A\x8F\x7E\x8B\xC2\x74\x0A\xB4\x82\x13\xDC\x80\x74\xDE\x4C\x3D\x81\x81\x8C\xE1\x84\x8C\x28\x86\x8C\x89\x88\x8C\x8B\x8A\x8C\xEA\x87\x73\x50\x87\x63\x91\x8E\x8E\x41\x63\x8D\x67\x86\x8D\xC0\x3D\x83\xE7\x7A\x76\xFD\x85\x90\xDB\x8F\x8D\x66\x82\x8C\xA7\x43\x8E\x1A\x9F\x81\x2A\x87\x8E\x5F\x19\x8E\xFB\x70\x83\xEC\x82\x85\xDE\x76\x87\x00\x00\x8F\x7A\x62\x45\xF4\x87\x81\xAF\x8E\x89\x39\x7C\x3D\x60\x8A\x61\x10\x80\x84\xE5\x8D\x41\xE0\x85\x84\x6F\x37\x82\x9F\x78\x88\x39\x3A\x84\xE8\x8A\x90\x27\x9B\x8E\x05\x7A\x92\x93\x86\x25\x04\x86\x89\x37\x8C\x15\x3A\x8B\x2A\x3C\x8F\x4A\x7D\x89\x8A\xDD\x81\x82\x01\x94\x84\xB4\x4B\x6F\x87\x88\x76\x23\x98\x90\x45\x99\x7F\xCB\x8B\x21\xCD\x89\x92\x74\x83\x85\x2C\x95\x85\x55\x16\x7F\x7B\x81\x39\x31\x9E\x8B\x33\x9C\x8F\x35\x90\x00\xFA\x81\x86\xBE\x8D\x8B\xB5\x89\x95\x67\x84\x88\x04\x9D\x95\x3B\x97\x90\xD4\x79\x90\x62\x9B\x90\x90\x7E\x8C\xFF\x78\x96\xD1\x89\x13\xD4\x85\x4E\x0C\x17\x8D\x54\x97\x91\xDE\x88\x97\x72\x9A\x97\x83\x8C\x3B\x20\x9E\x97\x22\x96\x8E\x60\x95\x92\x46\x9E\x88\x48\x9A\x6D\x0F\x98\x98\xEF\x8B\x1F\xF2\x84\x57\x6F\x95\x8B\xA0\x8D\x52\xF5\x89\x73\xB2\x75\x78\x4B\x86\x7B\x01\x1A\x78\xFF\x84\x54\xA9\x50\x00\xEC\x2A\x9A\x90\x7D\x9A\x07\x3D\x89\x32\x1A\x9B\x08\x4F\x59\x38\x97\x6F\x9A\x5D\x48\x12\x88\x91\x31\x77\x8F\xB5\x81\x97\x56\x11\x8B\x3A\x74\x97\xFB\x8B\x9C\x3A\x9E\x8B\x94\x91\x8E\x20\x91\x94\x06\x93\x94\x24\x98\x7F\x86\x53\x96\xFC\x79\x94\x67\x9B\x92\x02\x6E\x92\xA5\x9F\x98\xBA\x83\x9B\x92\x90\x9D\xD3\x9E\x93",
"\x80\x2C\x95\x39\x9F\x95\x81\x91\x96\xDB\x94\x98\xB6\x16\x98\x39\x30\x91\xA7\x42\x8D\xEA\x55\x8D\x11\x1E\x98\xD6\x52\x79\x11\x5E\x6C\x80\x71\x51\xC2\x7E\x3D\x3D\x71\x51\xE1\x55\x6F\x5A\x7E\x4D\xBA\x94\x88\xF0\x36\x9B\xC8\x9D\x9B\xC3\x92\x14\x2A\x2C\x8A\x10\xA4\x72\x82\x4A\x9B\xA5\x80\x00\xA9\x91\x9B\xDA\x86\x1B\xBA\x9A\x8A\xFE\x9F\x64\x08\x61\xA0\xD0\x65\x2E\x11\xAB\x34\x6F\x12\x14\x88\x71\x10\x73\x32\x9B\x06\xA8\x81\x24\xAE\x66\x1E\x1B\xA1\x31\xAC\x61\xDA\x38\xA2\x34\x36\x34\x50\x32\x35\x2B\x75\x3A\xAB\x88\x9B\x1F\x8F\x77\x39\x93\x8A\x9C\x12\x33\x29\xAB\x9B\x37\x3B\x37\xB2\x96\x95\xA7\x92\x13\x61\x35\x1C\x3F\x8F\x30\x46\xA9\xA3\x00\xA8\x86\xE8\x72\x86\x00\x02\xA4\xA0\x72\x51\x92\x65\x74\x1D\x73\x5B\x4F\x65\x68\x45\x74\xA4\x31\x3C\x19\x39\xA0\x9C\x02\x1D\xA2\xB8\x74\x68\x5D\xA3\x54\x41\x3A\xA5\x81\x70\x54\x96\x55\x5F\x16\x0E\x71\x6F\x63\xA7\x86\x62\xA5\x66\xAD\x34\x10\x6B\xA3\x6B\xA1\xA6\x6D\xA3\x41\x41\x3D\xA4\xD0\x90\xA7\xAB\x94\xA6\x38\xAC\xA7\xB0\x90\x10\x6A\xA7\xA5\x77\x9F\xA3\x19\x8B\x91\x50\xA3\x9B\x7A\xAC\x34\x1C\x1E\x34\x37\x13\x37\x8E\xA5\x8B\x41\x37\x9B\x91\xAE\xA1\x27\xAA\x19\xBC\x9B\x3E\x27\xA8\xA8\x53\xAC\xA7\x34\xA8\x86\x4B\xA9\x9B\x27\xAD\xA9\x0F\xA4\xAA\x16\xA0\x00\x0F\x0F\xAA\x1E\x1E\x9B\x89\xA7\xA9\xFC\x6E\xA7\x9B\xA5\xA1\x84\x74\x54\x23\xAD\xA3\x1F\x7A\x64\x52\x63\x11\x1C\x06\xA7\xDC\x5B\x71\x15\x6C\x9A\x27\xA7\xAA\xB8\xA8\x72\x7E\xAE\xA2\x4F\x6D\x72\xC3\xAE\xAB\xC6\xAA\x65\xAF\x59\xAC\x92\x50\xA6\x32\xA6\xAD\x14\x62\x72\xB7\xAC\x19\x75\xAA\xAB\xC0\xAD\x61\xC2\xAE\x6E\x6F\xA5\xAD\x62\xA3\x54\xBF\xAB\xA5\xE9\xA3\x41\xC2\x75\x48\xC1\x91\xA7\xA4\x58\x53\x93\x61\x70\x95\x65\x5E\x03\x54\x49\x9D\x61\x6B\xB6\x40\x9A\xAF\x62\x64\x78\x6F\x69\x3F\x69\x98\x7D\x65\x60\x60\x58\x6B\xE9\x62\x4B\x16\x4F\x43\x04\x7E\xAF\x9D\x40\x6B\x01\xBB\x70\x03\xB1\x4C\xB6\x6B\x89\xB9\x65\x3C\xC8\x4F\x36\xCA\x45\x62\xF8\xAF\x8B\xD0\x41\x6C\x81\x5C\x63\x69\x62\x96\x11\x5B\x77\xEB\xA2\xAF\xE4\xA8\xAC\x4C\x65\xAD\xD2\xAE\x6E\x1B\x8A\x5B\x05\xA1\xAD\xE5\xAF\x60\xC1\x53\xAE\x91\x6A\x68\x86\x64\x9F\x39\x67\xAD\xA1\x11\xB1\x00\x63\xB1\xB5\x60\x45\x9B\x89\x8D\xF1\x62\x61\x33\xB9\xAC\xE1\x50\x66\x24\x68\x54\x1A\x49\xAF\x65\x6B\x65\xBF\x54\x6C\xD8\x4F\x62\xD5\x5D\x66\x36\xAC\xA5\x38\xBE\x76\x66\x91\x89\xE8\x5C\xB3\x82\x5F\x5C\xB3\x60\xB4\xF7\x92\x6A\x7E\x65\x6A\x80\x6F\x4A\xFA\x2E\x2C\x08\x14\xA8\x60\x75\x31\x2A\x38\x23\xC0\x2C\x13\x21\xAB\xAD\xC5\x15\xB2\xDE\x4B\x22\x95\x35\x23\x47\x1C\xB6\x00\x01\x36\x6E\xB7\xB7\x37\x13\x02\xFD\x20\xA7\x6C\xA9\xB5\x43\x55\xB7\xC8\x60\xB8\x08\x15\x02\xFD\x2C\xB7\xDC\x3F\xB7\x37\x7B\x22\x27\x0D\x2F\x9E\xA0\x78\x37\x7A\x9B\x90\xB0\x79\x2B\x22\x2B\x7A\xBC\x13\x27\xBC\x5B\x16\x79\xAC\x88\xBB\xAD\x6F\xB7\x13\xD9\x2D\xB9\x34\x1F\x01\x1A\x3C\x2D\x13\x39\x23\x2B\x2D\xBA\x70\xB1\xBB\xB2\xB8\x28\xB0\xBC\x2D\x9B\x21\x10\xBB\x23\xBB\xBB\x25\x31\xB5\xB3\xBB\x90\xA6\xB9\xB0\x75\x2A\xB1\xBB\xA8\x7C\x35\x3B\xDE\x6F\xB3\x71\x11\x3D\xE3\x6A\x38\x9D\x70\x71\x73\xB7\xB5\xFF\x0D\xBB\xFE\x27\x13\xB9\xB2\xBB\xBB\xB7\x13\xBD\xB3\xBB\x7C\xBF\x27\xB7\xB0\x23\xC4\xBA\x74\xB6\x32\xB0\x71\x1E\x75\x0E\x7D\xBC\x9C\x1F\xBC\x59\x6C\xBA\x2D\x21\x3D\xAB\xBE\xBB\x04\x32\x10\xBC\xBE\xBE\x22\x34\xAB\x38\x71\xBB\xD1\xBD\x22\x5E\x7D\xBD\xBE\xBD\xBE\xB3\x28\x10\xD5\xB1\xBB\xE8\xB2\x6F\x15\x3C\x02\xF2\xB2\x10\x9F\xB2\xB3\x2A\xB8\x4E\xD9\xB7\x13\xD1\x38\x69\xA0\x4B\x22\x84\xB0\xA8\x86\xB3\x41\xF7\xB5\x23\x6A\xB4\x31\x05\xC8\xBB\x37\x15\x31\xFF\xB0\xB7\x01\xCB\x60\x03\xC9\xC1\x00\x17\xC0\xDB\xAD\xB2\x0F\x65\x23\xD2\xB9\xAA\x5E\x73\xBB\xBD\xBC\xC1\x22\xC0\xA3\x36\xBD\x22\xD2\xBA\xBF\x1D\xC8\x23\x5E\x75\x31\xFC\xB3\xBB\x1F\xC9\x1C\x15\x35\x28\x22\xC5\xB9\x6A\x78\xB9\x37\x14\x2A\x22\xCE\xB8\xFD\xB5\x10\x3B\x35\xC4\xF4\xBE\xB7\xD8\xBF\xC2\xDB\xB2\xBC\x70\xBF\xBD\x73\x71\xBE\x12\xB9\xBC\xC3\x2D\x59\x0F\x77\xBE\xD5\xA5\xC1\x88\x2E\xC2\x4A\xC8\x10\x38\xCF\xC2\x3B\xC8\x39\x3D\xCF\xC2\x40\xC2\x9C\xB1\xA5\x31\x44\xC9\xC1\x46\xC5\x31\x49\xCC\xC6\x4B\xC7\xC4\x02\x1B\xC0\xB1\xBF\xC4\xFA\xBB\x22\x52\xC3\x7A\xC7\xB1\xB6\xE3\xB7\x13\xE5\xBF\x45\xCE\xB5\xAD\xEA\xB5\x23\xEC\xBF\xC2\x15\x31\xC6\x22\xC3\xC6\x96\x15\xC6\x3F\xC4\xBF\x42\xC8\x10\x6B\xC5\xC0\x6D\xC7\x8A\x5F",
"\xC4\xA1\x56\x1C\xC4\x08\x14\xC7\x70\xBF\xC4\x2C\x2C\xC5\x39\x2D\xBB\xD1\x3A\xBB\x2F\xC3\xBA\x57\xB5\xBA\x08\x11\xC1\xDB\xAD\xAE\x9C\x17\xC7\x37\x19\xAA\x0E\xC6\x4D\xE2\xBE\xA0\xDF\x24\xB6\x06\xBF\x15\xA8\xC7\xB5\xAA\xC3\x17\xBB\x2F\x0F\xBB\x20\xC4\x40\xCE\xC9\x01\x10\xC4\x2B\xA3\xC8\x05\x15\x1C\x1E\x02\xC3\x37\x13\xCC\x00\x07\xCC\x28\xCD\xC4\x08\x15\xAC\xCD\xC8\x10\x17\xC2\x10\x5F\xA4\xBB\x37\x15\xA5\xD5\xCF\xC9\x37\x14\xC3\xC8\xC0\xC6\xD4\xBD\xCD\x05\x15\xC8\x99\xC7\x13\x04\xCE\xCD\x22\xC4\xCA\x59\x66\xCA\x05\x17\xCB\x59\x69\xCB\x50\xC8\x23\xAE\xCB\xAF\x3E\xBC\xC7\xB2\xCF\x1F\xB4\xC0\x8C\xAD\x4C\xCE\xF2\x6E\xCE\x5E\x75\xCE\x19\xCA\xCF\x33\x61\xA8\x9C\x19\xC3\x2F\xC4\xC2\x57\xB6\xC2\xC9\xAC\xCA\x08\x12\xAA\x05\x1D\xB5\xDD\xAF\xB5\xB2\x6E\x63\x71\x1C\xBF\xD4\x56\xD0\x59\x68\xD0\x20\x6C\xCB\x37\x1E\xCB\xE0\xC2\x10\xCA\xCC\xCC\xD6\xC3\xCE\x08\x19\x33\xD1\xC5\x10\xC2\xCD\xD1\x06\x17\x13\x20\xDA\xCD\xD2\xC7\x13\xD9\xC1\x10\xC0\xC0\x10\xD8\xC8\xD2\x00\x1C\xCD\x25\xD0\xBF\xDF\xC7\xD3\x01\x12\xCE\x05\x1D\xBB\xC4\xB5\x31\xB3\xB8\xCE\xF2\x6A\xCE\x02\x10\xD0\xF6\x32\xD0\x42\x1A\xD0\x05\x11\xCF\x10\xB0\x4A\xB1\xC0\xC4\x5C\x53\x64\x29\x56\xCB\xE8\xA8\xD4\xBF\xB8\xA4\x05\xC6\xD4\x89\x68\xA7\x45\x74\xD0\x22\xC6\xD1\xF2\x68\xD1\xE8\x4A\xD4\x02\x1C\xD0\x02\x1E\xD0\x1F\x60\xD1\x79\x6B\x44\x50\xD7\xCF\x53\xD3\x11\x60\xD6\xB4\x09\xCD\x4A\x70\xB1\xD3\x1F\x12\xA4\xD3\xC1\x10\xD2\xBD\xBB\x5E\x75\x1C\xAF\xBB\xCD\xB2\xBC\xD4\x00\xBE\xD4\x55\xC5\xCF\x0E\x2E\xD6\x7F\x69\xA5\x55\xD3\xC1\xF4\x46\xD7\x76\xD1\xCA\xD6\xB3\xCA\xE9\x14\xBA\x8A\xBB\xCE\x8B\xDC\xD5\x43\x54\xD6\x01\x12\xD8\x9F\x40\xCB\x85\xD4\xD1\x15\xBA\xD5\x72\xA5\x5A\x45\x7A\xD1\x35\x2D\xCB\x1B\xD4\xD3\xEF\xB1\x10\x13\xAC\xD2\x26\xD9\xCC\xAA\xD6\xCC\xAA\xDF\xD1\xAA\xD9\xD7\x00\x1F\xD2\xC4\xC2\x10\x33\xDA\xD3\x35\xD9\xD3\x21\xD8\xC1\xFE\xBA\xDA\x3C\xD3\xC7\xE4\xCB\xC1\x92\xD9\x1D\x94\xD1\xB9\x37\x12\xDA\xF3\xA0\x59\xAB\xC1\xD8\xF1\x12\xCF\x84\xD8\xBC\x00\x00\xDA\x42\xBC\xDC\x77\xA4\xDA\x43\x5D\xCF\x2F\xC8\xDD\x37\xB8\xD9\x13\x4E\xD5\x19\xC1\xD7\x15\x70\xB5\x09\xD2\xBB\x66\xD1\x10\x68\xD1\x72\x6A\xD1\xCB\xD6\xD6\x15\xE4\xDC\x72\x47\xB9\xD1\xA8\xD8\x10\xBF\xCD\xBB\xB4\xDC\xDB\xAB\xD0\x10\xD0\xCF\xDB\x02\x17\xD2\xFA\xD6\xDB\x00\x08\xDB\x1F\x1D\xBB\xBB\xDE\xDF\x29\xD8\x10\x2B\xD0\xD3\xBD\xB6\xD3\x08\xE0\x10\x5E\xCF\xE0\x30\xCC\xBF\x3E\xD6\xDC\xE7\xC3\xD9\xA5\xC5\xD9\x45\xD7\xD9\xDA\xD3\x41\x9A\xD0\x10\x9C\xDD\xDE\x9F\xDF\x2E\xA1\xDC\xE1\xF4\xA5\x74\x5E\x74\xBC\xB3\xBE\xDD\x58\xB0\xDE\x03\xDF\xC2\x2B\x21\xDF\x1A\x71\xBA\x20\x6F\xE1\x00\x09\xDE\x00\x1B\xDE\x2E\x7E\x69\x85\xDD\xD6\x05\xB8\xCF\x5F\x12\xE3\xC1\xA3\xD7\x5F\x15\xD7\xD2\xB8\xD7\xCE\xC2\xE1\x7D\xD2\xBB\x0D\xE0\xDD\xE1\x12\xDD\x9E\xD4\xDD\xEF\xDB\x58\xDA\xA8\xCB\x56\xDA\xDF\xFF\x0E\x75\x55\xAC\xC2\x49\xE8\x23\xCA\xCA\xE3\x77\x6F\xC0\x37\x12\xE4\x29\xB4\xE3\xE8\x40\x25\xD2\xB3\xAB\x08\x1A\xE2\x30\xE8\xE5\x4B\xE2\xC2\xBD\xBA\xC9\x1E\xD7\x13\x1F\xB2\x46\xC2\x6A\xD6\x10\xC6\xE2\xCE\xD2\x14\x6D\xEC\xE0\xAA\xD9\xAA\x30\xEE\xD8\xBB\x2A\xCC\x7F\xD1\xDC\x86\xE3\xBF\x87\xE5\xC0\x64\xE7\xAC\x66\xED\x4A\xE2\xD5\xC0\x8A\xC2\x13\x7D\xEE\xE7\x35\x2A\xE6\x05\x1C\xE6\x93\xE9\xDB\x30\xD9\xBF\x2F\xC7\xBD\x6B\xE5\xD0\x2C\xB3\xDF\x0A\xC2\xBB\x0D\xC0\xE5\xFB\x39\xE7\x55\xED\xCE\x56\xDE\xD8\x02\xE0\xD4\x4C\xE6\xE1\x97\xE0\xEA\xA9\xE1\xD6\xA2\xE4\xD7\x9D\xCB\xD7\x0C\xCF\xC2\x72\xE4\x23\x42\xDB\x60\x44\xD1\x10\x2C\xEE\xCE\xA6\xD8\x28\xF5\xD0\xB7\xBD\xBE\xCF\x02\x16\xE3\x2B\x2D\xEB\xC9\x1F\xEB\x00\x11\xEC\x56\xDC\xDD\x22\xC0\xED\x8C\xD2\x14\x8F\xE2\xBF\x8B\xEC\xAD\x69\xDD\x4A\x36\xE8\xE3\x3B\xBF\xD0\x3C\xE2\xE5\x24\xE2\xB4\xD9\xE2\xD6\xAD\x43\xEC\xFF\xDF\xEA\x9F\xE8\x10\xCA\xEA\x14\x18\xE9\xCE\x1A\xE0\xEC\x7A\xE7\x59\x29\xED\xDD\xF3\xE5\x5F\xD7\xEE\xBE\xE5\xE5\xEB\x5F\x1D\xED\x9B\x14\xE4\xF3\xC2\xD1\x86\xD9\x21\x88\xD6\xB6\x87\x63\xEB\x72\xDD\xE8\x45\xE6\xBF\xB8\xE8\x10\xAD\xD3\xE9\xE8\xE0\xD3\xBB\x22\xA4\x85\xE5\x10\xBF\xAB\x2B\x5E\x7F\xAB\x3A\xC5\xAD\xBB\xE0\xE1\x37\x10\xBE\x0B\xFB\xB6\xF4\xBF\x27\x11\xF0\x10\x96\xE8\x23\x71\xEE\xDB\x02\x1E\x75\x1D\xFC\x22\x91\xE6\x15\xF9\xEE\xBB\x9C\xC9\xE9\x94\xE2\xE1\xDE\xE1\xE8\xBB\xCB\x2B\x4D\x6B\xF2\xAA\xDD\xBB\xFD\xDE",
"\xDA\x02\x12\xDB\xFA\xD0\xE0\x12\xE9\xDF\x12\xE2\xE0\x04\xE6\xD7\x07\xE4\xDC\xA0\x5A\xF2\x01\x1E\x75\x6F\xC2\xC9\x23\xF5\xDD\x34\xF0\x10\x7C\xB1\x36\x25\xFE\x59\x37\x1E\x75\x76\xDD\xBB\xCE\xA2\xE1\x44\xF0\xF4\x09\xE5\x10\x0B\xEA\xE9\x00\x16\xF4\x62\xF0\x10\x48\xFA\xDA\x4B\xFA\xD7\x2E\xDE\xF4\x56\xFF\xF6\x95\xC0\xA4\x96\x1F\x27\x2D\xFE\x75\x44\x91\xF2\x88\xE6\xC9\x1E\x18\xF5\xD2\xBC\xBF\xBF\xAC\xBF\x76\xDE\xE0\x69\xF2\xC7\x1A\xCA\xDF\xC3\xD4\x23\xBB\x22\xE0\x2D\xFB\x22\x4F\xC7\xF7\x6D\x1D\x76\x43\x5E\xF8\x53\xFC\xF0\xAA\xD7\xF3\xEA\xE9\xC1\xC5\x17\x7A\x51\x78\x16\xCE\xE7\xD5\x34\x79\xF5\x59\xFB\xF3\x4F\xFD\xF3\x37\x1F\xF3\x35\xF9\xEE\x08\x1A\xCC\x76\xD2\xF4\x45\xFA\xD2\xB5\xD2\xF7\x12\xED\xF6\x00\x1D\xBB\x51\xF1\x10\x31\xFB\xEC\x37\x1C\xF9\x79\x73\x75\xCA\xD2\xF2\xA3\xA0\x76\x50\xFE\xC4\x53\xF9\xFB\xB2\xB7\xF5\x1F\x1B\x2B\x68\xA5\xFA\xFA\xDE\xF5\xB1\xD0\xFB\x43\xF0\xDB\xFA\xD8\xF6\xA9\xF1\x10\x6B\xFA\xDF\xB4\xFB\xDF\x03\xE7\x13\xC6\xF8\x10\x9B\xF6\x6C\x9D\xFA\x7A\xBF\xFB\xF7\x74\xF5\x34\x5E\x74\xE0\xDA\xB3\xF5\x90\xFF\x21\xD9\x9C\x22\xC8\xFE\xD8\x80\xFC\xFD\xAA\xD4\xF8\xD5\xFE\xF1\x89\xE5\xFF\x13\xE2\xBB\xDD\xF5\xCC\xBB\xF0\xFE\xBD\xFA\x76\x94\x79\xF8\x78\x38\xC6\x74\xFC\x02\x82\xDD\x67\x7E\x91\x7C\xE8\x13\x7D\xAD\x75\xF9\x55\x78\xFE\x7F\x07\xF4\x7E\x7D\x5E\x74\x8B\x75\x00\xFC\x78\xCE\x36\x71\x79\x66\x78\x4A\x38\xEA\x6A\xBC\x4B\x41\x16\x62\x0A\x2F\x7E\x28\x12\x5F\x08\x75\xC0\x13\x82\x01\x75\x80\xE5\x78\xEB\x18\x81\x8F\x73\xC5\x7B\x62\xC0\x64\x5F\x66\x40\x0B\x70\x61\x2D\x56\xF6\x1F\x09\xE2\x6E\x5F\x2D\x63\xCC\x68\x81\x4F\x55\xF7\x10\x79\xC3\x65\x08\x5F\x79\xD3\x62\x7D\x5D\x19\xAD\x05\x0A\xFE\x5D\x7A\xA7\x7A\xB5\x61\x7A\xFC\x7E\xFA\x05\x7C\xF5\x75\x7D\x43\x60\xEE\x57\x6B\x48\x62\xBF\x48\x7F\xFE\x76\x61\xF4\x5C\x7B\x19\x7B\x0C\x00\xD8\x4D\x7D\x12\x91\x7E\xAB\x7F\xF9\x4A\x71\xD9\x60\xFD\x3D\x69\x19\x82\x08\x18\x7F\x0C\x95\x83\x38\x6B\xFE\x05\x09\xDE\x73\x08\x01\x86\x02\x9A\x83\xBF\x77\x13\x61\x55\x41\x1B\x65\xBD\x5F\xFA\x73\x7C\xD9\x78\x23\x0B\x7C\x25\x70\x63\x02\x81\x6C\x2D\x79\x8A\x1D\x93\x6E\x7D\x1C\x76\x7C\xFA\x69\x08\x90\x79\x9C\x77\x13\x45\x81\xB2\x66\x7D\x23\x6A\x09\x92\x7E\x09\x7D\x04\xF8\x7F\x13\x9A\x7E\x54\x80\x20\x29\x82\x48\x6B\x03\xC0\x5F\x07\x57\x82\x34\x16\x88\x5B\x83\x2E\x82\xE1\x3E\x7A\x24\x81\x83\xFA\x6D\x12\xB5\x81\x4B\x8D\xBB\x65\x7A\xA1\x0C\x80\x63\x83\xEE\x7C\x80\x27\x5A\xFD\x71\x82\x40\x0F\x83\x86\x82\x00\xB3\x83\x16\x1C\xBF\x76\x80\x1A\x91\x7D\x08\x09\xE9\x46\x70\x3E\x8A\xF8\x37\x0A\x80\x77\x7D\xEE\x58\xF9\x43\x85\x9B\x05\x08\xB6\x87\x2C\x97\x64\x19\x64\xD5\x44\x86\x09\x82\xC6\x3F\x0B\x51\x43\x7F\x3C\x79\x10\xAF\x67\x62\x88\x10\x00\x40\x10\x6A\x4B\x79\x42\x06\x88\x7F\x1A\x8F\x0F\x59\x7E\x28\x69\x64\xD6\x86\x33\x58\x86\xE6\x76\x01\xE1\x1A\x8D\x7B\x15\x00\x44\x78\x55\x44\xBF\x17\x80\x50\x4A\x26\x43\x87\x2F\x66\xB1\x66\x85\xAA\x72\xE8\x37\x09\x07\x12\x82\x48\x81\x12\xA0\x83\x82\x0A\xCC\x3D\x5E\x0F\x77\x83\xB0\x85\x20\x07\x88\xA9\x7A\x0B\xD4\x79\xD5\x67\x63\x0A\x57\x44\x70\x7F\x9B\x0B\x01\x00\x89\xEF\x4A\x85\x05\x73\x12\x82\x08\x57\x8B\x22\x7E\x80\x27\x92\x85\x9E\x85\x16\x4B\x86\x84\x0D\x0C\x89\x89\x0A\x9E\x08\xDC\x18\x11\x92\x70\xD4\x7D\xE7\x7D\x84\x42\x1F\x87\xF7\x7D\x06\xBD\x5C\x92\x60\xF6\x1A\x8A\xDB\x68\x08\x0B\x8F\xF0\x64\x7F\x80\x09\x13\xC9\x85\x16\x8E\x88\x34\x78\x22\x97\x5C\x89\x84\x07\x88\x09\x45\x91\x89\x19\x8E\xFB\x6A\x83\x55\x8B\x14\xAC\x12\x47\x85\x08\x99\x82\xE6\x7F\x89\x91\x86\x20\x1D\x4A\x95\x3B\x89\x21\x8A\x2E\x7E\x5C\xC7\x61\x01\xFB\x5C\xAC\x74\x66\x9D\x81\x27\x71\x5E\x90\x8A\x76\x5C\x5E\xEC\x59\x80\x09\x3B\xAD\x7F\x25\x0E\x88\xC5\x66\x5C\x08\x9B\x62\x23\x82\x0A\xB3\x5C\xFE\x55\x31\x68\x7C\x02\x9A\x86\x63\x88\x10\x96\x80\xB3\x83\xBC\x2C\x82\x1E\x7B\x80\xF4\x60\x06\x9F\x81\x19\x88\xB2\x1E\x08\x39\x97\x81\xBE\x5E\x04\x81\x08\xBB\x85\xC7\x71\x61\x5E\x8C\x88\x7B\x89\x1A\x92\x5E\x8C\x87\x0E\x99\x61\xF4\x12\x4F\x96\x0E\x19\x99\x8A\xE8\x4F\x0E\x94\x13\x7C\x15\x18\xE2\x4F\x97\x22\x84\xE9\x57\x09\x95\x8C\xA4\x69\x87\xCC\x42\x73\x66\x89\x67\x88\x12\xDB\x84\x8C\x10\x87\xF3\x0D\xAD\x52\x48\xFD\x4D\x98\x1C\x0E\x11\x72\x8C\xAA\x6C\x26\x82\x82\xE9\x5B\x2B\x04\x52\xB1\x72\x7F\x48\x8E\xEB\x20\x84\x80\x02",
"\x14\xAC\x55\xAC\x43\x8E\x2E\x7A\x90\x5B\x8B\x19\x62\x17\xB2\x5E\xFE\x55\x18\x1C\x8F\x2E\xB2\x82\xC3\x70\x10\x48\x86\x54\x98\x8B\x5D\x73\x0D\x86\x80\xD7\x8C\x22\x68\x88\xDD\x31\x65\x6C\x8C\xDC\x2E\x8A\xC2\x81\x51\x0E\x6C\x09\x92\x5F\xCF\x8D\x29\xA9\x7F\x86\x8E\xC6\x61\x8B\x0F\x4F\x8C\xDA\x89\x32\xAB\x81\xDC\x0F\x17\xEA\x8B\x88\x02\x8C\xE3\x89\x04\x8F\x80\xC4\x83\x17\xDF\x89\x40\x11\x8E\x8D\x8C\x3D\xBF\x82\xC8\x87\x12\xFD\x58\x75\x95\x85\xD2\x8D\x40\xBF\x13\xE5\x8D\x22\x4B\x82\x03\x92\x5F\x8E\x6B\x45\x2F\x1B\x07\x9E\xBE\x5C\x89\x73\x91\x5D\x4D\x75\x2F\xB4\x8E\x0D\x86\x1F\xFB\x0D\x78\x8C\x5E\x80\x62\x8B\x48\x79\xE4\x06\x1E\x97\x93\x6F\x8C\x77\x67\x8E\x2F\x9C\x91\x58\x68\x1F\xA1\x93\x5B\x83\x91\x98\x1F\x30\x80\x8E\x0A\x95\xF8\x7F\x07\x8A\x16\x8E\x34\x90\x46\x16\x90\xA4\x8D\x1F\xE6\x64\x12\x6E\x8F\x21\x40\x3E\xBE\x89\xED\x83\x1F\x85\x08\xC8\x60\x8C\x02\x7F\x43\xB1\x80\x73\x34\x1E\xCF\x31\x89\x9C\x91\xFA\x7E\x3F\x95\x8E\x20\x99\x7E\x42\x93\x75\x92\x8F\x29\x93\x43\xA9\x8A\x16\x9E\xC7\x4B\x91\x20\x70\x91\x99\x89\x29\x88\x14\xFE\x81\xD9\x3E\x93\xED\x24\x8B\xEF\x89\x3B\x83\x93\xC8\x88\xE6\x2D\x13\x8A\x06\x01\x39\x95\x42\x92\x5E\x4E\x70\xE7\x6A\x91\x72\x8F\x72\x4D\x6E\x9A\x28\x74\x27\x39\xCA\x2B\x76\xF4\x4D\x75\x71\x95\x46\xAB\x11\xA8\x81\x28\xAA\x6C\x04\x86\x91\x38\x11\x3D\x9F\x88\xBD\x85\x20\x8F\x5F\x80\x91\x8F\x05\x90\x93\x66\x82\x34\x93\x79\x45\x92\x40\x07\x92\x1D\x96\x8A\x48\x09\xE5\x5E\x25\xA2\x90\x9F\x90\x5E\x71\x88\x4A\xB1\x5C\x45\x90\x15\xD4\x93\x46\x4D\x8F\x94\x95\x4A\xB6\x93\xF5\x88\x25\x9A\x92\x91\x8D\x81\x48\x92\xCF\x2D\x90\x3D\x4D\x24\xDB\x56\x8C\x88\x08\xC8\x8C\x2E\x91\x83\x54\x97\x2A\x8F\x97\x9A\x91\x94\x07\x95\xF1\x6B\x8D\xCD\x80\x76\x6D\x91\x8D\x0B\x11\x3D\x8D\x50\x86\x95\xAE\x83\xBB\x07\x67\x4D\x09\x96\xB3\x5D\x38\xA0\x55\x34\x6B\x2B\x8C\x94\x6B\x83\x24\x07\x90\x47\x89\x91\x6B\x92\x29\xCC\x7A\xB5\x84\x96\x17\x81\x4B\xAF\x95\xFA\x80\x1E\xD7\x62\x78\x8E\x91\xB5\x90\x54\xAD\x11\xF3\x8E\xBE\x4E\x94\x4E\x86\x63\x8E\x67\x44\x6A\x62\x53\x9E\x8B\x28\x97\xB7\x82\x8B\xAB\x93\x5B\xA0\x96\xBE\x81\xC5\x2A\x93\x96\x85\x6C\xB3\x92\x06\xBA\x8F\x5B\x95\x10\x48\x8C\xA9\x82\x08\xD0\x92\x76\x52\x96\xCB\x0F\xC8\x25\x94\xAF\x95\x97\xBE\x97\x4A\x80\x96\x2B\x9C\x2A\x8A\x93\xAD\x6E\x93\xC5\x6A\x59\x86\x72\xFC\x54\x0A\xA5\x82\x94\x80\x00\xC8\x70\xDB\x61\x74\x22\x73\x11\x2D\x79\xA9\x79\x93\xA7\x73\xB9\x77\x76\x43\x32\x0D\xE6\x92\xFC\x59\x81\x08\x09\x64\xBA\x77\x91\x9A\xF0\x70\x82\x84\x7F\x07\x2A\x62\x63\x93\x74",
};

		void GuiIqGetParserBuffer(vl::stream::MemoryStream& stream)
		{
			vl::stream::MemoryStream compressedStream;
			for (vint i = 0; i < parserBufferRows; i++)
			{
				vint size = i == parserBufferRows - 1 ? parserBufferRemain : parserBufferBlock;
				compressedStream.Write((void*)parserBuffer[i], size);
			}
			compressedStream.SeekFromBegin(0);
			vl::stream::LzwDecoder decoder;
			vl::stream::DecoderStream decoderStream(compressedStream, decoder);
			vl::collections::Array<vl::vuint8_t> buffer(65536);
			while (true)
			{
				vl::vint size = decoderStream.Read(&buffer[0], 65536);
				if (size == 0) break;
				stream.Write(&buffer[0], size);
			}
			stream.SeekFromBegin(0);
		}
/***********************************************************************
Unescaping Function Foward Declarations
***********************************************************************/

/***********************************************************************
Parsing Tree Conversion Driver Implementation
***********************************************************************/

		class GuiIqTreeConverter : public vl::parsing::ParsingTreeConverter
		{
		public:
			using vl::parsing::ParsingTreeConverter::SetMember;

			bool SetMember(GuiIqNameOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Specified") { member=GuiIqNameOption::Specified; return true; }
					else if(token->GetValue()==L"Any") { member=GuiIqNameOption::Any; return true; }
					else { member=GuiIqNameOption::Specified; return false; }
				}
				member=GuiIqNameOption::Specified;
				return false;
			}

			bool SetMember(GuiIqChildOption& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"Direct") { member=GuiIqChildOption::Direct; return true; }
					else if(token->GetValue()==L"Indirect") { member=GuiIqChildOption::Indirect; return true; }
					else { member=GuiIqChildOption::Direct; return false; }
				}
				member=GuiIqChildOption::Direct;
				return false;
			}

			bool SetMember(GuiIqBinaryOperator& member, vl::Ptr<vl::parsing::ParsingTreeNode> node, const TokenList& tokens)
			{
				vl::Ptr<vl::parsing::ParsingTreeToken> token=node.Cast<vl::parsing::ParsingTreeToken>();
				if(token)
				{
					if(token->GetValue()==L"ExclusiveOr") { member=GuiIqBinaryOperator::ExclusiveOr; return true; }
					else if(token->GetValue()==L"Intersect") { member=GuiIqBinaryOperator::Intersect; return true; }
					else if(token->GetValue()==L"Union") { member=GuiIqBinaryOperator::Union; return true; }
					else if(token->GetValue()==L"Substract") { member=GuiIqBinaryOperator::Substract; return true; }
					else { member=GuiIqBinaryOperator::ExclusiveOr; return false; }
				}
				member=GuiIqBinaryOperator::ExclusiveOr;
				return false;
			}

			void Fill(vl::Ptr<GuiIqQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
			}

			void Fill(vl::Ptr<GuiIqPrimaryQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->childOption, obj->GetMember(L"childOption"), tokens);
				SetMember(tree->attributeNameOption, obj->GetMember(L"attributeNameOption"), tokens);
				SetMember(tree->attributeName, obj->GetMember(L"attributeName"), tokens);
				SetMember(tree->typeNameOption, obj->GetMember(L"typeNameOption"), tokens);
				SetMember(tree->typeName, obj->GetMember(L"typeName"), tokens);
				SetMember(tree->referenceName, obj->GetMember(L"referenceName"), tokens);
			}

			void Fill(vl::Ptr<GuiIqCascadeQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->parent, obj->GetMember(L"parent"), tokens);
				SetMember(tree->child, obj->GetMember(L"child"), tokens);
			}

			void Fill(vl::Ptr<GuiIqSetQuery> tree, vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)
			{
				SetMember(tree->first, obj->GetMember(L"first"), tokens);
				SetMember(tree->second, obj->GetMember(L"second"), tokens);
				SetMember(tree->op, obj->GetMember(L"op"), tokens);
			}

			vl::Ptr<vl::parsing::ParsingTreeCustomBase> ConvertClass(vl::Ptr<vl::parsing::ParsingTreeObject> obj, const TokenList& tokens)override
			{
				if(obj->GetType()==L"PrimaryQuery")
				{
					vl::Ptr<GuiIqPrimaryQuery> tree = new GuiIqPrimaryQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"CascadeQuery")
				{
					vl::Ptr<GuiIqCascadeQuery> tree = new GuiIqCascadeQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else if(obj->GetType()==L"SetQuery")
				{
					vl::Ptr<GuiIqSetQuery> tree = new GuiIqSetQuery;
					vl::collections::CopyFrom(tree->creatorRules, obj->GetCreatorRules());
					Fill(tree, obj, tokens);
					Fill(tree.Cast<GuiIqQuery>(), obj, tokens);
					return tree;
				}
				else 
					return 0;
			}
		};

		vl::Ptr<vl::parsing::ParsingTreeCustomBase> GuiIqConvertParsingTreeNode(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			GuiIqTreeConverter converter;
			vl::Ptr<vl::parsing::ParsingTreeCustomBase> tree;
			converter.SetMember(tree, node, tokens);
			return tree;
		}

/***********************************************************************
Parsing Tree Conversion Implementation
***********************************************************************/

		vl::Ptr<GuiIqPrimaryQuery> GuiIqPrimaryQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqPrimaryQuery>();
		}

		vl::Ptr<GuiIqCascadeQuery> GuiIqCascadeQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqCascadeQuery>();
		}

		vl::Ptr<GuiIqSetQuery> GuiIqSetQuery::Convert(vl::Ptr<vl::parsing::ParsingTreeNode> node, const vl::collections::List<vl::regex::RegexToken>& tokens)
		{
			return GuiIqConvertParsingTreeNode(node, tokens).Cast<GuiIqSetQuery>();
		}

/***********************************************************************
Visitor Pattern Implementation
***********************************************************************/

		void GuiIqPrimaryQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqCascadeQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

		void GuiIqSetQuery::Accept(GuiIqQuery::IVisitor* visitor)
		{
			visitor->Visit(this);
		}

/***********************************************************************
Parser Function
***********************************************************************/

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			return node;
		}

		vl::Ptr<vl::parsing::ParsingTreeNode> GuiIqParseAsParsingTreeNode(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParseAsParsingTreeNode(input, table, errors, codeIndex);
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::collections::List<vl::Ptr<vl::parsing::ParsingError>>& errors, vl::vint codeIndex)
		{
			vl::parsing::tabling::ParsingState state(input, table, codeIndex);
			state.Reset(L"QueryRoot");
			vl::Ptr<vl::parsing::tabling::ParsingGeneralParser> parser=vl::parsing::tabling::CreateStrictParser(table);
			vl::Ptr<vl::parsing::ParsingTreeNode> node=parser->Parse(state, errors);
			if(node && errors.Count()==0)
			{
				return GuiIqConvertParsingTreeNode(node, state.GetTokens()).Cast<GuiIqQuery>();
			}
			return 0;
		}

		vl::Ptr<GuiIqQuery> GuiIqParse(const vl::WString& input, vl::Ptr<vl::parsing::tabling::ParsingTable> table, vl::vint codeIndex)
		{
			vl::collections::List<vl::Ptr<vl::parsing::ParsingError>> errors;
			return GuiIqParse(input, table, errors, codeIndex);
		}

/***********************************************************************
Table Generation
***********************************************************************/

		vl::Ptr<vl::parsing::tabling::ParsingTable> GuiIqLoadTable()
		{
			vl::stream::MemoryStream stream;
			GuiIqGetParserBuffer(stream);
			vl::Ptr<vl::parsing::tabling::ParsingTable> table=new vl::parsing::tabling::ParsingTable(stream);
			table->Initialize();
			return table;
		}

	}
}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
#ifndef VCZH_DEBUG_NO_REFLECTION
			using namespace vl::presentation;

			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery, presentation::GuiIqQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqNameOption, presentation::GuiIqNameOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqChildOption, presentation::GuiIqChildOption)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqPrimaryQuery, presentation::GuiIqPrimaryQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqCascadeQuery, presentation::GuiIqCascadeQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqBinaryOperator, presentation::GuiIqBinaryOperator)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqSetQuery, presentation::GuiIqSetQuery)
			IMPL_TYPE_INFO_RENAME(vl::presentation::GuiIqQuery::IVisitor, presentation::GuiIqQuery::IVisitor)

			BEGIN_CLASS_MEMBER(GuiIqQuery)
				CLASS_MEMBER_METHOD(Accept, {L"visitor"})

			END_CLASS_MEMBER(GuiIqQuery)

			BEGIN_ENUM_ITEM(GuiIqNameOption)
				ENUM_ITEM_NAMESPACE(GuiIqNameOption)
				ENUM_NAMESPACE_ITEM(Specified)
				ENUM_NAMESPACE_ITEM(Any)
			END_ENUM_ITEM(GuiIqNameOption)

			BEGIN_ENUM_ITEM(GuiIqChildOption)
				ENUM_ITEM_NAMESPACE(GuiIqChildOption)
				ENUM_NAMESPACE_ITEM(Direct)
				ENUM_NAMESPACE_ITEM(Indirect)
			END_ENUM_ITEM(GuiIqChildOption)

			BEGIN_CLASS_MEMBER(GuiIqPrimaryQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqPrimaryQuery>(), NO_PARAMETER)

				CLASS_MEMBER_EXTERNALMETHOD(get_attributeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->attributeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_attributeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->attributeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_typeName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->typeName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_typeName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->typeName.value = value; })
				CLASS_MEMBER_EXTERNALMETHOD(get_referenceName, NO_PARAMETER, vl::WString(GuiIqPrimaryQuery::*)(), [](GuiIqPrimaryQuery* node){ return node->referenceName.value; })
				CLASS_MEMBER_EXTERNALMETHOD(set_referenceName, {L"value"}, void(GuiIqPrimaryQuery::*)(const vl::WString&), [](GuiIqPrimaryQuery* node, const vl::WString& value){ node->referenceName.value = value; })

				CLASS_MEMBER_FIELD(childOption)
				CLASS_MEMBER_FIELD(attributeNameOption)
				CLASS_MEMBER_PROPERTY(attributeName, get_attributeName, set_attributeName)
				CLASS_MEMBER_FIELD(typeNameOption)
				CLASS_MEMBER_PROPERTY(typeName, get_typeName, set_typeName)
				CLASS_MEMBER_PROPERTY(referenceName, get_referenceName, set_referenceName)
			END_CLASS_MEMBER(GuiIqPrimaryQuery)

			BEGIN_CLASS_MEMBER(GuiIqCascadeQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqCascadeQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(parent)
				CLASS_MEMBER_FIELD(child)
			END_CLASS_MEMBER(GuiIqCascadeQuery)

			BEGIN_ENUM_ITEM(GuiIqBinaryOperator)
				ENUM_ITEM_NAMESPACE(GuiIqBinaryOperator)
				ENUM_NAMESPACE_ITEM(ExclusiveOr)
				ENUM_NAMESPACE_ITEM(Intersect)
				ENUM_NAMESPACE_ITEM(Union)
				ENUM_NAMESPACE_ITEM(Substract)
			END_ENUM_ITEM(GuiIqBinaryOperator)

			BEGIN_CLASS_MEMBER(GuiIqSetQuery)
				CLASS_MEMBER_BASE(GuiIqQuery)

				CLASS_MEMBER_CONSTRUCTOR(vl::Ptr<GuiIqSetQuery>(), NO_PARAMETER)


				CLASS_MEMBER_FIELD(first)
				CLASS_MEMBER_FIELD(second)
				CLASS_MEMBER_FIELD(op)
			END_CLASS_MEMBER(GuiIqSetQuery)

			BEGIN_INTERFACE_MEMBER(GuiIqQuery::IVisitor)
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqPrimaryQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqCascadeQuery* node))
				CLASS_MEMBER_METHOD_OVERLOAD(Visit, {L"node"}, void(GuiIqQuery::IVisitor::*)(GuiIqSetQuery* node))
			END_INTERFACE_MEMBER(GuiIqQuery)

			class GuiIqTypeLoader : public vl::Object, public ITypeLoader
			{
			public:
				void Load(ITypeManager* manager)
				{
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqNameOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqChildOption)
					ADD_TYPE_INFO(vl::presentation::GuiIqPrimaryQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqCascadeQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqBinaryOperator)
					ADD_TYPE_INFO(vl::presentation::GuiIqSetQuery)
					ADD_TYPE_INFO(vl::presentation::GuiIqQuery::IVisitor)
				}

				void Unload(ITypeManager* manager)
				{
				}
			};
#endif

			bool GuiIqLoadTypes()
			{
#ifndef VCZH_DEBUG_NO_REFLECTION
				ITypeManager* manager=GetGlobalTypeManager();
				if(manager)
				{
					Ptr<ITypeLoader> loader=new GuiIqTypeLoader;
					return manager->AddTypeLoader(loader);
				}
#endif
				return false;
			}
		}
	}
}
