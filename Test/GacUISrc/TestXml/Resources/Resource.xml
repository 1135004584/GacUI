<Resource>
  <Script name="ColorDef">
    <Workflow>
      <![CDATA[
        module Animation;

        using system::*;
        using presentation::*;

        namespace demo
        {
          class ColorDef
          {
            prop Top : Color = cast Color "#000000" {}
            prop Bottom : Color = cast Color "#000000" {}
            prop Shadow : Color = cast Color "#000000" {}
            prop Thiciness : int = 0 {}
          }
        }
      ]]>
    </Workflow>
  </Script>

  <Animation name="ColorAnimation">
    <Gradient ref.Class="demo::ColorAnimation" Type="demo::ColorDef">
      <Interpolation>
        <![CDATA[
          [$1]
        ]]>
      </Interpolation>
    </Gradient>
  </Animation>
  
  <Instance name="MainWindowResource">
    <Instance ref.Class="demo::MainWindow" xmlns:demo="demo::*">
      <ref.Members>
        <![CDATA[
          @cpp:Private
          static func F(x: double): double
          {
            var y = x * x * 2;
            return y;
          }
        
          @cpp:Private
          static func BallAnimation(container: GuiBoundsComposition*, ball: GuiBoundsComposition*): IGuiAnimation^
          {
            return IGuiAnimation::CreateAnimation(
              func (time: UInt64): void
              {
                var circleRatio = (cast double time) / 2000;
                if (circleRatio < 0.5)
                {
                  circleRatio = F(circleRatio);
                }
                else
                {
                  circleRatio = 1 - F(1 - circleRatio);
                }
                
                var angle = circleRatio * Math::Pi() * 2 + Math::Pi() * 1.5;
                var sin = Math::Sin(angle);
                var cos = Math::Cos(angle);
                
                var cx = (container.Bounds.x2 - container.Bounds.x1) / 2;
                var cy = (container.Bounds.y2 - container.Bounds.y1) / 2;
                var radiusBall = (ball.Bounds.x2 - ball.Bounds.x1) / 2;
                var radiusOrbit = Math::Min(cx, cy) - radiusBall;
                
                var x = cast int Math::Round(cos * radiusOrbit + cx);
                var y = cast int Math::Round(sin * radiusOrbit + cx);
                ball.AlignmentToParent = {left:(x - radiusBall) top:(y - radiusBall) right:-1 bottom:-1};
                
                var alpha = 1.0;
                if (circleRatio < 0.05)
                {
                  alpha = circleRatio * 20;
                }
                else if (circleRatio > 0.95)
                {
                  alpha = (1 - circleRatio) * 20;
                }
                
                var element = cast (SolidBackground^) ball.OwnedElement;
                var color = element.Color;
                element.Color = {r:color.r g:color.g b:color.b a:(cast UInt8 Math::Round(alpha * 255))};
                
                if (not ball.Visible)
                {
                  ball.Visible = true;
                }
              }, cast UInt64 2000);
          }
          
          @cpp:Private
          static func BallAnimationWithDelay(container: GuiBoundsComposition*, ball: GuiBoundsComposition*, delay: int): IGuiAnimation^
          ${
            $Wait (cast UInt64 delay);
            $PlayAndWait BallAnimation(container, ball);
            ball.Visible = false;
          }
          
          @cpp:Private
          static func WaitingAnimation(container: GuiBoundsComposition*): IGuiAnimation^
          ${
            var balls = {} of GuiBoundsComposition*[];
            for (i in range [0, 8))
            {
              var ball = new GuiBoundsComposition*();
              balls.Add(ball);
              
              ball.Visible = false;
              ball.PreferredMinSize = {x:16 y:16};
              
              var element = new SolidBackground^();
              element.Shape = {shapeType:Ellipse};
              element.Color = cast Color "#3F48CC";
              ball.OwnedElement = element;
              
              container.AddChild(ball);
            }
            
            while (true)
            {
              $Wait (cast UInt64 500);
              for (i in range [0, balls.Count))
              {
                $PlayInGroup BallAnimationWithDelay(container, balls[i], 150 * i), 0;
              }
              $WaitForGroup 0;
            }
          }
        ]]>
      </ref.Members>
      <ref.Ctor>
        <![CDATA[
          {
            self.AddAnimation(WaitingAnimation(animationBackground));
          }
        ]]>
      </ref.Ctor>
      <Window ref.Name="self" Text="GacUI XML资源临时测试" ClientSize="x:640 y:480">
        <att.BoundsComposition-set PreferredMinSize="x:640 y:480"/>

        <Tab>
          <att.BoundsComposition-set AlignmentToParent="left:5 top:5 right:5 bottom:5"/>

          <att.Pages>
            <TabPage Text="Complex Animation">
              <BoundsComposition ref.Name="animationBackground" AlignmentToParent="left:10 top:10 right:-1 bottom:-1" PreferredMinSize="x:200 y:200">
                <SolidBackground Color="#FFC929"/>
              </BoundsComposition>
            </TabPage>

            <TabPage Text="Gradient Animation">
            </TabPage>
          </att.Pages>
        </Tab>
      </Window>
    </Instance>
  </Instance>
</Resource>