<Resource>
  <Folder name="Images">
    <Image name="Checked" content="File">../../Host/Resources/FullControlTest/Images/005_Task_32x32_72.png</Image>
    <Image name="Partial" content="File">../../Host/Resources/FullControlTest/Images/112_Plus_Blue_32x32_72.png</Image>
  </Folder>

  <Script>
    <Workflow>
      <![CDATA[
        module triplephasebutton;

        using system::*;
        using presentation::*;

        enum TripleState
        {
          None = 0,
          Checked = 1,
          Partial = 2,
        }
      ]]>
    </Workflow>
  </Script>

  <Instance name="TriplePhaseImageButtonTemplateResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::TriplePhaseImageButtonTemplate">
      <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
        <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" CellPadding="2" BorderVisible="true" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <_>composeType:Percentage percentage:0.5</_>
            <_>composeType:Absolute absolute:32</_>
            <_>composeType:Percentage percentage:0.5</_>
          </att.Rows>
          <att.Columns>
            <_>composeType:Absolute absolute:32</_>
            <_>composeType:Percentage percentage:1.0</_>
          </att.Columns>

          <Cell Site="row:1 column:0">
            <ImageFrame Stretch="true">
              <att.Image-bind>
                <![CDATA[
                  (
                    let control = cast (TriplePhaseButton*) self.Context in (
                      control.State == TripleState::Checked ? control.CheckedImage.Image:
                      control.State == TripleState::Partial ? control.PartialImage.Image:
                      null
                    )
                  ) ?? null
                ]]>
              </att.Image-bind>
            </ImageFrame>
          </Cell>
          <Cell Site="row:1 column:1">
            <SolidLabel Text-bind="self.Text" Font-bind="self.Font" Color="#FFFFFF" VerticalAlignment="Center"/>
          </Cell>
        </Table>
      </ButtonTemplate>
    </Instance>
  </Instance>

  <Instance name="TriplePhaseButtonTemplate">
    <Instance ref.CodeBehind="false" ref.Class="demo::TriplePhaseButton">
      <ref.Members>
        <![CDATA[
          prop State: TripleState = TripleState::Checked {}
          prop CheckedImage: GuiImageData^ = null {}
          prop PartialImage: GuiImageData^ = null {}
        ]]>
      </ref.Members>
      <CustomControl ref.Name="self">
        <Button Text-bind="self.Text" Font-bind="self.Font" Context-eval="self">
          <att.ControlTemplate>demo::TriplePhaseImageButtonTemplate</att.ControlTemplate>
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
          <ev.Clicked-eval>
            <![CDATA[
              {
                switch (self.State)
                {
                case TripleState::None:    { self.State = TripleState::Checked; }
                case TripleState::Checked: { self.State = TripleState::Partial; }
                case TripleState::Partial: { self.State = TripleState::None;    }
                }
              }
            ]]>
          </ev.Clicked-eval>
        </Button>
      </CustomControl>
    </Instance>
  </Instance>

  <Instance name="MainWindowInstance">
    <Instance ref.CodeBehind="false" ref.Class="demo::MainWindow" xmlns:demo="demo::*">
      <Window Text="TriplePhaseImageButton" ClientSize="x:640 y:480">
        <demo:TriplePhaseButton Text="Button" CheckedImage-uri="res://Images/Checked" PartialImage-uri="res://Images/Partial">
          <att.BoundsComposition-set AlignmentToParent="left:10 top:20 right:-1 bottom:-1" PreferredMinSize="x:120 y:40"/>
        </demo:TriplePhaseButton>
      </Window>
    </Instance>
  </Instance>
</Resource>