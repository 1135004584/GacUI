<Resource>
  <Text name="Keep">
    <![CDATA[
  <Folder name="ToolbarImages" content="Link">../../Host/Resources/FullControlTest/ToolbarImages/Images.xml</Folder>
  <Folder name="DocumentComponents" content="Link">../../Host/Resources/FullControlTest/DocumentComponents.xml</Folder>
  <Folder name="DocumentEditorBase" content="Link">../../Host/Resources/FullControlTest/DocumentEditorBase.xml</Folder>
  <Folder name="DocumentEditorRibbon" content="Link">../../Host/Resources/FullControlTest/DocumentEditorRibbon.xml</Folder>

  <Instance name="MainWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::MainWindow" xmlns:demo="demo::*">
      <Window Text-bind="editor.Text" ClientSize="x:800 y:600">
        <demo:DocumentEditorRibbon ref.Name="editor">
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
        </demo:DocumentEditorRibbon>
      </Window>
    </Instance>
  </Instance>

  <Folder name="DarkSkin">
    <Instance name="DarkSkinThemeResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::RibbonTheme" xmlns:x="darkskin::*">
        <ThemeTemplates>
        </ThemeTemplates>
      </Instance>
    </Instance>
    <InstanceStyle name="Style" content="File">../../Host/Resources/DarkSkin/Style.xml</InstanceStyle>
  </Folder>
    ]]>
  </Text>

  <Script name="ViewModelScript">
    <Workflow>
      <![CDATA[
        module viewmodel;
        
        using system::*;
        
        interface IViewModel
        {
          func GetString(): string;
        }
      ]]>
    </Workflow>
  </Script>

  <Instance name="BaseWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::BaseWindow" xmlns:demo="demo::*">
      <ref.Parameter Name="ViewModel" Class="IViewModel"/>
      <Window ref.Name="self">
        <Label TextColor="#FFFFFF" Font="fontFamily:'SegoeUI' size:36" Text-eval="ViewModel.GetString()"/>
      </Window>
    </Instance>
  </Instance>

  <Instance name="DerivedWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::DerivedWindow" xmlns:demo="demo::*">
      <ref.Members>
        <![CDATA[
          static func CreateViewModel(): IViewModel^
          {
            return new IViewModel^
            {
              override func GetString(): string
              {
                return "String from demo::MainWindow";
              }
            };
          }
        ]]>
      </ref.Members>
      <demo:BaseWindow ViewModel-eval="CreateViewModel()" Text="Derived Window" ClientSize="x:640 y:480">
      </demo:BaseWindow>
    </Instance>
  </Instance>

  <Instance name="MainWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::MainWindow" xmlns:demo="demo::*">
      <demo:DerivedWindow>
      </demo:DerivedWindow>
    </Instance>
  </Instance>
</Resource>