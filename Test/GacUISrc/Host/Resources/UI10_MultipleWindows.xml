<Resource>
  <Folder name="Documents">
    <Doc name="Sample">
    <Doc>
      <Content>
        <p>
          <div style="Title">GacUI Rich Document Demo</div>
        </p>
        <p align="Left">
          <div style="Content">
            <nop>This is a sample document to demonstrate the rich document in GacUI. </nop>
            <nop>Text in a paragraph can be <b>bold</b>, <i>italic</i>, <u>underline</u>, <s>strikeline</s> or their <b><i><u><s>combination</s></u></i></b>. </nop>
            <nop>Text in a paragraph can also have different <font face="Harlow Solid" size="32">font</font>, <font color="#FF5000">text color</font> and <font bkcolor="#0050FF" color="#FF5000">background color</font>.</nop>
          </div>
        </p>
        <p align="Center"><div style="Content">Paragraph can also center-aliened,</div></p>
        <p align="Right"><div style="Content">Or even right-aligned.</div></p>
        <p>
          <div style="Content">
            <nop>Rich document now supports <b>images</b>, <b>style list</b> and <b>hyper-link</b>, but this demo does not show the full features because the file format limitation ---- <i>All resoures are linked, not encoded into the xml file</i>.</nop>
          </div>
        </p>
      </Content>
      <Styles>
        <Style name="Title" parent="#Default">
          <face>Segoe UI</face>
          <size>24</size>
          <b>true</b>
        </Style>
        <Style name="Content" parent="#Default">
          <face>Segoe UI</face>
          <size>16</size>
        </Style>
      </Styles>
    </Doc>
    </Doc>
  </Folder>
  
  <Instance name="MainWindowResource">
    <Instance ref.Class="demo::MainWindow">
      <Window ref.Name="self" Text-format="MainWindow" ClientSize="x:640 y:480">
        <att.BoundsComposition-set PreferredMinSize="x:640 y:480"/>
        <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" CellPadding="5">
          <att.Rows>
            <CellOption>composeType:MinSize</CellOption>
            <CellOption>composeType:Percentage percentage:1.0</CellOption>
          </att.Rows>
          <att.Columns>
            <CellOption>composeType:Percentage percentage:0.5</CellOption>
            <CellOption>composeType:Percentage percentage:0.5</CellOption>
          </att.Columns>

          <Cell Site="row:0 column:0 columnSpan:2">
            <ToolstripMenuBar ref.Name="menuDropDown">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <MenuBarButton Text="File">
                <att.SubMenu-set>
                  <MenuItemButton Text="New" Alt="N">
                    <att.SubMenu-set>
                      <MenuItemButton Text="New Text File" Alt="T" ShortcutText="Ctrl+N"/>
                      <MenuItemButton Text="New RTF File" Alt="R"/>
                    </att.SubMenu-set>
                  </MenuItemButton>
                  <MenuItemButton Text="Open" Alt="O">
                    <att.SubMenu-set>
                      <MenuItemButton Text="Open Text File..." Alt="T" ShortcutText="Ctrl+O"/>
                      <MenuItemButton Text="Open RTF File..." Alt="R"/>
                    </att.SubMenu-set>
                  </MenuItemButton>
                  <MenuItemButton Text="Save" Alt="S" ShortcutText="Ctrl+S"/>
                  <MenuItemButton Text="Save As..." Alt="A"/>
                  <MenuSplitter/>
                  <MenuItemButton Text="Print" Alt="P"/>
                  <MenuSplitter/>
                  <MenuItemButton Text="Exit" Alt="X"/>
                </att.SubMenu-set>
              </MenuBarButton>
            </ToolstripMenuBar>
          </Cell>

          <Cell Site="row:1 column:0">
            <DocumentViewer EditMode="Editable" Document-uri="res://Documents/Sample" ControlTemplate="darkskin::DocumentViewerTemplate">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
            </DocumentViewer>
          </Cell>

          <Cell Site="row:1 column:1">
            <Button Text="Click me and show a modal window!" Alt="C">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <ev.Clicked-eval>
                <![CDATA[
                  $Async{
                    var window = new demo::ModalWindow*();
                    window.MoveToScreenCenter();
                    $Await window.ShowModalAsync(self);
                    delete window;
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </Cell>
        </Table>
      </Window>
    </Instance>
  </Instance>
  
  <Instance name="ModalWindowResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::ModalWindow">
      <Window Text-format="ModalWindow" ClientSize="x:320 y:240" SizeBox="false">
        <Label Text="Modal Window!" Font="fontFamily:'Segoe UI' size:40"/>
      </Window>
    </Instance>
  </Instance>

  <Folder name="DarkSkin">

    <Instance name="DocumentViewerTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::DocumentViewerTemplate" ref.Styles="res://DarkSkin/Style">
        <DocumentViewerTemplate ref.Name="self" ContainerComposition-ref="container" MinSizeLimitation="LimitToElementAndChildren" BaselineDocument-uri="res://DarkSkin/BaselineDocument">
          <att.HScrollTemplate>darkskin::HScrollTemplate</att.HScrollTemplate>
          <att.VScrollTemplate>darkskin::VScrollTemplate</att.VScrollTemplate>
          <att.DefaultScrollSize>20</att.DefaultScrollSize>
          <att.CaretColor>#FFFFFF</att.CaretColor>

          <SolidBackground Color="#252526"/>
          <Bounds ref.Name="container" AlignmentToParent="left:0 top:0 right:0 bottom:0" InternalMargin="left:1 top:1 right:1 bottom:1">
            <SolidBorder Color="#3F3F46"/>
          </Bounds>
        </DocumentViewerTemplate>
      </Instance>
    </Instance>

    <Instance name="HScrollTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::HScrollTemplate" ref.Styles="res://DarkSkin/Style">
        <ref.Members>
          <![CDATA[
            @cpp:Protected
            var draggingHandle : bool = false;
          
            @cpp:Protected
            var draggingStartLocation : Point = {x:0 y:0};
          ]]>
        </ref.Members>
        <ScrollTemplate ref.Name="self" ContainerComposition-ref="self" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground Color="#3D3D42"/>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Left">
            <Button ControlTemplate="darkskin::LeftScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallDecrease();"/>
          </SideAligned>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Right">
            <Button ControlTemplate="darkskin::RightScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallIncrease();"/>
          </SideAligned>
          <Bounds ref.Name="handleContainer" AlignmentToParent="left:20 top:0 right:20 bottom:0">
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigDecrease();}">
              <att.AlignmentToParent-bind>{left:0 top:0 right:(handleContainer.Bounds.x2 - handleContainer.Bounds.x1 - handle.Bounds.x1) bottom:0}</att.AlignmentToParent-bind>
            </Bounds>
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigIncrease();}">
              <att.AlignmentToParent-bind>{left:(handle.Bounds.x2) top:0 right:0 bottom:0}</att.AlignmentToParent-bind>
            </Bounds>
            <PartialView ref.Name="handle">
              <att.WidthPageSize-bind>(cast double self.PageSize) / self.TotalSize</att.WidthPageSize-bind>
              <att.WidthRatio-bind>(cast double self.Position) / self.TotalSize</att.WidthRatio-bind>
              <ev.leftButtonDown-eval>
                <![CDATA[
                  if (self.VisuallyEnabled)
                  {
                    self.draggingHandle = true;
                    self.draggingStartLocation = {x:arguments.x y:arguments.y};
                  }
                ]]>
              </ev.leftButtonDown-eval>
              <ev.leftButtonUp-eval>
                <![CDATA[
                  self.draggingHandle = false;
                ]]>
              </ev.leftButtonUp-eval>
              <ev.mouseMove-eval>
                <![CDATA[
                  if (self.draggingHandle)
                  {
                    var bounds = handle.Parent.Bounds;
                    var totalPixels = bounds.x2 - bounds.x1;
                    var currentOffset = handle.Bounds.x1;
                    var newOffset = currentOffset + (arguments.x - self.draggingStartLocation.x);
                    ScrollTemplateScript::SetScroll(totalPixels, newOffset, self);
                  }
                ]]>
              </ev.mouseMove-eval>
              <Button ControlTemplate="darkskin::HScrollHandleTemplate"/>
            </PartialView>
          </Bounds>
        </ScrollTemplate>
      </Instance>
    </Instance>

    <Instance name="VScrollTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::VScrollTemplate" ref.Styles="res://DarkSkin/Style">
        <ref.Members>
          <![CDATA[
            @cpp:Protected
            var draggingHandle : bool = false;
          
            @cpp:Protected
            var draggingStartLocation : Point = {x:0 y:0};
          ]]>
        </ref.Members>
        <ScrollTemplate ref.Name="self" ContainerComposition-ref="self" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground Color="#3D3D42"/>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Top">
            <Button ControlTemplate="darkskin::TopScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallDecrease();"/>
          </SideAligned>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Bottom">
            <Button ControlTemplate="darkskin::BottomScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallIncrease();"/>
          </SideAligned>
          <Bounds ref.Name="handleContainer" AlignmentToParent="left:0 top:20 right:0 bottom:20">
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigDecrease();}">
              <att.AlignmentToParent-bind>{left:0 top:0 right:0 bottom:(handleContainer.Bounds.y2 - handleContainer.Bounds.y1 - handle.Bounds.y1)}</att.AlignmentToParent-bind>
            </Bounds>
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigIncrease();}">
              <att.AlignmentToParent-bind>{left:0 top:(handle.Bounds.y2) right:0 bottom:0}</att.AlignmentToParent-bind>
            </Bounds>
            <PartialView ref.Name="handle">
              <att.HeightPageSize-bind>(cast double self.PageSize) / self.TotalSize</att.HeightPageSize-bind>
              <att.HeightRatio-bind>(cast double self.Position) / self.TotalSize</att.HeightRatio-bind>
              <ev.leftButtonDown-eval>
                <![CDATA[
                  if (self.VisuallyEnabled)
                  {
                    self.draggingHandle = true;
                    self.draggingStartLocation = {x:arguments.x y:arguments.y};
                  }
                ]]>
              </ev.leftButtonDown-eval>
              <ev.leftButtonUp-eval>
                <![CDATA[
                  self.draggingHandle = false;
                ]]>
              </ev.leftButtonUp-eval>
              <ev.mouseMove-eval>
                <![CDATA[
                  if (self.draggingHandle)
                  {
                    var bounds = handle.Parent.Bounds;
                    var totalPixels = bounds.y2 - bounds.y1;
                    var currentOffset = handle.Bounds.y1;
                    var newOffset = currentOffset + (arguments.y - self.draggingStartLocation.y);
                    ScrollTemplateScript::SetScroll(totalPixels, newOffset, self);
                  }
                ]]>
              </ev.mouseMove-eval>
              <Button ControlTemplate="darkskin::VScrollHandleTemplate"/>
            </PartialView>
          </Bounds>
        </ScrollTemplate>
      </Instance>
    </Instance>

    <Instance name="LeftScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::LeftScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:5 y:9">
                <att.Points>
                  <Point>x:4 y:0</Point>
                  <Point>x:0 y:4</Point>
                  <Point>x:4 y:8</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="RightScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::RightScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:5 y:9">
                <att.Points>
                  <Point>x:0 y:0</Point>
                  <Point>x:4 y:4</Point>
                  <Point>x:0 y:8</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="TopScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::TopScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:9 y:5">
                <att.Points>
                  <Point>x:0 y:4</Point>
                  <Point>x:4 y:0</Point>
                  <Point>x:8 y:4</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="BottomScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::BottomScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:9 y:5">
                <att.Points>
                  <Point>x:0 y:0</Point>
                  <Point>x:4 y:4</Point>
                  <Point>x:8 y:0</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="HScrollHandleTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::HScrollHandleTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Bounds AlignmentToParent="left:0 top:4 right:0 bottom:4">
            <SolidBackground ref.Style="scrollHandle"/>
          </Bounds>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="VScrollHandleTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::VScrollHandleTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Bounds AlignmentToParent="left:4 top:0 right:4 bottom:0">
            <SolidBackground ref.Style="scrollHandle"/>
          </Bounds>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Doc name="BaselineDocument">
      <Doc>
        <Content/>
        <Styles>
          <Style name="#Default-Override">
            <color>#FFFFFF</color>
          </Style>
          <Style name="#Selection-Override">
            <color>#FFFFFF</color>
            <bkcolor>#007ACC</bkcolor>
          </Style>
        </Styles>
      </Doc>
    </Doc>

    <Script name="ScrollTemplateScript">
      <Workflow>
        <![CDATA[
        module ScrollTemplateScript;
        
        using system::*;
        using presentation::templates::*;
        
        class ScrollTemplateScript
        {
          static func SetScroll(totalPixels : int, newOffset : int, scrollTemplate : GuiScrollTemplate*) : void
          {
            var totalSize = scrollTemplate.TotalSize;
            var ratio = (cast double newOffset) / totalPixels;
            var newPosition = cast int Math::RoundI(ratio * totalSize);

            var offset1 = cast int Math::RoundI(((cast double newPosition) / totalSize) * totalPixels);
            var offset2 = cast int Math::RoundI((cast double (newPosition + 1)) / totalSize * totalPixels);
            var delta1 = offset1 - newOffset;
            var delta2 = offset2 - newOffset;
            
            if (delta1 < 0) { delta1 = -delta1; }
            if (delta2 < 0) { delta2 = -delta2; }
         
            if(delta1 < delta2)
            {
              scrollTemplate.Commands.SetPosition(newPosition);
            }
            else
            {
              scrollTemplate.Commands.SetPosition(newPosition + 1);
            }
          }
        }
      ]]>
      </Workflow>
    </Script>

    <InstanceStyle name="Style">
      <Styles>
        <Style ref.Path="(//Bounds + //Table)" MinSizeLimitation="LimitToElementAndChildren"/>
        <Style ref.Path="(//SideAligned + //PartialView)/*">
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
        </Style>
        <Style ref.Path="//*.buttonBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#252526" :
              state == Button::ControlState::Active ? "#54545C" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#3F3F46"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.buttonBorder">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#434346" :
              state == Button::ControlState::Active ? "#6A6A75" :
              state == Button::ControlState::Pressed ? "#1C97EA" :
              "#54545C"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.buttonText">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#6D6D6D" :
              state == Button::ControlState::Active ? "#F1F1F1" :
              state == Button::ControlState::Pressed ? "#FFFFFF" :
              "#F1F1F1"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.tabHeaderBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              self.Selected ? "#007ACC" :
              state == Button::ControlState::Active ? "#1C97EA" :
              state == Button::ControlState::Pressed ? "#1C97EA" :
              "#434346"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.tabDropdownBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              state == Button::ControlState::Active ? "#1C97EA" :
              state == Button::ControlState::Pressed ? "#1C97EA" :
              "#434346"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.labelText">
          <att.Color-bind>
            <![CDATA[
            cast Color (
              not self.VisuallyEnabled ? "#6D6D6D" :
              "#F1F1F1"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.scrollArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.scrollHandle">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#3D3D42" :
              state == Button::ControlState::Active ? "#9E9E9E" :
              state == Button::ControlState::Pressed ? "#EFEBEF" :
              "#686868"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.itemBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              self.Selected or state == Button::ControlState::Pressed ? "#3399FF" :
              state == Button::ControlState::Active ? "#3F3F46" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#007ACC" :
              state == Button::ControlState::Active ? "#54545C" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripBorder">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.Selected ? "#00000000" :
              "#007ACC"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.toolstripSplitBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed ? "#54545C" :
              state == Button::ControlState::Active ? "#54545C" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripSplitArrowBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.Selected ? "#007ACC" :
              state == Button::ControlState::Active ? "#54545C" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripSplitArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.Selected ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.Selected ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.menuBarItemBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
              state == Button::ControlState::Active ? "#3D3D40" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.menuItemBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed ? "#3D3D40" :
              state == Button::ControlState::Active or self.SubMenuOpening ? "#3D3D40" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.menuItemText">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#6D6D6D" :
              "#FFFFFF"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.menuItemArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active or self.SubMenuOpening ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active or self.SubMenuOpening ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.comboBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#2D2D30" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#3F3F46" :
              state == Button::ControlState::Active ? "#3F3F46" :
              "#333337"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.comboBorder">
          <att.Color>#434346</att.Color>
        </Style>
        <Style ref.Path="//*.comboText">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#65655C" :
              "#F1F1F1"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.comboArrowBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#007ACC" :
              state == Button::ControlState::Active ? "#1F1F20" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.comboArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#999999" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#2D2D30" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#3F3F46" :
              state == Button::ControlState::Active ? "#3F3F46" :
              "#434346"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.columnHeaderBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#3E3E40" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#007ACC" :
              state == Button::ControlState::Active ? "#3E3E40" :
              "#252527"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.expandableArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#6D6D6D" :
              state == Button::ControlState::Pressed ? "#0A75B9" :
              state == Button::ControlState::Active ? "#0A75B9" :
              "#F1F1F1"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.Selected ? "#00000000" :
              not self.VisuallyEnabled ? "#6D6D6D" :
              state == Button::ControlState::Pressed ? "#0A75B9" :
              state == Button::ControlState::Active ? "#0A75B9" :
              "#F1F1F1"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
      </Styles>
    </InstanceStyle>

  </Folder>
</Resource>