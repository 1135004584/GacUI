<Instance ref.CodeBehind="false" ref.Class="demo::ListViewTabPage">
  <ref.Parameter Name="ViewModel" Class="demo::IViewModel"/>
  <ref.Ctor>
    <![CDATA[
      Application::GetApplication().InvokeInMainThread(func():void
      {
        /* This code will be executed after demo::ListViewTabPage is put on the window, so that listView.RelatedControlHost doesn't return null. */
        LoadListView(listView);
      });
    ]]>
  </ref.Ctor>
  <TabPage ref.Name="self" Text="ListView">
    <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" CellPadding="5">
      <att.Rows>
        <_>composeType:MinSize</_>
        <_>composeType:Percentage percentage:1.0</_>
      </att.Rows>
      <att.Columns>
        <_>composeType:Percentage percentage:0.5</_>
      </att.Columns>

      <Cell Site="row:0 column:0">
        <ComboBox ref.Name="comboView" Alt="V" SelectedIndex="5">
          <att.BoundsComposition-set PreferredMinSize="x:120"/>
          <att.ListControl>
            <TextList HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
              <att.Items>
                <TextItem Text="BigIcon"/>
                <TextItem Text="SmallIcon"/>
                <TextItem Text="List"/>
                <TextItem Text="Tile"/>
                <TextItem Text="Information"/>
                <TextItem Text="Detail"/>
              </att.Items>
            </TextList>
          </att.ListControl>
          <ev.SelectedIndexChanged-eval>
            <![CDATA[
              {
                switch (comboView.SelectedIndex)
                {
                case 0:
                  {
                    listView.View = BigIcon;
                  }
                case 1:
                  {
                    listView.View = SmallIcon;
                  }
                case 2:
                  {
                    listView.View = ListViewView::List;
                  }
                case 3:
                  {
                    listView.View = Tile;
                  }
                case 4:
                  {
                    listView.View = Information;
                  }
                case 5:
                  {
                    listView.View = Detail;
                  }
                }
              }
            ]]>
          </ev.SelectedIndexChanged-eval>
        </ComboBox>
      </Cell>

      <Cell Site="row:1 column:0">
        <ListView ref.Name="listView" Alt="L" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>

          <att.Columns>
            <_ Text="Id"/>
            <_ Text="Category"/>
            <_ Text="Size"/>
            <_ Text="File"/>
          </att.Columns>

          <att.DataColumns>
            <_>0</_>
            <_>1</_>
            <_>2</_>
          </att.DataColumns>
        </ListView>
      </Cell>
    </Table>
  </TabPage>
</Instance>