<Folder>
  <Folder name="GenderComponents">
    <Instance name="GenderDisplayerResource">
      <Instance ref.CodeBehind="false" ref.Class="demo::GenderDisplayer">
        <ref.Members>
          <![CDATA[
            prop Gender : MyGender = Male {}
          ]]>
        </ref.Members>
        <CustomControl ref.Name="self">
          <Bounds AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElement">
            <ImageFrame HorizontalAlignment="Center" VerticalAlignment="Center">
              <att.Image-bind>(cast (GuiImageData^) self.ResolveResource("res", $"MiscImages/$(ToString(self.Gender))", true)).Image</att.Image-bind>
            </ImageFrame>
          </Bounds>
        </CustomControl>
      </Instance>
    </Instance>

    <Instance name="GenderVisualizerResource">
      <Instance ref.CodeBehind="false" ref.Class="demo::GenderVisualizer" xmlns:demo="demo::*">
        <GridVisualizerTemplate ref.Name="self">
          <demo:GenderDisplayer Gender-bind="(cast MyGender self.CellValue) ?? MyGender::Male">
            <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
          </demo:GenderDisplayer>
        </GridVisualizerTemplate>
      </Instance>
    </Instance>

    <Instance name="GenderItemTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="demo::GenderItemTemplate" xmlns:demo="demo::*">
        <ref.Parameter Name="SelectedGender" Class="demo::MyGender"/>
        <TextListItemTemplate>
          <demo:GenderDisplayer Gender-eval="SelectedGender">
            <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
          </demo:GenderDisplayer>
        </TextListItemTemplate>
      </Instance>
    </Instance>

    <Instance name="GenderComboItemTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="demo::GenderComboItemTemplate" xmlns:demo="demo::*">
        <ref.Parameter Name="SelectedGender" Class="demo::MyGender"/>
        <ControlTemplate>
          <demo:GenderDisplayer Gender-eval="SelectedGender">
            <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
          </demo:GenderDisplayer>
        </ControlTemplate>
      </Instance>
    </Instance>

    <Instance name="GenderEditorResource">
      <Instance ref.CodeBehind="false" ref.Class="demo::GenderEditor" xmlns:demo="demo::*">
        <ref.Members>
          <![CDATA[
          var items : MyGender[] = {};
        ]]>
        </ref.Members>
        <ref.Ctor>
          <![CDATA[
          {
            items.Add(MyGender::Male);
            items.Add(MyGender::Female);
          }
        ]]>
        </ref.Ctor>
        <GridEditorTemplate ref.Name="self" CellValue-bind="comboBox.SelectedItem">
          <ComboBox ref.Name="comboBox" ItemTemplate="demo:GenderComboItemTemplate" SelectedIndex-bind="self.items.IndexOf(self.CellValue)">
            <att.ListControl>
              <BindableTextList ItemSource-eval="self.items" ItemTemplate="demo:GenderItemTemplate"/>
            </att.ListControl>
          </ComboBox>
        </GridEditorTemplate>
      </Instance>
    </Instance>
  </Folder>
  
  <Folder name="CategoryComponents">
    <Instance name="CategoryDisplayerResource">
      <Instance ref.CodeBehind="false" ref.Class="demo::CategoryDisplayer">
        <ref.Members>
          <![CDATA[
            prop Category : MyCategory = Black {}
          ]]>
        </ref.Members>
        <CustomControl ref.Name="self">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
            <att.Rows>
              <_>composeType:Percentage percentage:0.5</_>
              <_>composeType:Absolute absolute:16</_>
              <_>composeType:Percentage percentage:0.5</_>
            </att.Rows>
            <att.Columns>
              <_>composeType:Absolute absolute:2</_>
              <_>composeType:Absolute absolute:16</_>
              <_>composeType:Absolute absolute:2</_>
              <_>composeType:Percentage percentage:1.0</_>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <SolidBorder Color="#000000"/>
              <Bounds AlignmentToParent="left:1 top:1 right:1 bottom:1">
                <SolidBackground Color-bind="ToColor(self.Category)"/>
              </Bounds>
            </Cell>

            <Cell Site="row:0 column:3 rowSpan:3">
              <SolidLabel Text-bind="ToString(self.Category)" Font-bind="self.Font" HorizontalAlignment="Left" VerticalAlignment="Center" Ellipse="true"/>
            </Cell>
          </Table>
        </CustomControl>
      </Instance>
    </Instance>

    <Instance name="CategoryVisualizerResource">
      <Instance ref.CodeBehind="false" ref.Class="demo::CategoryVisualizer" xmlns:demo="demo::*">
        <GridVisualizerTemplate ref.Name="self">
          <demo:CategoryDisplayer Category-bind="(cast MyCategory self.CellValue) ?? MyCategory::Black">
            <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
          </demo:CategoryDisplayer>
        </GridVisualizerTemplate>
      </Instance>
    </Instance>
  </Folder>

  <Instance name="TextEditorResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::TextEditor">
      <GridEditorTemplate ref.Name="self" CellValue-bind="textBox.Text" FocusControl-ref="textBox">
        <SinglelineTextBox ref.Name="textBox" Text-bind="(cast string self.CellValue) ?? ''">
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
        </SinglelineTextBox>
      </GridEditorTemplate>
    </Instance>
  </Instance>
</Folder>