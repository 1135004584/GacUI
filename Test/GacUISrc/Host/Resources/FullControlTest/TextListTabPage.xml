<Instance ref.CodeBehind="false" ref.Class="demo::TextListTabPage">
  <ref.Members>
    <![CDATA[
      var counter : int = 0;
    ]]>
  </ref.Members>
  <ref.Parameter Name="ViewModel" Class="demo::IViewModel"/>
  <TabPage ref.Name="self" Text="TextList">
    <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" CellPadding="5">
      <att.Rows>
        <_>composeType:MinSize</_>
        <_>composeType:Percentage percentage:1.0</_>
      </att.Rows>
      <att.Columns>
        <_>composeType:Percentage percentage:0.5</_>
        <_>composeType:MinSize</_>
        <_>composeType:Percentage percentage:0.5</_>
      </att.Columns>

      <Cell Site="row:0 column:0 columnSpan:3">
        <Stack Direction="Horizontal" Padding="5" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
          <StackItem>
            <Button Text="Text">
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    textList.View = Text;
                    bindableTextList.View = Text;
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </StackItem>
          <StackItem>
            <Button Text="Check">
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    textList.View = Check;
                    bindableTextList.View = Check;
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </StackItem>
          <StackItem>
            <Button Text="Radio">
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    textList.View = Radio;
                    bindableTextList.View = Radio;
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </StackItem>
        </Stack>
      </Cell>

      <Cell Site="row:1 column:0">
        <TextList ref.Name="textList" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
        </TextList>
      </Cell>

      <Cell Site="row:1 column:1">
        <Stack Direction="Vertical" Padding="5" AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
          <StackItem>
            <Button Text="Add 10 items">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    for (i in range [0, 9])
                    {
                      var textItem = new TextItem^(cast string (self.counter + i));
                      textList.Items.Add(textItem);
                    }
                    
                    if (ViewModel.TextItems is not null)
                    {
                      for (i in range [0, 9])
                      {
                        var textItem = new demo::MyTextItem^();
                        textItem.Name = cast string (self.counter + i);
                        ViewModel.AddTextItem(textItem);
                      }
                    }
                    
                    self.counter = self.counter + 10;
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </StackItem>
          <StackItem>
            <Button Text="Remove odd items">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    {
                      var i = 0;
                      while (i < textList.Items.Count)
                      {
                        textList.Items.RemoveAt(i);
                        i = i + 1;
                      }
                    }
                    
                    if (ViewModel.TextItems is not null)
                    {
                      var i = 0;
                      while (i < ViewModel.TextItems.Count)
                      {
                        ViewModel.RemoveTextItem(i);
                        i = i + 1;
                      }
                    }
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </StackItem>
          <StackItem>
            <Button Text="Remove even items">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    {
                      var i = 1;
                      while (i < textList.Items.Count)
                      {
                        textList.Items.RemoveAt(i);
                        i = i + 1;
                      }
                    }
                    
                    if (ViewModel.TextItems is not null)
                    {
                      var i = 1;
                      while (i < ViewModel.TextItems.Count)
                      {
                        ViewModel.RemoveTextItem(i);
                        i = i + 1;
                      }
                    }
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </StackItem>
          <StackItem>
            <Button Text="Clear">
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <ev.Clicked-eval>
                <![CDATA[
                  {
                    textList.Items.Clear();
                    
                    if (ViewModel.TextItems is not null)
                    {
                      ViewModel.ClearTextItems();
                    }
                  }
                ]]>
              </ev.Clicked-eval>
            </Button>
          </StackItem>
        </Stack>
      </Cell>

      <Cell Site="row:1 column:2">
        <BindableTextList ref.Name="bindableTextList" env.ItemType="demo::MyTextItem^" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
          <att.ItemSource-eval>ViewModel.TextItems</att.ItemSource-eval>
          <att.TextProperty>Name</att.TextProperty>
          <att.CheckedProperty>Checked</att.CheckedProperty>
        </BindableTextList>
      </Cell>
    </Table>
  </TabPage>
</Instance>