<Resource>
  <Script>
    <Workflow>
      <![CDATA[
        module viewmodel;
        
        using presentation::*;
        
        namespace demo
        {
          class ColorItem
          {
            var checked : bool = false;
            var name : string = "";
            var color : Color = (cast Color "#000000");
            
            new(_name : string, _color : string)
            {
              name = _name;
              color = cast Color _color;
            }
            
            static func GetFewItems() : ColorItem^{}
            {
              return {
                new ColorItem^("Black",   "#000000")
                new ColorItem^("Red",     "#FF0000")
                new ColorItem^("Lime",    "#00FF00")
                new ColorItem^("Blue",    "#0000FF")
                new ColorItem^("White",   "#FFFFFF")
              };
            }
            
            static func GetManyItems() : ColorItem^{}
            {
              return {
                new ColorItem^("Black",   "#000000")
                new ColorItem^("Maroon",  "#800000")
                new ColorItem^("Green",   "#008000")
                new ColorItem^("Olive",   "#808000")
                new ColorItem^("Navy",    "#000080")
                new ColorItem^("Purble",  "#800080")
                new ColorItem^("Teal",    "#008080")
                new ColorItem^("Silver",  "#C0C0C0")
                new ColorItem^("Gray",    "#808080")
                new ColorItem^("Red",     "#FF0000")
                new ColorItem^("Lime",    "#00FF00")
                new ColorItem^("Yellow",  "#FFFF00")
                new ColorItem^("Blue",    "#0000FF")
                new ColorItem^("Fuchsia", "#FF00FF")
                new ColorItem^("Aqua",    "#00FFFF")
                new ColorItem^("White",   "#FFFFFF")
              };
            }
          }
        }
      ]]>
    </Workflow>
  </Script>
  
  <Instance name="MainWindowResource">
    <Instance ref.Class="demo::MainWindow">
      <Window Text-format="C1=$(comboFew.Text), C2=$(comboMany.Text), L1=$(listFew.SelectedItemText), L2=$(listMany.SelectedItemText)" ClientSize="x:480 y:320">
        <att.BoundsComposition-set PreferredMinSize="x:480 y:320"/>
        <att.ControlTemplate>darkskin::WindowTemplate</att.ControlTemplate>
        <Table CellPadding="5" BorderVisible="false" AlignmentToParent="left:0 top:5 right:0 bottom:0" env.ItemType="demo::ColorItem^">
          <att.Rows>
            <CellOption>composeType:MinSize</CellOption>
            <CellOption>composeType:Percentage percentage:1.0</CellOption>
          </att.Rows>
          <att.Columns>
            <CellOption>composeType:Percentage percentage:1.0</CellOption>
            <CellOption>composeType:Percentage percentage:1.0</CellOption>
          </att.Columns>

          <Cell Site="row:0 column:0">
            <ComboBox ref.Name="comboFew" SelectedIndex-eval="0">
              <att.ControlTemplate>darkskin::ComboBoxTemplate</att.ControlTemplate>
              <att.ItemTemplate>demo::ColorBomboItemTemplate</att.ItemTemplate>
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.ListControl>
                <BindableTextList HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
                  <att.TextProperty>name</att.TextProperty>
                  <att.CheckedProperty>checked</att.CheckedProperty>
                  <att.ItemSource-eval>demo::ColorItem::GetFewItems()</att.ItemSource-eval>
                  <att.ControlTemplate>darkskin::TextListTemplate</att.ControlTemplate>
                  <att.ItemTemplate>demo::ColorListItemTemplate</att.ItemTemplate>
                </BindableTextList>
              </att.ListControl>
            </ComboBox>
          </Cell>
          <Cell Site="row:0 column:1">
            <ComboBox ref.Name="comboMany" SelectedIndex-eval="0">
              <att.ControlTemplate>darkskin::ComboBoxTemplate</att.ControlTemplate>
              <att.ItemTemplate>demo::ColorBomboItemTemplate</att.ItemTemplate>
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              <att.ListControl>
                <BindableTextList HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
                  <att.TextProperty>name</att.TextProperty>
                  <att.ItemSource-eval>demo::ColorItem::GetManyItems()</att.ItemSource-eval>
                  <att.ControlTemplate>darkskin::TextListTemplate</att.ControlTemplate>
                  <att.ItemTemplate>demo::ColorListItemTemplate</att.ItemTemplate>
                </BindableTextList>
              </att.ListControl>
            </ComboBox>
          </Cell>

          <Cell Site="row:1 column:0">
            <BindableTextList ref.Name="listFew" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false">
              <att.TextProperty>item.name</att.TextProperty>
              <att.ItemSource-eval>demo::ColorItem::GetFewItems()</att.ItemSource-eval>
              <att.ControlTemplate>darkskin::TextListTemplate</att.ControlTemplate>
              <att.ItemTemplate>demo::ColorListItemTemplate</att.ItemTemplate>
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
            </BindableTextList>
          </Cell>
          <Cell Site="row:1 column:1">
            <BindableTextList ref.Name="listMany" HorizontalAlwaysVisible="false" VerticalAlwaysVisible="false" env.ItemName="THE_ITEM_VALUE">
              <att.TextProperty>THE_ITEM_VALUE.name</att.TextProperty>
              <att.ItemSource-eval>demo::ColorItem::GetManyItems()</att.ItemSource-eval>
              <att.ControlTemplate>darkskin::TextListTemplate</att.ControlTemplate>
              <att.ItemTemplate>demo::ColorListItemTemplate</att.ItemTemplate>
              <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
            </BindableTextList>
          </Cell>
        </Table>
      </Window>
    </Instance>
  </Instance>

  <Instance name="ColorBomboItemTemplateResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::ColorBomboItemTemplate">
      <ref.Parameter Name="Source" Class="demo::ColorItem"/>
      <ref.Members>
        <![CDATA[
          prop TextColor : Color = (cast Color "#FFFFFF") {}
        ]]>
      </ref.Members>
      <ControlTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
        <Table AlignmentToParent="left:0 top:0 right:0 bottom:0" MinSizeLimitation="LimitToElementAndChildren">
          <att.Rows>
            <CellOption>composeType:Percentage percentage:1.0</CellOption>
            <CellOption>composeType:Absolute absolute:16</CellOption>
            <CellOption>composeType:Percentage percentage:1.0</CellOption>
          </att.Rows>
          <att.Columns>
            <CellOption>composeType:Absolute absolute:16</CellOption>
            <CellOption>composeType:Absolute absolute:3</CellOption>
            <CellOption>composeType:Percentage percentage:1.0</CellOption>
          </att.Columns>

          <Cell Site="row:1 column:0">
            <SolidBackground Color-eval="Source.color"/>
          </Cell>

          <Cell Site="row:0 column:2 rowSpan:3">
            <SolidLabel Text-eval="Source.name" Font-bind="self.Font" Color-bind="self.TextColor" Ellipse="true" VerticalAlignment="Center"/>
          </Cell>
        </Table>
      </ControlTemplate>
    </Instance>
  </Instance>

  <Instance name="ColorListItemTemplateResource">
    <Instance ref.CodeBehind="false" ref.Class="demo::ColorListItemTemplate" xmlns:x="demo::*">
      <ref.Parameter Name="Source" Class="demo::ColorItem"/>
      <TextListItemTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
        <x:ColorBomboItemTemplate Source-eval="Source" Font-bind="self.Font" TextColor-bind="self.TextColor" AlignmentToParent="left:6 top:6 right:6 bottom:6"/>
      </TextListItemTemplate>
    </Instance>
  </Instance>

  <Folder name="DarkSkin">

    <InstanceStyle name="Style">
      <Styles>
        <Style ref.Path="(//Bounds + //Table)" MinSizeLimitation="LimitToElementAndChildren"/>
        <Style ref.Path="(//SideAligned + //PartialView)/*">
          <att.BoundsComposition-set AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
        </Style>
        <Style ref.Path="//*.buttonBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#252526" :
              state == Button::ControlState::Active ? "#54545C" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#3F3F46"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.buttonBorder">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#434346" :
              state == Button::ControlState::Active ? "#6A6A75" :
              state == Button::ControlState::Pressed ? "#1C97EA" :
              "#54545C"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.buttonText">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#6D6D6D" :
              state == Button::ControlState::Active ? "#F1F1F1" :
              state == Button::ControlState::Pressed ? "#FFFFFF" :
              "#F1F1F1"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.tabHeaderBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              self.Selected ? "#007ACC" :
              state == Button::ControlState::Active ? "#1C97EA" :
              state == Button::ControlState::Pressed ? "#1C97EA" :
              "#434346"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.tabDropdownBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              state == Button::ControlState::Active ? "#1C97EA" :
              state == Button::ControlState::Pressed ? "#1C97EA" :
              "#434346"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.labelText">
          <att.Color-bind>
            <![CDATA[
            cast Color (
              not self.VisuallyEnabled ? "#6D6D6D" :
              "#F1F1F1"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.scrollArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.scrollHandle">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#3D3D42" :
              state == Button::ControlState::Active ? "#9E9E9E" :
              state == Button::ControlState::Pressed ? "#EFEBEF" :
              "#686868"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.itemBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              self.Selected or state == Button::ControlState::Pressed ? "#3399FF" :
              state == Button::ControlState::Active ? "#3F3F46" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#007ACC" :
              state == Button::ControlState::Active ? "#54545C" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripBorder">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.Selected ? "#00000000" :
              "#007ACC"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.toolstripSplitBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed ? "#54545C" :
              state == Button::ControlState::Active ? "#54545C" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripSplitArrowBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.Selected ? "#007ACC" :
              state == Button::ControlState::Active ? "#54545C" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.toolstripSplitArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.Selected ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Pressed or self.Selected ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#1997EA" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.menuBarItemBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#1B1B1C" :
              state == Button::ControlState::Active ? "#3D3D40" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.menuItemBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed ? "#3D3D40" :
              state == Button::ControlState::Active or self.SubMenuOpening ? "#3D3D40" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.menuItemText">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#6D6D6D" :
              "#FFFFFF"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.menuItemArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active or self.SubMenuOpening ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#555558" :
              state == Button::ControlState::Active or self.SubMenuOpening ? "#1997EA" :
              state == Button::ControlState::Pressed ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.comboBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#2D2D30" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#3F3F46" :
              state == Button::ControlState::Active ? "#3F3F46" :
              "#333337"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.comboBorder">
          <att.Color>#434346</att.Color>
        </Style>
        <Style ref.Path="//*.comboText">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#65655C" :
              "#F1F1F1"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.comboArrowBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#00000000" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#007ACC" :
              state == Button::ControlState::Active ? "#1F1F20" :
              "#00000000"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.comboArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#999999" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#FFFFFF" :
              state == Button::ControlState::Active ? "#007ACC" :
              "#999999"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#2D2D30" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#3F3F46" :
              state == Button::ControlState::Active ? "#3F3F46" :
              "#434346"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
        <Style ref.Path="//*.columnHeaderBackground">
          <att.Color-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#3E3E40" :
              state == Button::ControlState::Pressed or self.SubMenuOpening ? "#007ACC" :
              state == Button::ControlState::Active ? "#3E3E40" :
              "#252527"
            )
          ]]>
          </att.Color-bind>
        </Style>
        <Style ref.Path="//*.expandableArrow">
          <att.BorderColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.VisuallyEnabled ? "#6D6D6D" :
              state == Button::ControlState::Pressed ? "#0A75B9" :
              state == Button::ControlState::Active ? "#0A75B9" :
              "#F1F1F1"
            )
          ]]>
          </att.BorderColor-bind>
          <att.BackgroundColor-bind>
            <![CDATA[
            cast Color let state = self.State in (
              not self.Selected ? "#00000000" :
              not self.VisuallyEnabled ? "#6D6D6D" :
              state == Button::ControlState::Pressed ? "#0A75B9" :
              state == Button::ControlState::Active ? "#0A75B9" :
              "#F1F1F1"
            )
          ]]>
          </att.BackgroundColor-bind>
        </Style>
      </Styles>
    </InstanceStyle>

    <Script name="ScrollTemplateScript">
      <Workflow>
        <![CDATA[
        module ScrollTemplateScript;
        
        using system::*;
        using presentation::templates::*;
        
        class ScrollTemplateScript
        {
          static func SetScroll(totalPixels : int, newOffset : int, scrollTemplate : GuiScrollTemplate*) : void
          {
            var totalSize = scrollTemplate.TotalSize;
            var ratio = (cast double newOffset) / totalPixels;
            var newPosition = cast int Math::RoundI(ratio * totalSize);

			      var offset1 = cast int Math::RoundI(((cast double newPosition) / totalSize) * totalPixels);
			      var offset2 = cast int Math::RoundI((cast double (newPosition + 1)) / totalSize * totalPixels);
			      var delta1 = offset1 - newOffset;
			      var delta2 = offset2 - newOffset;
            
            if (delta1 < 0) { delta1 = -delta1; }
            if (delta2 < 0) { delta2 = -delta2; }

			      if(delta1 < delta2)
			      {
				      scrollTemplate.Commands.SetPosition(newPosition);
			      }
			      else
			      {
				      scrollTemplate.Commands.SetPosition(newPosition + 1);
			      }
          }
        }
      ]]>
      </Workflow>
    </Script>

    <Instance name="HScrollTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::HScrollTemplate" ref.Styles="res://DarkSkin/Style">
        <ref.Members>
          <![CDATA[
          @cpp:Protected
          var draggingHandle : bool = false;
          
          @cpp:Protected
          var draggingStartLocation : Point = {x:0 y:0};
        ]]>
        </ref.Members>
        <ScrollTemplate ref.Name="self" ContainerComposition-ref="self" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground Color="#3D3D42"/>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Left">
            <Button ControlTemplate="darkskin::LeftScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallDecrease();"/>
          </SideAligned>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Right">
            <Button ControlTemplate="darkskin::RightScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallIncrease();"/>
          </SideAligned>
          <Bounds ref.Name="handleContainer" AlignmentToParent="left:20 top:0 right:20 bottom:0">
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigDecrease();}">
              <att.AlignmentToParent-bind>{left:0 top:0 right:(handleContainer.Bounds.x2 - handleContainer.Bounds.x1 - handle.Bounds.x1) bottom:0}</att.AlignmentToParent-bind>
            </Bounds>
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigIncrease();}">
              <att.AlignmentToParent-bind>{left:(handle.Bounds.x2) top:0 right:0 bottom:0}</att.AlignmentToParent-bind>
            </Bounds>
            <PartialView ref.Name="handle">
              <att.WidthPageSize-bind>(cast double self.PageSize) / self.TotalSize</att.WidthPageSize-bind>
              <att.WidthRatio-bind>(cast double self.Position) / self.TotalSize</att.WidthRatio-bind>
              <ev.leftButtonDown-eval>
                <![CDATA[
                if (self.VisuallyEnabled)
                {
                  self.draggingHandle = true;
                  self.draggingStartLocation = {x:arguments.x y:arguments.y};
                }
              ]]>
              </ev.leftButtonDown-eval>
              <ev.leftButtonUp-eval>
                <![CDATA[
                self.draggingHandle = false;
              ]]>
              </ev.leftButtonUp-eval>
              <ev.mouseMove-eval>
                <![CDATA[
                if (self.draggingHandle)
                {
                  var bounds = handle.Parent.Bounds;
                  var totalPixels = bounds.x2 - bounds.x1;
                  var currentOffset = handle.Bounds.x1;
                  var newOffset = currentOffset + (arguments.x - self.draggingStartLocation.x);
                  ScrollTemplateScript::SetScroll(totalPixels, newOffset, self);
                }
              ]]>
              </ev.mouseMove-eval>
              <Button ControlTemplate="darkskin::HScrollHandleTemplate"/>
            </PartialView>
          </Bounds>
        </ScrollTemplate>
      </Instance>
    </Instance>

    <Instance name="VScrollTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::VScrollTemplate" ref.Styles="res://DarkSkin/Style">
        <ref.Members>
          <![CDATA[
          @cpp:Protected
          var draggingHandle : bool = false;
          
          @cpp:Protected
          var draggingStartLocation : Point = {x:0 y:0};
        ]]>
        </ref.Members>
        <ScrollTemplate ref.Name="self" ContainerComposition-ref="self" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground Color="#3D3D42"/>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Top">
            <Button ControlTemplate="darkskin::TopScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallDecrease();"/>
          </SideAligned>
          <SideAligned MaxLength="20" MaxRatio="0.5" Direction="Bottom">
            <Button ControlTemplate="darkskin::BottomScrollButtonTemplate" ev.Clicked-eval="self.Commands.SmallIncrease();"/>
          </SideAligned>
          <Bounds ref.Name="handleContainer" AlignmentToParent="left:0 top:20 right:0 bottom:20">
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigDecrease();}">
              <att.AlignmentToParent-bind>{left:0 top:0 right:0 bottom:(handleContainer.Bounds.y2 - handleContainer.Bounds.y1 - handle.Bounds.y1)}</att.AlignmentToParent-bind>
            </Bounds>
            <Bounds ev.leftButtonDown-eval="if (handleContainer.RelatedControl.VisuallyEnabled) {self.Commands.BigIncrease();}">
              <att.AlignmentToParent-bind>{left:0 top:(handle.Bounds.y2) right:0 bottom:0}</att.AlignmentToParent-bind>
            </Bounds>
            <PartialView ref.Name="handle">
              <att.HeightPageSize-bind>(cast double self.PageSize) / self.TotalSize</att.HeightPageSize-bind>
              <att.HeightRatio-bind>(cast double self.Position) / self.TotalSize</att.HeightRatio-bind>
              <ev.leftButtonDown-eval>
                <![CDATA[
                if (self.VisuallyEnabled)
                {
                  self.draggingHandle = true;
                  self.draggingStartLocation = {x:arguments.x y:arguments.y};
                }
              ]]>
              </ev.leftButtonDown-eval>
              <ev.leftButtonUp-eval>
                <![CDATA[
                self.draggingHandle = false;
              ]]>
              </ev.leftButtonUp-eval>
              <ev.mouseMove-eval>
                <![CDATA[
                if (self.draggingHandle)
                {
                  var bounds = handle.Parent.Bounds;
                  var totalPixels = bounds.y2 - bounds.y1;
                  var currentOffset = handle.Bounds.y1;
                  var newOffset = currentOffset + (arguments.y - self.draggingStartLocation.y);
                  ScrollTemplateScript::SetScroll(totalPixels, newOffset, self);
                }
              ]]>
              </ev.mouseMove-eval>
              <Button ControlTemplate="darkskin::VScrollHandleTemplate"/>
            </PartialView>
          </Bounds>
        </ScrollTemplate>
      </Instance>
    </Instance>

    <Instance name="LeftScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::LeftScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:5 y:9">
                <att.Points>
                  <Point>x:4 y:0</Point>
                  <Point>x:0 y:4</Point>
                  <Point>x:4 y:8</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="RightScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::RightScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:5 y:9">
                <att.Points>
                  <Point>x:0 y:0</Point>
                  <Point>x:4 y:4</Point>
                  <Point>x:0 y:8</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="TopScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::TopScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:9 y:5">
                <att.Points>
                  <Point>x:0 y:4</Point>
                  <Point>x:4 y:0</Point>
                  <Point>x:8 y:4</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="BottomScrollButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::BottomScrollButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <att.Rows>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:5</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Rows>
            <att.Columns>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
              <CellOption>composeType:Absolute absolute:9</CellOption>
              <CellOption>composeType:Percentage percentage:0.5</CellOption>
            </att.Columns>

            <Cell Site="row:1 column:1">
              <Polygon ref.Style="scrollArrow" Size="x:9 y:5">
                <att.Points>
                  <Point>x:0 y:0</Point>
                  <Point>x:4 y:4</Point>
                  <Point>x:8 y:0</Point>
                </att.Points>
              </Polygon>
            </Cell>
          </Table>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="HScrollHandleTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::HScrollHandleTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Bounds AlignmentToParent="left:0 top:4 right:0 bottom:4">
            <SolidBackground ref.Style="scrollHandle"/>
          </Bounds>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="VScrollHandleTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::VScrollHandleTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <Bounds AlignmentToParent="left:4 top:0 right:4 bottom:0">
            <SolidBackground ref.Style="scrollHandle"/>
          </Bounds>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="TextListTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::TextListTemplate" ref.Styles="res://DarkSkin/Style">
        <TextListTemplate ref.Name="self" ContainerComposition-ref="container" MinSizeLimitation="LimitToElementAndChildren">
          <att.HScrollTemplate>darkskin::HScrollTemplate</att.HScrollTemplate>
          <att.VScrollTemplate>darkskin::VScrollTemplate</att.VScrollTemplate>
          <att.DefaultScrollSize>20</att.DefaultScrollSize>
          <att.BackgroundTemplate>darkskin::ItemBackgroundTemplate</att.BackgroundTemplate>
          <att.TextColor>#F1F1F1</att.TextColor>

          <SolidBackground Color="#252526"/>
          <Bounds ref.Name="container" AlignmentToParent="left:0 top:0 right:0 bottom:0" InternalMargin="left:1 top:1 right:1 bottom:1">
            <SolidBorder Color="#3F3F46"/>
          </Bounds>
        </TextListTemplate>
      </Instance>
    </Instance>

    <Instance name="ComboBoxTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::ComboBoxTemplate" ref.Styles="res://DarkSkin/Style">
        <ComboBoxTemplate ref.Name="self" ContainerComposition-ref="container" MinSizeLimitation="LimitToElementAndChildren">
          <att.SubMenuTemplate>darkskin::ToolstripMenuTemplate</att.SubMenuTemplate>
          <SolidBackground ref.Style="comboBackground"/>
          <Bounds AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <SolidBorder ref.Style="comboBorder"/>
            <Bounds ref.Name="container" AlignmentToParent="left:1 top:1 right:11 bottom:1">
              <Bounds AlignmentToParent="left:2 top:2 right:2 bottom:2" Visible-bind="self.TextVisible">
                <SolidLabel ref.Style="comboText" Text-bind="self.Text" Font-bind="self.Font" Ellipse="true" HorizontalAlignment="Left" VerticalAlignment="Center"/>
              </Bounds>
            </Bounds>

            <Table AlignmentToParent="left:-1 top:1 right:1 bottom:1" PreferredMinSize="x:9 y:0">
              <SolidBackground ref.Style="comboArrowBackground"/>
              <att.Rows>
                <CellOption>composeType:Percentage percentage:0.5</CellOption>
                <CellOption>composeType:Absolute absolute:3</CellOption>
                <CellOption>composeType:Percentage percentage:0.5</CellOption>
              </att.Rows>
              <att.Columns>
                <CellOption>composeType:Percentage percentage:0.5</CellOption>
                <CellOption>composeType:Absolute absolute:5</CellOption>
                <CellOption>composeType:Percentage percentage:0.5</CellOption>
              </att.Columns>

              <Cell Site="row:1 column:1">
                <Polygon ref.Style="comboArrow" Size="x:5 y:3">
                  <att.Points>
                    <Point>x:0 y:0</Point>
                    <Point>x:2 y:2</Point>
                    <Point>x:4 y:0</Point>
                  </att.Points>
                </Polygon>
              </Cell>
            </Table>
          </Bounds>
        </ComboBoxTemplate>
      </Instance>
    </Instance>

    <Instance name="ItemBackgroundTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::ItemBackgroundTemplate" ref.Styles="res://DarkSkin/Style">
        <SelectableButtonTemplate ref.Name="self" ContainerComposition-ref="container" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground ref.Style="itemBackground"/>
          <Bounds ref.Name="container" AlignmentToParent="left:0 top:3 right:0 bottom:3"/>
        </SelectableButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="ToolstripMenuTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::ToolstripMenuTemplate" ref.Styles="res://DarkSkin/Style">
        <MenuTemplate ContainerComposition-ref="container" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground Color="#1B1B1C"/>
          <Bounds ref.Name="container" AlignmentToParent="left:0 top:0 right:0 bottom:0" InternalMargin="left:3 top:3 right:3 bottom:3">
            <SolidBorder Color="#333337"/>
          </Bounds>
        </MenuTemplate>
      </Instance>
    </Instance>

    <Instance name="WindowTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::WindowTemplate" ref.Styles="res://DarkSkin/Style">
        <WindowTemplate ref.Name="self" ContainerComposition-ref="container" MinSizeLimitation="LimitToElementAndChildren">
          <att.MaximizedBoxOption>AlwaysTrue</att.MaximizedBoxOption>
          <att.MinimizedBoxOption>AlwaysTrue</att.MinimizedBoxOption>
          <att.BorderOption>AlwaysTrue</att.BorderOption>
          <att.SizeBoxOption>AlwaysTrue</att.SizeBoxOption>
          <att.IconVisibleOption>AlwaysTrue</att.IconVisibleOption>
          <att.TitleBarOption>AlwaysTrue</att.TitleBarOption>
          <att.CustomizedBorder>true</att.CustomizedBorder>
          <att.TooltipTemplate>darkskin::TooltipTemplate</att.TooltipTemplate>

          <SolidBackground Color="#2D2D30"/>
          <Bounds AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <SolidBorder Color="#017ACC"/>
            <Table AlignmentToParent="left:0 top:0 right:0 bottom:0">
              <att.Rows>
                <CellOption>composeType:Absolute absolute:8</CellOption>
                <CellOption>composeType:MinSize</CellOption>
                <CellOption>composeType:Percentage percentage:1.0</CellOption>
                <CellOption>composeType:Absolute absolute:8</CellOption>
              </att.Rows>
              <att.Columns>
                <CellOption>composeType:Absolute absolute:8</CellOption>
                <CellOption>composeType:Percentage percentage:1.0</CellOption>
                <CellOption>composeType:MinSize</CellOption>
                <CellOption>composeType:MinSize</CellOption>
                <CellOption>composeType:MinSize</CellOption>
                <CellOption>composeType:Absolute absolute:8</CellOption>
              </att.Columns>

              <Cell Site="row:0 column:0" AssociatedHitTestResult="BorderLeftTop"/>
              <Cell Site="row:0 column:5" AssociatedHitTestResult="BorderRightTop"/>
              <Cell Site="row:3 column:0" AssociatedHitTestResult="BorderLeftBottom"/>
              <Cell Site="row:3 column:5" AssociatedHitTestResult="BorderRightBottom"/>

              <Cell Site="row:1 column:0 rowSpan:2 columnSpan:1" AssociatedHitTestResult="BorderLeft"/>
              <Cell Site="row:1 column:5 rowSpan:2 columnSpan:1" AssociatedHitTestResult="BorderRight"/>
              <Cell Site="row:0 column:1 rowSpan:1 columnSpan:4" AssociatedHitTestResult="BorderTop"/>
              <Cell Site="row:3 column:1 rowSpan:1 columnSpan:4" AssociatedHitTestResult="BorderBottom"/>

              <Cell Site="row:1 column:2" AssociatedHitTestResult="ButtonMinimum">
                <Button Text=" 0 " Font="fontFamily:'Webdings' size:16" ControlTemplate="darkskin::ButtonTemplate">
                  <att.BoundsComposition-set AlignmentToParent="left:1 top:1 right:1 bottom:1"/>
                </Button>
              </Cell>
              <Cell Site="row:1 column:3" AssociatedHitTestResult="ButtonMaximum">
                <Button Text-bind="self.Maximized ? ' 1 ' : ' 2 '" Font="fontFamily:'Webdings' size:16" ControlTemplate="darkskin::ButtonTemplate">
                  <att.BoundsComposition-set AlignmentToParent="left:1 top:1 right:1 bottom:1"/>
                </Button>
              </Cell>
              <Cell Site="row:1 column:4" AssociatedHitTestResult="ButtonClose">
                <Button Text=" r " Font="fontFamily:'Webdings' size:16" ControlTemplate="darkskin::ButtonTemplate">
                  <att.BoundsComposition-set AlignmentToParent="left:1 top:1 right:1 bottom:1"/>
                </Button>
              </Cell>

              <Cell Site="row:1 column:1" AssociatedHitTestResult="Title">
                <Bounds AlignmentToParent="left:5 top:5 right:5 bottom:5">
                  <SolidLabel Color="#999999" Text-bind="self.Text" Font="fontFamily:'Segoe WP SemiLight' size:14 antialias:true"/>
                </Bounds>
              </Cell>
              <Cell Site="row:2 column:1 rowSpan:1 columnSpan:4" AssociatedHitTestResult="Client">
                <Bounds ref.Name="container" AlignmentToParent="left:0 top:0 right:0 bottom:0"/>
              </Cell>
            </Table>
          </Bounds>
        </WindowTemplate>
      </Instance>
    </Instance>

    <Instance name="ButtonTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::ButtonTemplate" ref.Styles="res://DarkSkin/Style">
        <ButtonTemplate ref.Name="self" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground ref.Style="buttonBackground"/>
          <Bounds AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <SolidBorder ref.Style="buttonBorder"/>
          </Bounds>
          <Bounds AlignmentToParent="left:3 top:1 right:3 bottom:1">
            <SolidLabel ref.Style="buttonText" Text-bind="self.Text" Font-bind="self.Font" HorizontalAlignment="Center" VerticalAlignment="Center"/>
          </Bounds>
        </ButtonTemplate>
      </Instance>
    </Instance>

    <Instance name="TooltipTemplateResource">
      <Instance ref.CodeBehind="false" ref.Class="darkskin::TooltipTemplate" ref.Styles="res://DarkSkin/Style">
        <WindowTemplate ContainerComposition-ref="container" MinSizeLimitation="LimitToElementAndChildren">
          <SolidBackground Color="#2D2D30"/>
          <Bounds AlignmentToParent="left:0 top:0 right:0 bottom:0">
            <SolidBorder Color="#017ACC"/>
            <Bounds ref.Name="container" AlignmentToParent="left:1 top:1 right:1 bottom:1"/>
          </Bounds>
        </WindowTemplate>
      </Instance>
    </Instance>
  </Folder>
</Resource>